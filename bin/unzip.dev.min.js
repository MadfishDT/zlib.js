/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';function m(a){throw a;}var q=void 0,s,aa=this;function x(a,b){var d=a.split("."),c=aa;!(d[0]in c)&&c.execScript&&c.execScript("var "+d[0]);for(var e;d.length&&(e=d.shift());)!d.length&&b!==q?c[e]=b:c=c[e]?c[e]:c[e]={}};var y="undefined"!==typeof Uint8Array&&"undefined"!==typeof Uint16Array&&"undefined"!==typeof Uint32Array&&"undefined"!==typeof DataView;new (y?Uint8Array:Array)(256);var A;for(A=0;256>A;++A)for(var B=A,ba=7,B=B>>>1;B;B>>>=1)--ba;var ca=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,
2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,
2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,
2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,
3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,
936918E3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],E=y?new Uint32Array(ca):ca;if(aa.Uint8Array!==q)try{eval("String.fromCharCode.apply(null, new Uint8Array([0]));")}catch(da){String.fromCharCode.apply=function(a){return function(b,d){return a.call(String.fromCharCode,b,Array.prototype.slice.call(d))}}(String.fromCharCode.apply)};function F(a){var b=a.length,d=0,c=Number.POSITIVE_INFINITY,e,l,h,f,g,k,p,t,r,w;for(t=0;t<b;++t)a[t]>d&&(d=a[t]),a[t]<c&&(c=a[t]);e=1<<d;l=new (y?Uint32Array:Array)(e);h=1;f=0;for(g=2;h<=d;){for(t=0;t<b;++t)if(a[t]===h){k=0;p=f;for(r=0;r<h;++r)k=k<<1|p&1,p>>=1;w=h<<16|t;for(r=k;r<e;r+=g)l[r]=w;++f}++h;f<<=1;g<<=1}return[l,d,c]};var G=[],H;for(H=0;288>H;H++)switch(!0){case 143>=H:G.push([H+48,8]);break;case 255>=H:G.push([H-144+400,9]);break;case 279>=H:G.push([H-256+0,7]);break;case 287>=H:G.push([H-280+192,8]);break;default:m("invalid literal: "+H)}
var ja=function(){function a(a){switch(!0){case 3===a:return[257,a-3,0];case 4===a:return[258,a-4,0];case 5===a:return[259,a-5,0];case 6===a:return[260,a-6,0];case 7===a:return[261,a-7,0];case 8===a:return[262,a-8,0];case 9===a:return[263,a-9,0];case 10===a:return[264,a-10,0];case 12>=a:return[265,a-11,1];case 14>=a:return[266,a-13,1];case 16>=a:return[267,a-15,1];case 18>=a:return[268,a-17,1];case 22>=a:return[269,a-19,2];case 26>=a:return[270,a-23,2];case 30>=a:return[271,a-27,2];case 34>=a:return[272,
a-31,2];case 42>=a:return[273,a-35,3];case 50>=a:return[274,a-43,3];case 58>=a:return[275,a-51,3];case 66>=a:return[276,a-59,3];case 82>=a:return[277,a-67,4];case 98>=a:return[278,a-83,4];case 114>=a:return[279,a-99,4];case 130>=a:return[280,a-115,4];case 162>=a:return[281,a-131,5];case 194>=a:return[282,a-163,5];case 226>=a:return[283,a-195,5];case 257>=a:return[284,a-227,5];case 258===a:return[285,a-258,0];default:m("invalid length: "+a)}}var b=[],d,c;for(d=3;258>=d;d++)c=a(d),b[d]=c[2]<<24|c[1]<<
16|c[0];return b}();y&&new Uint32Array(ja);function ka(a,b){this.m=[];this.n=32768;this.d=this.f=this.c=this.w=0;this.input=y?new Uint8Array(a):a;this.z=!1;this.e=I;this.K=!1;if(b||!(b={}))b.index&&(this.c=b.index),b.bufferSize&&(this.n=b.bufferSize),b.bufferType&&(this.e=b.bufferType),b.resize&&(this.K=b.resize);switch(this.e){case K:this.a=32768;this.b=new (y?Uint8Array:Array)(32768+this.n+258);break;case I:this.a=0;this.b=new (y?Uint8Array:Array)(this.n);break;default:m(Error("invalid inflate mode"))}}var K=0,I=1;
ka.prototype.r=function(){for(;!this.z;){var a=L(this,3);a&1&&(this.z=!0);a>>>=1;switch(a){case 0:var b=this.input,d=this.c,c=this.b,e=this.a,l=b.length,h=q,f=q,g=c.length,k=q;this.d=this.f=0;d+1>=l&&m(Error("invalid uncompressed block header: LEN"));h=b[d++]|b[d++]<<8;d+1>=l&&m(Error("invalid uncompressed block header: NLEN"));f=b[d++]|b[d++]<<8;h===~f&&m(Error("invalid uncompressed block header: length verify"));d+h>b.length&&m(Error("input buffer is broken"));switch(this.e){case K:for(;e+h>c.length;){k=
g-e;h-=k;if(y)c.set(b.subarray(d,d+k),e),e+=k,d+=k;else for(;k--;)c[e++]=b[d++];this.a=e;c=la(this);e=this.a}break;case I:for(;e+h>c.length;)c=ma(this,{H:2});break;default:m(Error("invalid inflate mode"))}if(y)c.set(b.subarray(d,d+h),e),e+=h,d+=h;else for(;h--;)c[e++]=b[d++];this.c=d;this.a=e;this.b=c;break;case 1:switch(this.e){case I:na(this,oa,pa);break;case K:qa(this,oa,pa);break;default:m(Error("invalid inflate mode"))}break;case 2:for(var p=L(this,5)+257,t=L(this,5)+1,r=L(this,4)+4,w=new (y?
Uint8Array:Array)(ra.length),u=q,n=q,C=q,z=q,ea=q,T=q,J=q,v=q,ta=q,v=0;v<r;++v)w[ra[v]]=L(this,3);if(!y){v=r;for(r=w.length;v<r;++v)w[ra[v]]=0}u=F(w);z=new (y?Uint8Array:Array)(p+t);v=0;for(ta=p+t;v<ta;)switch(ea=M(this,u),ea){case 16:for(J=3+L(this,2);J--;)z[v++]=T;break;case 17:for(J=3+L(this,3);J--;)z[v++]=0;T=0;break;case 18:for(J=11+L(this,7);J--;)z[v++]=0;T=0;break;default:T=z[v++]=ea}n=y?F(z.subarray(0,p)):F(z.slice(0,p));C=y?F(z.subarray(p)):F(z.slice(p));switch(this.e){case I:na(this,n,C);
break;case K:qa(this,n,C);break;default:m(Error("invalid inflate mode"))}break;default:m(Error("unknown BTYPE: "+a))}}switch(this.e){case K:var fa;var ua=0,Ka=this.b,ga=this.m,ha,ia=new (y?Uint8Array:Array)(this.w+(this.a-32768)),D,U,V,va;if(0===ga.length)fa=y?this.b.subarray(32768,this.a):this.b.slice(32768,this.a);else{D=0;for(U=ga.length;D<U;++D){ha=ga[D];V=0;for(va=ha.length;V<va;++V)ia[ua++]=ha[V]}D=32768;for(U=this.a;D<U;++D)ia[ua++]=Ka[D];this.m=[];fa=this.buffer=ia}return fa;case I:var P,
Q=this.a;y?this.K?(P=new Uint8Array(Q),P.set(this.b.subarray(0,Q))):P=this.b.subarray(0,Q):(this.b.length>Q&&(this.b.length=Q),P=this.b);return this.buffer=P;default:m(Error("invalid inflate mode"))}};
var sa=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],ra=y?new Uint16Array(sa):sa,wa=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],xa=y?new Uint16Array(wa):wa,ya=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],N=y?new Uint8Array(ya):ya,za=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],Aa=y?new Uint16Array(za):za,Ba=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,
11,11,12,12,13,13],O=y?new Uint8Array(Ba):Ba,Ca=new (y?Uint8Array:Array)(288),R,Da;R=0;for(Da=Ca.length;R<Da;++R)Ca[R]=143>=R?8:255>=R?9:279>=R?7:8;var oa=F(Ca),Ea=new (y?Uint8Array:Array)(30),S,Fa;S=0;for(Fa=Ea.length;S<Fa;++S)Ea[S]=5;var pa=F(Ea);function L(a,b){var d=a.f,c=a.d,e=a.input,l=a.c,h;l+(b-c+7>>3)>=e.length&&m(Error("input buffer is broken"));for(;c<b;)d|=e[l++]<<c,c+=8;h=d&(1<<b)-1;a.f=d>>>b;a.d=c-b;a.c=l;return h}
function M(a,b){for(var d=a.f,c=a.d,e=a.input,l=a.c,h=e.length,f=b[0],g=b[1],k,p;c<g&&!(l>=h);)d|=e[l++]<<c,c+=8;k=f[d&(1<<g)-1];p=k>>>16;p>c&&m(Error("invalid code length: "+p));a.f=d>>p;a.d=c-p;a.c=l;return k&65535}
function qa(a,b,d){var c=a.b,e=a.a;a.C=b;for(var l=c.length-258,h,f,g,k;256!==(h=M(a,b));)if(256>h)e>=l&&(a.a=e,c=la(a),e=a.a),c[e++]=h;else{f=h-257;k=xa[f];0<N[f]&&(k+=L(a,N[f]));h=M(a,d);g=Aa[h];0<O[h]&&(g+=L(a,O[h]));e>=l&&(a.a=e,c=la(a),e=a.a);for(;k--;)c[e]=c[e++-g]}for(;8<=a.d;)a.d-=8,a.c--;a.a=e}
function na(a,b,d){var c=a.b,e=a.a;a.C=b;for(var l=c.length,h,f,g,k;256!==(h=M(a,b));)if(256>h)e>=l&&(c=ma(a),l=c.length),c[e++]=h;else{f=h-257;k=xa[f];0<N[f]&&(k+=L(a,N[f]));h=M(a,d);g=Aa[h];0<O[h]&&(g+=L(a,O[h]));e+k>l&&(c=ma(a),l=c.length);for(;k--;)c[e]=c[e++-g]}for(;8<=a.d;)a.d-=8,a.c--;a.a=e}
function la(a){var b=new (y?Uint8Array:Array)(a.a-32768),d=a.a-32768,c,e,l=a.b;if(y)b.set(l.subarray(32768,b.length));else{c=0;for(e=b.length;c<e;++c)b[c]=l[c+32768]}a.m.push(b);a.w+=b.length;if(y)l.set(l.subarray(d,d+32768));else for(c=0;32768>c;++c)l[c]=l[d+c];a.a=32768;return l}
function ma(a,b){var d,c=a.input.length/a.c+1|0,e,l,h,f=a.input,g=a.b;b&&("number"===typeof b.H&&(c=b.H),"number"===typeof b.P&&(c+=b.P));2>c?(e=(f.length-a.c)/a.C[2],h=258*(e/2)|0,l=h<g.length?g.length+h:g.length<<1):l=g.length*c;y?(d=new Uint8Array(l),d.set(g)):d=g;a.b=d;return a.b};function W(a){a=a||{};this.files=[];this.A=a.comment}W.prototype.L=function(a){this.k=a};W.prototype.u=function(a){var b=a[2]&65535|2;return b*(b^1)>>8&255};W.prototype.l=function(a,b){a[0]=(E[(a[0]^b)&255]^a[0]>>>8)>>>0;a[1]=(6681*(20173*(a[1]+(a[0]&255))>>>0)>>>0)+1>>>0;a[2]=(E[(a[2]^a[1]>>>24)&255]^a[2]>>>8)>>>0};W.prototype.S=function(a){var b=[305419896,591751049,878082192],d,c;y&&(b=new Uint32Array(b));d=0;for(c=a.length;d<c;++d)this.l(b,a[d]&255);return b};function X(a,b){b=b||{};this.input=y&&a instanceof Array?new Uint8Array(a):a;this.c=0;this.Z=b.verify||!1;this.k=b.password}var Ga={O:0,M:8},Y=[80,75,1,2],Z=[80,75,3,4],$=[80,75,5,6];function Ha(a,b){this.input=a;this.offset=b}
Ha.prototype.parse=function(){var a=this.input,b=this.offset;(a[b++]!==Y[0]||a[b++]!==Y[1]||a[b++]!==Y[2]||a[b++]!==Y[3])&&m(Error("invalid file header signature"));this.version=a[b++];this.da=a[b++];this.I=a[b++]|a[b++]<<8;this.t=a[b++]|a[b++]<<8;this.q=a[b++]|a[b++]<<8;this.time=a[b++]|a[b++]<<8;this.D=a[b++]|a[b++]<<8;this.j=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.p=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.v=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.i=a[b++]|a[b++]<<
8;this.g=a[b++]|a[b++]<<8;this.G=a[b++]|a[b++]<<8;this.ba=a[b++]|a[b++]<<8;this.X=a[b++]|a[b++]<<8;this.T=a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24;this.J=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.filename=String.fromCharCode.apply(null,y?a.subarray(b,b+=this.i):a.slice(b,b+=this.i));this.U=y?a.subarray(b,b+=this.g):a.slice(b,b+=this.g);this.A=y?a.subarray(b,b+this.G):a.slice(b,b+this.G);this.length=b-this.offset};function Ia(a,b){this.input=a;this.offset=b}var Ja={N:1,$:8,aa:2048};
Ia.prototype.parse=function(){var a=this.input,b=this.offset;(a[b++]!==Z[0]||a[b++]!==Z[1]||a[b++]!==Z[2]||a[b++]!==Z[3])&&m(Error("invalid local file header signature"));this.I=a[b++]|a[b++]<<8;this.t=a[b++]|a[b++]<<8;this.q=a[b++]|a[b++]<<8;this.time=a[b++]|a[b++]<<8;this.D=a[b++]|a[b++]<<8;this.j=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.p=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.v=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.i=a[b++]|a[b++]<<8;this.g=a[b++]|a[b++]<<8;this.filename=
String.fromCharCode.apply(null,y?a.subarray(b,b+=this.i):a.slice(b,b+=this.i));this.U=y?a.subarray(b,b+=this.g):a.slice(b,b+=this.g);this.length=b-this.offset};
function La(a){var b=[],d={},c,e,l,h;if(!a.h){if(a.o===q){var f=a.input,g;if(!a.F)a:{var k=a.input,p;for(p=k.length-12;0<p;--p)if(k[p]===$[0]&&k[p+1]===$[1]&&k[p+2]===$[2]&&k[p+3]===$[3]){a.F=p;break a}m(Error("End of Central Directory Record not found"))}g=a.F;(f[g++]!==$[0]||f[g++]!==$[1]||f[g++]!==$[2]||f[g++]!==$[3])&&m(Error("invalid signature"));a.ca=f[g++]|f[g++]<<8;a.ea=f[g++]|f[g++]<<8;a.fa=f[g++]|f[g++]<<8;a.Y=f[g++]|f[g++]<<8;a.Q=(f[g++]|f[g++]<<8|f[g++]<<16|f[g++]<<24)>>>0;a.o=(f[g++]|
f[g++]<<8|f[g++]<<16|f[g++]<<24)>>>0;a.B=f[g++]|f[g++]<<8;a.A=y?f.subarray(g,g+a.B):f.slice(g,g+a.B)}c=a.o;l=0;for(h=a.Y;l<h;++l)e=new Ha(a.input,c),e.parse(),c+=e.length,b[l]=e,d[e.filename]=l;a.Q<c-a.o&&m(Error("invalid file header size"));a.h=b;a.s=d}}s=X.prototype;
s.V=function(a,b){var d=this.h,c=this.s[a];d||La(this);d[c]===q&&m(Error("wrong index"));(new Ia(this.input,d[c].J)).parse();switch(b){case "needVersion":return d[c].I;case "flags":return d[c].t;case "compression":return d[c].q;case "time":return d[c].time;case "date":return d[c].D;case "crc32":return d[c].j;case "compressedSize":return d[c].p;case "plainSize":return d[c].v;case "internalFileAttributes":return d[c].X;case "externalFileAttributes":return d[c].T;default:return 0}};
s.W=function(){var a=[],b,d,c;this.h||La(this);c=this.h;b=0;for(d=c.length;b<d;++b)a[b]=c[b].filename;return a};
s.r=function(a,b){var d;this.s||La(this);d=this.s[a];d===q&&m(Error(a+" not found"));var c;c=b||{};var e=this.input,l=this.h,h,f,g,k,p,t,r,w;l||La(this);l[d]===q&&m(Error("wrong index"));f=l[d].J;h=new Ia(this.input,f);h.parse();f+=h.length;g=h.p;if(0!==(h.t&Ja.N)){!c.password&&!this.k&&m(Error("please set password"));t=this.R(c.password||this.k);r=f;for(w=f+12;r<w;++r)Ma(this,t,e[r]);f+=12;g-=12;r=f;for(w=f+g;r<w;++r)e[r]=Ma(this,t,e[r])}switch(h.q){case Ga.O:k=y?this.input.subarray(f,f+g):this.input.slice(f,
f+g);break;case Ga.M:k=(new ka(this.input,{index:f,bufferSize:h.v})).r();break;default:m(Error("unknown compression type"))}if(this.Z){var u=q,n,C="number"===typeof u?u:u=0,z=k.length;n=-1;for(C=z&7;C--;++u)n=n>>>8^E[(n^k[u])&255];for(C=z>>3;C--;u+=8)n=n>>>8^E[(n^k[u])&255],n=n>>>8^E[(n^k[u+1])&255],n=n>>>8^E[(n^k[u+2])&255],n=n>>>8^E[(n^k[u+3])&255],n=n>>>8^E[(n^k[u+4])&255],n=n>>>8^E[(n^k[u+5])&255],n=n>>>8^E[(n^k[u+6])&255],n=n>>>8^E[(n^k[u+7])&255];p=(n^4294967295)>>>0;h.j!==p&&m(Error("wrong crc: file=0x"+
h.j.toString(16)+", data=0x"+p.toString(16)))}return k};s.L=function(a){this.k=a};function Ma(a,b,d){d^=a.u(b);a.l(b,d);return d}s.l=W.prototype.l;s.R=W.prototype.S;s.u=W.prototype.u;x("Zlib.Unzip",X);x("Zlib.Unzip.prototype.decompress",X.prototype.r);x("Zlib.Unzip.prototype.getFilenames",X.prototype.W);x("Zlib.Unzip.prototype.getFileHeaderAttribute",X.prototype.V);x("Zlib.Unzip.prototype.setPassword",X.prototype.L);}).call(this);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L0gsQ0FERixDQUNZcUIsS0FBSixDQUNKLG9CQURJO0FBQ21CbUosQ0FBQXpDLEVBQUFxRCxTQUFBLENBQStCLEVBQS9CLENBRG5CLENBRUosV0FGSSxDQUVVckQsQ0FBQXFELFNBQUEsQ0FBZSxFQUFmLENBRlYsQ0FEUixDQUZlLENBd0RqQixNQTlDT3pILEVBaUN3RCxDQW1CakV1RyxFQUFBdEUsRUFBQSxDQUFtQ3lGLFFBQVEsQ0FBQ3ZGLENBQUQsQ0FBVyxDQUNwRCxJQUFBQSxFQUFBLENBQWdCQSxDQURvQyxDQVN4QndGLFNBQVEsR0FBQSxDQUFSQSxDQUFRLENBQUNyRixDQUFELENBQU1oSSxDQUFOLENBQVMsQ0FDN0NBLENBQUEsRUFBSyxDQUFBOEgsRUFBQSxDQUF5REUsQ0FBekQsQ0FDTCxFQUFBRSxFQUFBLENBQTRERixDQUE1RCxDQUFrRWhJLENBQWxFLENBRUEsT0FBT0EsRUFKc0MsQ0FRL0NpTSxDQUFBL0QsRUFBQSxDQUFrQ1YsQ0FBQTVHLFVBQUFzSCxFQUNsQytELEVBQUFhLEVBQUEsQ0FBMkN0RixDQUFBNUcsVUFBQXlILEVBQzNDNEQsRUFBQW5FLEVBQUEsQ0FBK0JOLENBQUE1RyxVQUFBa0gsRSxDQ3hvQi9CakosQ0FBQSxDQUFrQixZQUFsQixDQUFnQzBKLENBQWhDLENBQ0ExSixFQUFBLENBQ0UsaUNBREYsQ0FFRTBKLENBQUEzSCxVQUFBMkMsRUFGRixDQUlBMUUsRUFBQSxDQUNFLG1DQURGLENBRUUwSixDQUFBM0gsVUFBQTRMLEVBRkYsQ0FJQTNOLEVBQUEsQ0FDRSw2Q0FERixDQUVFMEosQ0FBQTNILFVBQUFzTCxFQUZGLENBSUFyTixFQUFBLENBQ0Usa0NBREYsQ0FFRTBKLENBQUEzSCxVQUFBK0csRUFGRjsiLCJzb3VyY2VzIjpbImNsb3N1cmUtcHJpbWl0aXZlc1xcYmFzZS5qcyIsImRlZmluZVxcdHlwZWRhcnJheVxcaHlicmlkLmpzIiwic3JjXFxiaXRzdHJlYW0uanMiLCJzcmNcXGNyYzMyLmpzIiwic3JjXFxmaXhfcGhhbnRvbWpzX2Z1bmN0aW9uX2FwcGx5X2J1Zy5qcyIsInNyY1xcaHVmZm1hbi5qcyIsInNyY1xccmF3ZGVmbGF0ZS5qcyIsInNyY1xccmF3aW5mbGF0ZS5qcyIsInNyY1xcemlwLmpzIiwic3JjXFx1bnppcC5qcyIsImV4cG9ydFxcdW56aXAuanMiXSwibmFtZXMiOlsiZ29vZy5nbG9iYWwiLCJnb29nLmV4cG9ydFN5bWJvbCIsInB1YmxpY1BhdGgiLCJvYmplY3QiLCJwYXJ0cyIsInNwbGl0IiwiY3VyIiwiZXhlY1NjcmlwdCIsInBhcnQiLCJsZW5ndGgiLCJzaGlmdCIsIkpTQ29tcGlsZXJfYWxpYXNfVk9JRCIsIlVTRV9UWVBFREFSUkFZIiwiVWludDhBcnJheSIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJEYXRhVmlldyIsIkFycmF5IiwiaSIsInMiLCJuIiwiWmxpYi5DUkMzMi5UYWJsZV8iLCJabGliLkNSQzMyLlRhYmxlIiwiZXZhbCIsImUiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcHBseSIsImZyb21DaGFyQ29kZUFwcGx5IiwidGhpc29iaiIsImFyZ3MiLCJjYWxsIiwicHJvdG90eXBlIiwic2xpY2UiLCJabGliLkh1ZmZtYW4uYnVpbGRIdWZmbWFuVGFibGUiLCJsZW5ndGhzIiwibGlzdFNpemUiLCJtYXhDb2RlTGVuZ3RoIiwibWluQ29kZUxlbmd0aCIsIk51bWJlciIsIlBPU0lUSVZFX0lORklOSVRZIiwic2l6ZSIsInRhYmxlIiwiYml0TGVuZ3RoIiwiY29kZSIsInNraXAiLCJyZXZlcnNlZCIsInJ0ZW1wIiwiaiIsInZhbHVlIiwicHVzaCIsIkpTQ29tcGlsZXJfYWxpYXNfVEhST1ciLCJjIiwiWmxpYi5SYXdJbmZsYXRlIiwiaW5wdXQiLCJvcHRfcGFyYW1zIiwiYmxvY2tzIiwiYnVmZmVyU2l6ZSIsIlpMSUJfUkFXX0lORkxBVEVfQlVGRkVSX1NJWkUiLCJiaXRzYnVmbGVuIiwiYml0c2J1ZiIsImlwIiwidG90YWxwb3MiLCJiZmluYWwiLCJidWZmZXJUeXBlIiwiWmxpYi5SYXdJbmZsYXRlLkJ1ZmZlclR5cGUuQURBUFRJVkUiLCJyZXNpemUiLCJabGliLlJhd0luZmxhdGUuQnVmZmVyVHlwZS5CTE9DSyIsIm9wIiwiWmxpYi5SYXdJbmZsYXRlLk1heEJhY2t3YXJkTGVuZ3RoIiwib3V0cHV0IiwiWmxpYi5SYXdJbmZsYXRlLk1heENvcHlMZW5ndGgiLCJFcnJvciIsIkJMT0NLIiwiQURBUFRJVkUiLCJkZWNvbXByZXNzIiwiWmxpYi5SYXdJbmZsYXRlLnByb3RvdHlwZS5kZWNvbXByZXNzIiwiaGRyIiwicmVhZEJpdHMiLCJwYXJzZUJsb2NrIiwiaW5wdXRMZW5ndGgiLCJsZW4iLCJubGVuIiwib2xlbmd0aCIsInByZUNvcHkiLCJzZXQiLCJzdWJhcnJheSIsImV4cGFuZEJ1ZmZlckJsb2NrIiwiZXhwYW5kQnVmZmVyQWRhcHRpdmUiLCJkZWNvZGVIdWZmbWFuQWRhcHRpdmUiLCJabGliLlJhd0luZmxhdGUuRml4ZWRMaXRlcmFsTGVuZ3RoVGFibGUiLCJabGliLlJhd0luZmxhdGUuRml4ZWREaXN0YW5jZVRhYmxlIiwiZGVjb2RlSHVmZm1hbkJsb2NrIiwiaGxpdCIsImhkaXN0IiwiaGNsZW4iLCJjb2RlTGVuZ3RocyIsIlpsaWIuUmF3SW5mbGF0ZS5PcmRlci5sZW5ndGgiLCJjb2RlTGVuZ3Roc1RhYmxlIiwibGl0bGVuVGFibGUiLCJkaXN0VGFibGUiLCJsZW5ndGhUYWJsZSIsInByZXYiLCJyZXBlYXQiLCJpbCIsIlpsaWIuUmF3SW5mbGF0ZS5PcmRlciIsInJlYWRDb2RlQnlUYWJsZSIsInBvcyIsImNvbmNhdEJ1ZmZlckJsb2NrIiwiYmxvY2siLCJidWZmZXIiLCJqbCIsImNvbmNhdEJ1ZmZlckR5bmFtaWMiLCJabGliLlJhd0luZmxhdGUuTGVuZ3RoQ29kZVRhYmxlIiwiWmxpYi5SYXdJbmZsYXRlLkxlbmd0aEV4dHJhVGFibGUiLCJabGliLlJhd0luZmxhdGUuRGlzdENvZGVUYWJsZSIsIlpsaWIuUmF3SW5mbGF0ZS5EaXN0RXh0cmFUYWJsZSIsIlpsaWIuUmF3SW5mbGF0ZS5wcm90b3R5cGUucmVhZEJpdHMiLCJvY3RldCIsIlpsaWIuUmF3SW5mbGF0ZS5wcm90b3R5cGUucmVhZENvZGVCeVRhYmxlIiwiY29kZVRhYmxlIiwiY29kZVdpdGhMZW5ndGgiLCJjb2RlTGVuZ3RoIiwiWmxpYi5SYXdJbmZsYXRlLnByb3RvdHlwZS5kZWNvZGVIdWZmbWFuQmxvY2siLCJsaXRsZW4iLCJkaXN0IiwiY3VycmVudExpdGxlblRhYmxlIiwidGkiLCJjb2RlRGlzdCIsIlpsaWIuUmF3SW5mbGF0ZS5wcm90b3R5cGUuZGVjb2RlSHVmZm1hbkFkYXB0aXZlIiwiWmxpYi5SYXdJbmZsYXRlLnByb3RvdHlwZS5leHBhbmRCdWZmZXJCbG9jayIsImJhY2t3YXJkIiwiWmxpYi5SYXdJbmZsYXRlLnByb3RvdHlwZS5leHBhbmRCdWZmZXJBZGFwdGl2ZSIsIm9wdF9wYXJhbSIsInJhdGlvIiwibWF4SHVmZkNvZGUiLCJuZXdTaXplIiwibWF4SW5mbGF0ZVNpemUiLCJmaXhSYXRpbyIsImFkZFJhdGlvIiwiWmxpYi5aaXAiLCJmaWxlcyIsImNvbW1lbnQiLCJzZXRQYXNzd29yZCIsIlpsaWIuWmlwLnByb3RvdHlwZS5zZXRQYXNzd29yZCIsInBhc3N3b3JkIiwiZ2V0Qnl0ZSIsIlpsaWIuWmlwLnByb3RvdHlwZS5nZXRCeXRlIiwia2V5IiwidG1wIiwidXBkYXRlS2V5cyIsIlpsaWIuWmlwLnByb3RvdHlwZS51cGRhdGVLZXlzIiwibnVtIiwiY3JlYXRlRW5jcnlwdGlvbktleSIsIlpsaWIuWmlwLnByb3RvdHlwZS5jcmVhdGVFbmNyeXB0aW9uS2V5IiwiWmxpYi5VbnppcCIsInZlcmlmeSIsIlpsaWIuVW56aXAuQ29tcHJlc3Npb25NZXRob2QiLCJabGliLlppcC5Db21wcmVzc2lvbk1ldGhvZCIsIlNUT1JFIiwiREVGTEFURSIsIlpsaWIuVW56aXAuRmlsZUhlYWRlclNpZ25hdHVyZSIsIlpsaWIuWmlwLkZpbGVIZWFkZXJTaWduYXR1cmUiLCJabGliLlVuemlwLkxvY2FsRmlsZUhlYWRlclNpZ25hdHVyZSIsIlpsaWIuWmlwLkxvY2FsRmlsZUhlYWRlclNpZ25hdHVyZSIsIlpsaWIuVW56aXAuQ2VudHJhbERpcmVjdG9yeVNpZ25hdHVyZSIsIlpsaWIuWmlwLkNlbnRyYWxEaXJlY3RvcnlTaWduYXR1cmUiLCJabGliLlVuemlwLkZpbGVIZWFkZXIiLCJvZmZzZXQiLCJwYXJzZSIsIlpsaWIuVW56aXAuRmlsZUhlYWRlci5wcm90b3R5cGUucGFyc2UiLCJ2ZXJzaW9uIiwib3MiLCJuZWVkVmVyc2lvbiIsImZsYWdzIiwiY29tcHJlc3Npb24iLCJ0aW1lIiwiZGF0ZSIsImNyYzMyIiwiY29tcHJlc3NlZFNpemUiLCJwbGFpblNpemUiLCJmaWxlTmFtZUxlbmd0aCIsImV4dHJhRmllbGRMZW5ndGgiLCJmaWxlQ29tbWVudExlbmd0aCIsImRpc2tOdW1iZXJTdGFydCIsImludGVybmFsRmlsZUF0dHJpYnV0ZXMiLCJleHRlcm5hbEZpbGVBdHRyaWJ1dGVzIiwicmVsYXRpdmVPZmZzZXQiLCJmaWxlbmFtZSIsImV4dHJhRmllbGQiLCJabGliLlVuemlwLkxvY2FsRmlsZUhlYWRlciIsIlpsaWIuVW56aXAuTG9jYWxGaWxlSGVhZGVyLkZsYWdzIiwiWmxpYi5aaXAuRmxhZ3MiLCJFTkNSWVBUIiwiREVTQ1JJUFRPUiIsIlVURjgiLCJabGliLlVuemlwLkxvY2FsRmlsZUhlYWRlci5wcm90b3R5cGUucGFyc2UiLCJabGliLlVuemlwLnByb3RvdHlwZS5wYXJzZUZpbGVIZWFkZXIiLCJmaWxlbGlzdCIsImZpbGV0YWJsZSIsImZpbGVIZWFkZXIiLCJmaWxlSGVhZGVyTGlzdCIsImNlbnRyYWxEaXJlY3RvcnlPZmZzZXQiLCJwYXJzZUVuZE9mQ2VudHJhbERpcmVjdG9yeVJlY29yZCIsImVvY2RyT2Zmc2V0IiwibnVtYmVyT2ZUaGlzRGlzayIsInN0YXJ0RGlzayIsInRvdGFsRW50cmllc1RoaXNEaXNrIiwidG90YWxFbnRyaWVzIiwiY2VudHJhbERpcmVjdG9yeVNpemUiLCJjb21tZW50TGVuZ3RoIiwiZmlsZW5hbWVUb0luZGV4IiwiWmxpYiRVbnppcC5wcm90b3R5cGUiLCJabGliLlVuemlwLnByb3RvdHlwZSIsImdldEZpbGVIZWFkZXJBdHRyaWJ1dGUiLCJabGliLlVuemlwLnByb3RvdHlwZS5nZXRGaWxlSGVhZGVyQXR0cmlidXRlIiwiYXR0cmlidXRlbmFtZSIsImluZGV4IiwicGFyc2VGaWxlSGVhZGVyIiwibG9jYWxGaWxlSGVhZGVyIiwiZ2V0RmlsZW5hbWVzIiwiWmxpYi5VbnppcC5wcm90b3R5cGUuZ2V0RmlsZW5hbWVzIiwiZmlsZW5hbWVMaXN0IiwiWmxpYi5VbnppcC5wcm90b3R5cGUuZGVjb21wcmVzcyIsImdldEZpbGVEYXRhIiwiWmxpYi5VbnppcC5Mb2NhbEZpbGVIZWFkZXIuRmxhZ3MuRU5DUllQVCIsImNyZWF0ZURlY3J5cHRpb25LZXkiLCJkZWNvZGUiLCJabGliLlVuemlwLkNvbXByZXNzaW9uTWV0aG9kLlNUT1JFIiwiWmxpYi5VbnppcC5Db21wcmVzc2lvbk1ldGhvZC5ERUZMQVRFIiwiY3JjIiwidG9TdHJpbmciLCJabGliLlVuemlwLnByb3RvdHlwZS5zZXRQYXNzd29yZCIsIlpsaWIuVW56aXAucHJvdG90eXBlLmRlY29kZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAwNiBUaGUgQ2xvc3VyZSBMaWJyYXJ5IEF1dGhvcnMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbi8vXHJcbi8vIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbi8vIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuLy8gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbi8vXHJcbi8vICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbi8vXHJcbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuLy8gZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUy1JU1wiIEJBU0lTLFxyXG4vLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4vLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuXHJcbi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IEJvb3RzdHJhcCBmb3IgdGhlIEdvb2dsZSBKUyBMaWJyYXJ5IChDbG9zdXJlKS5cclxuICpcclxuICogSW4gdW5jb21waWxlZCBtb2RlIGJhc2UuanMgd2lsbCB3cml0ZSBvdXQgQ2xvc3VyZSdzIGRlcHMgZmlsZSwgdW5sZXNzIHRoZVxyXG4gKiBnbG9iYWwgPGNvZGU+Q0xPU1VSRV9OT19ERVBTPC9jb2RlPiBpcyBzZXQgdG8gdHJ1ZS4gIFRoaXMgYWxsb3dzIHByb2plY3RzIHRvXHJcbiAqIGluY2x1ZGUgdGhlaXIgb3duIGRlcHMgZmlsZShzKSBmcm9tIGRpZmZlcmVudCBsb2NhdGlvbnMuXHJcbiAqXHJcbiAqL1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAZGVmaW5lIHtib29sZWFufSBPdmVycmlkZGVuIHRvIHRydWUgYnkgdGhlIGNvbXBpbGVyIHdoZW4gLS1jbG9zdXJlX3Bhc3NcclxuICogICAgIG9yIC0tbWFya19hc19jb21waWxlZCBpcyBzcGVjaWZpZWQuXHJcbiAqL1xyXG52YXIgQ09NUElMRUQgPSBmYWxzZTtcclxuXHJcblxyXG4vKipcclxuICogQmFzZSBuYW1lc3BhY2UgZm9yIHRoZSBDbG9zdXJlIGxpYnJhcnkuICBDaGVja3MgdG8gc2VlIGdvb2cgaXNcclxuICogYWxyZWFkeSBkZWZpbmVkIGluIHRoZSBjdXJyZW50IHNjb3BlIGJlZm9yZSBhc3NpZ25pbmcgdG8gcHJldmVudFxyXG4gKiBjbG9iYmVyaW5nIGlmIGJhc2UuanMgaXMgbG9hZGVkIG1vcmUgdGhhbiBvbmNlLlxyXG4gKlxyXG4gKiBAY29uc3RcclxuICovXHJcbnZhciBnb29nID0gZ29vZyB8fCB7fTsgLy8gSWRlbnRpZmllcyB0aGlzIGZpbGUgYXMgdGhlIENsb3N1cmUgYmFzZS5cclxuXHJcblxyXG4vKipcclxuICogUmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgY29udGV4dC4gIEluIG1vc3QgY2FzZXMgdGhpcyB3aWxsIGJlICd3aW5kb3cnLlxyXG4gKi9cclxuZ29vZy5nbG9iYWwgPSB0aGlzO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAZGVmaW5lIHtib29sZWFufSBERUJVRyBpcyBwcm92aWRlZCBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgZGVidWdnaW5nIGNvZGVcclxuICogdGhhdCBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIGEgcHJvZHVjdGlvbiBqc19iaW5hcnkgY2FuIGJlIGVhc2lseSBzdHJpcHBlZFxyXG4gKiBieSBzcGVjaWZ5aW5nIC0tZGVmaW5lIGdvb2cuREVCVUc9ZmFsc2UgdG8gdGhlIEpTQ29tcGlsZXIuIEZvciBleGFtcGxlLCBtb3N0XHJcbiAqIHRvU3RyaW5nKCkgbWV0aG9kcyBzaG91bGQgYmUgZGVjbGFyZWQgaW5zaWRlIGFuIFwiaWYgKGdvb2cuREVCVUcpXCIgY29uZGl0aW9uYWxcclxuICogYmVjYXVzZSB0aGV5IGFyZSBnZW5lcmFsbHkgdXNlZCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzIGFuZCBpdCBpcyBkaWZmaWN1bHRcclxuICogZm9yIHRoZSBKU0NvbXBpbGVyIHRvIHN0YXRpY2FsbHkgZGV0ZXJtaW5lIHdoZXRoZXIgdGhleSBhcmUgdXNlZC5cclxuICovXHJcbmdvb2cuREVCVUcgPSB0cnVlO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBAZGVmaW5lIHtzdHJpbmd9IExPQ0FMRSBkZWZpbmVzIHRoZSBsb2NhbGUgYmVpbmcgdXNlZCBmb3IgY29tcGlsYXRpb24uIEl0IGlzXHJcbiAqIHVzZWQgdG8gc2VsZWN0IGxvY2FsZSBzcGVjaWZpYyBkYXRhIHRvIGJlIGNvbXBpbGVkIGluIGpzIGJpbmFyeS4gQlVJTEQgcnVsZVxyXG4gKiBjYW4gc3BlY2lmeSB0aGlzIHZhbHVlIGJ5IFwiLS1kZWZpbmUgZ29vZy5MT0NBTEU9PGxvY2FsZV9uYW1lPlwiIGFzIEpTQ29tcGlsZXJcclxuICogb3B0aW9uLlxyXG4gKlxyXG4gKiBUYWtlIGludG8gYWNjb3VudCB0aGF0IHRoZSBsb2NhbGUgY29kZSBmb3JtYXQgaXMgaW1wb3J0YW50LiBZb3Ugc2hvdWxkIHVzZVxyXG4gKiB0aGUgY2Fub25pY2FsIFVuaWNvZGUgZm9ybWF0IHdpdGggaHlwaGVuIGFzIGEgZGVsaW1pdGVyLiBMYW5ndWFnZSBtdXN0IGJlXHJcbiAqIGxvd2VyY2FzZSwgTGFuZ3VhZ2UgU2NyaXB0IC0gQ2FwaXRhbGl6ZWQsIFJlZ2lvbiAtIFVQUEVSQ0FTRS5cclxuICogVGhlcmUgYXJlIGZldyBleGFtcGxlczogcHQtQlIsIGVuLCBlbi1VUywgc3ItTGF0aW4tQk8sIHpoLUhhbnMtQ04uXHJcbiAqXHJcbiAqIFNlZSBtb3JlIGluZm8gYWJvdXQgbG9jYWxlIGNvZGVzIGhlcmU6XHJcbiAqIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1LyNVbmljb2RlX0xhbmd1YWdlX2FuZF9Mb2NhbGVfSWRlbnRpZmllcnNcclxuICpcclxuICogRm9yIGxhbmd1YWdlIGNvZGVzIHlvdSBzaG91bGQgdXNlIHZhbHVlcyBkZWZpbmVkIGJ5IElTTyA2OTMtMS4gU2VlIGl0IGhlcmVcclxuICogaHR0cDovL3d3dy53My5vcmcvV0FJL0VSL0lHL2VydC9pc282MzkuaHRtLiBUaGVyZSBpcyBvbmx5IG9uZSBleGNlcHRpb24gZnJvbVxyXG4gKiB0aGlzIHJ1bGU6IHRoZSBIZWJyZXcgbGFuZ3VhZ2UuIEZvciBsZWdhY3kgcmVhc29ucyB0aGUgb2xkIGNvZGUgKGl3KSBzaG91bGRcclxuICogYmUgdXNlZCBpbnN0ZWFkIG9mIHRoZSBuZXcgY29kZSAoaGUpLCBzZWUgaHR0cDovL3dpa2kvTWFpbi9JSUlTeW5vbnltcy5cclxuICovXHJcbmdvb2cuTE9DQUxFID0gJ2VuJzsgIC8vIGRlZmF1bHQgdG8gZW5cclxuXHJcblxyXG4vKipcclxuICogQ3JlYXRlcyBvYmplY3Qgc3R1YnMgZm9yIGEgbmFtZXNwYWNlLiAgVGhlIHByZXNlbmNlIG9mIG9uZSBvciBtb3JlXHJcbiAqIGdvb2cucHJvdmlkZSgpIGNhbGxzIGluZGljYXRlIHRoYXQgdGhlIGZpbGUgZGVmaW5lcyB0aGUgZ2l2ZW5cclxuICogb2JqZWN0cy9uYW1lc3BhY2VzLiAgQnVpbGQgdG9vbHMgYWxzbyBzY2FuIGZvciBwcm92aWRlL3JlcXVpcmUgc3RhdGVtZW50c1xyXG4gKiB0byBkaXNjZXJuIGRlcGVuZGVuY2llcywgYnVpbGQgZGVwZW5kZW5jeSBmaWxlcyAoc2VlIGRlcHMuanMpLCBldGMuXHJcbiAqIEBzZWUgZ29vZy5yZXF1aXJlXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIE5hbWVzcGFjZSBwcm92aWRlZCBieSB0aGlzIGZpbGUgaW4gdGhlIGZvcm1cclxuICogICAgIFwiZ29vZy5wYWNrYWdlLnBhcnRcIi5cclxuICovXHJcbmdvb2cucHJvdmlkZSA9IGZ1bmN0aW9uKG5hbWUpIHtcclxuICBpZiAoIUNPTVBJTEVEKSB7XHJcbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgc2FtZSBuYW1lc3BhY2UgaXNuJ3QgcHJvdmlkZWQgdHdpY2UuIFRoaXMgaXMgaW50ZW5kZWRcclxuICAgIC8vIHRvIHRlYWNoIG5ldyBkZXZlbG9wZXJzIHRoYXQgJ2dvb2cucHJvdmlkZScgaXMgZWZmZWN0aXZlbHkgYSB2YXJpYWJsZVxyXG4gICAgLy8gZGVjbGFyYXRpb24uIEFuZCB3aGVuIEpTQ29tcGlsZXIgdHJhbnNmb3JtcyBnb29nLnByb3ZpZGUgaW50byBhIHJlYWxcclxuICAgIC8vIHZhcmlhYmxlIGRlY2xhcmF0aW9uLCB0aGUgY29tcGlsZWQgSlMgc2hvdWxkIHdvcmsgdGhlIHNhbWUgYXMgdGhlIHJhd1xyXG4gICAgLy8gSlMtLWV2ZW4gd2hlbiB0aGUgcmF3IEpTIHVzZXMgZ29vZy5wcm92aWRlIGluY29ycmVjdGx5LlxyXG4gICAgaWYgKGdvb2cuaXNQcm92aWRlZF8obmFtZSkpIHtcclxuICAgICAgdGhyb3cgRXJyb3IoJ05hbWVzcGFjZSBcIicgKyBuYW1lICsgJ1wiIGFscmVhZHkgZGVjbGFyZWQuJyk7XHJcbiAgICB9XHJcbiAgICBkZWxldGUgZ29vZy5pbXBsaWNpdE5hbWVzcGFjZXNfW25hbWVdO1xyXG5cclxuICAgIHZhciBuYW1lc3BhY2UgPSBuYW1lO1xyXG4gICAgd2hpbGUgKChuYW1lc3BhY2UgPSBuYW1lc3BhY2Uuc3Vic3RyaW5nKDAsIG5hbWVzcGFjZS5sYXN0SW5kZXhPZignLicpKSkpIHtcclxuICAgICAgaWYgKGdvb2cuZ2V0T2JqZWN0QnlOYW1lKG5hbWVzcGFjZSkpIHtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgICBnb29nLmltcGxpY2l0TmFtZXNwYWNlc19bbmFtZXNwYWNlXSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBnb29nLmV4cG9ydFBhdGhfKG5hbWUpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBNYXJrcyB0aGF0IHRoZSBjdXJyZW50IGZpbGUgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgdGVzdGluZywgYW5kIG5ldmVyIGZvclxyXG4gKiBsaXZlIGNvZGUgaW4gcHJvZHVjdGlvbi5cclxuICogQHBhcmFtIHtzdHJpbmc9fSBvcHRfbWVzc2FnZSBPcHRpb25hbCBtZXNzYWdlIHRvIGFkZCB0byB0aGUgZXJyb3IgdGhhdCdzXHJcbiAqICAgICByYWlzZWQgd2hlbiB1c2VkIGluIHByb2R1Y3Rpb24gY29kZS5cclxuICovXHJcbmdvb2cuc2V0VGVzdE9ubHkgPSBmdW5jdGlvbihvcHRfbWVzc2FnZSkge1xyXG4gIGlmIChDT01QSUxFRCAmJiAhZ29vZy5ERUJVRykge1xyXG4gICAgb3B0X21lc3NhZ2UgPSBvcHRfbWVzc2FnZSB8fCAnJztcclxuICAgIHRocm93IEVycm9yKCdJbXBvcnRpbmcgdGVzdC1vbmx5IGNvZGUgaW50byBub24tZGVidWcgZW52aXJvbm1lbnQnICtcclxuICAgICAgICAgICAgICAgIG9wdF9tZXNzYWdlID8gJzogJyArIG9wdF9tZXNzYWdlIDogJy4nKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuaWYgKCFDT01QSUxFRCkge1xyXG5cclxuICAvKipcclxuICAgKiBDaGVjayBpZiB0aGUgZ2l2ZW4gbmFtZSBoYXMgYmVlbiBnb29nLnByb3ZpZGVkLiBUaGlzIHdpbGwgcmV0dXJuIGZhbHNlIGZvclxyXG4gICAqIG5hbWVzIHRoYXQgYXJlIGF2YWlsYWJsZSBvbmx5IGFzIGltcGxpY2l0IG5hbWVzcGFjZXMuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgbmFtZSBvZiB0aGUgb2JqZWN0IHRvIGxvb2sgZm9yLlxyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5hbWUgaGFzIGJlZW4gcHJvdmlkZWQuXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBnb29nLmlzUHJvdmlkZWRfID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgcmV0dXJuICFnb29nLmltcGxpY2l0TmFtZXNwYWNlc19bbmFtZV0gJiYgISFnb29nLmdldE9iamVjdEJ5TmFtZShuYW1lKTtcclxuICB9O1xyXG5cclxuICAvKipcclxuICAgKiBOYW1lc3BhY2VzIGltcGxpY2l0bHkgZGVmaW5lZCBieSBnb29nLnByb3ZpZGUuIEZvciBleGFtcGxlLFxyXG4gICAqIGdvb2cucHJvdmlkZSgnZ29vZy5ldmVudHMuRXZlbnQnKSBpbXBsaWNpdGx5IGRlY2xhcmVzXHJcbiAgICogdGhhdCAnZ29vZycgYW5kICdnb29nLmV2ZW50cycgbXVzdCBiZSBuYW1lc3BhY2VzLlxyXG4gICAqXHJcbiAgICogQHR5cGUge09iamVjdH1cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGdvb2cuaW1wbGljaXROYW1lc3BhY2VzXyA9IHt9O1xyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIEJ1aWxkcyBhbiBvYmplY3Qgc3RydWN0dXJlIGZvciB0aGUgcHJvdmlkZWQgbmFtZXNwYWNlIHBhdGgsXHJcbiAqIGVuc3VyaW5nIHRoYXQgbmFtZXMgdGhhdCBhbHJlYWR5IGV4aXN0IGFyZSBub3Qgb3ZlcndyaXR0ZW4uIEZvclxyXG4gKiBleGFtcGxlOlxyXG4gKiBcImEuYi5jXCIgLT4gYSA9IHt9O2EuYj17fTthLmIuYz17fTtcclxuICogVXNlZCBieSBnb29nLnByb3ZpZGUgYW5kIGdvb2cuZXhwb3J0U3ltYm9sLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBuYW1lIG9mIHRoZSBvYmplY3QgdGhhdCB0aGlzIGZpbGUgZGVmaW5lcy5cclxuICogQHBhcmFtIHsqPX0gb3B0X29iamVjdCB0aGUgb2JqZWN0IHRvIGV4cG9zZSBhdCB0aGUgZW5kIG9mIHRoZSBwYXRoLlxyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9vYmplY3RUb0V4cG9ydFRvIFRoZSBvYmplY3QgdG8gYWRkIHRoZSBwYXRoIHRvOyBkZWZhdWx0XHJcbiAqICAgICBpcyB8Z29vZy5nbG9iYWx8LlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZ29vZy5leHBvcnRQYXRoXyA9IGZ1bmN0aW9uKG5hbWUsIG9wdF9vYmplY3QsIG9wdF9vYmplY3RUb0V4cG9ydFRvKSB7XHJcbiAgdmFyIHBhcnRzID0gbmFtZS5zcGxpdCgnLicpO1xyXG4gIHZhciBjdXIgPSBvcHRfb2JqZWN0VG9FeHBvcnRUbyB8fCBnb29nLmdsb2JhbDtcclxuXHJcbiAgLy8gSW50ZXJuZXQgRXhwbG9yZXIgZXhoaWJpdHMgc3RyYW5nZSBiZWhhdmlvciB3aGVuIHRocm93aW5nIGVycm9ycyBmcm9tXHJcbiAgLy8gbWV0aG9kcyBleHRlcm5lZCBpbiB0aGlzIG1hbm5lci4gIFNlZSB0aGUgdGVzdEV4cG9ydFN5bWJvbEV4Y2VwdGlvbnMgaW5cclxuICAvLyBiYXNlX3Rlc3QuaHRtbCBmb3IgYW4gZXhhbXBsZS5cclxuICBpZiAoIShwYXJ0c1swXSBpbiBjdXIpICYmIGN1ci5leGVjU2NyaXB0KSB7XHJcbiAgICBjdXIuZXhlY1NjcmlwdCgndmFyICcgKyBwYXJ0c1swXSk7XHJcbiAgfVxyXG5cclxuICAvLyBDZXJ0YWluIGJyb3dzZXJzIGNhbm5vdCBwYXJzZSBjb2RlIGluIHRoZSBmb3JtIGZvcigoYSBpbiBiKTsgYzspO1xyXG4gIC8vIFRoaXMgcGF0dGVybiBpcyBwcm9kdWNlZCBieSB0aGUgSlNDb21waWxlciB3aGVuIGl0IGNvbGxhcHNlcyB0aGVcclxuICAvLyBzdGF0ZW1lbnQgYWJvdmUgaW50byB0aGUgY29uZGl0aW9uYWwgbG9vcCBiZWxvdy4gVG8gcHJldmVudCB0aGlzIGZyb21cclxuICAvLyBoYXBwZW5pbmcsIHVzZSBhIGZvci1sb29wIGFuZCByZXNlcnZlIHRoZSBpbml0IGxvZ2ljIGFzIGJlbG93LlxyXG5cclxuICAvLyBQYXJlbnRoZXNlcyBhZGRlZCB0byBlbGltaW5hdGUgc3RyaWN0IEpTIHdhcm5pbmcgaW4gRmlyZWZveC5cclxuICBmb3IgKHZhciBwYXJ0OyBwYXJ0cy5sZW5ndGggJiYgKHBhcnQgPSBwYXJ0cy5zaGlmdCgpKTspIHtcclxuICAgIGlmICghcGFydHMubGVuZ3RoICYmIGdvb2cuaXNEZWYob3B0X29iamVjdCkpIHtcclxuICAgICAgLy8gbGFzdCBwYXJ0IGFuZCB3ZSBoYXZlIGFuIG9iamVjdDsgdXNlIGl0XHJcbiAgICAgIGN1cltwYXJ0XSA9IG9wdF9vYmplY3Q7XHJcbiAgICB9IGVsc2UgaWYgKGN1cltwYXJ0XSkge1xyXG4gICAgICBjdXIgPSBjdXJbcGFydF07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjdXIgPSBjdXJbcGFydF0gPSB7fTtcclxuICAgIH1cclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYW4gb2JqZWN0IGJhc2VkIG9uIGl0cyBmdWxseSBxdWFsaWZpZWQgZXh0ZXJuYWwgbmFtZS4gIElmIHlvdSBhcmVcclxuICogdXNpbmcgYSBjb21waWxhdGlvbiBwYXNzIHRoYXQgcmVuYW1lcyBwcm9wZXJ0eSBuYW1lcyBiZXdhcmUgdGhhdCB1c2luZyB0aGlzXHJcbiAqIGZ1bmN0aW9uIHdpbGwgbm90IGZpbmQgcmVuYW1lZCBwcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgZnVsbHkgcXVhbGlmaWVkIG5hbWUuXHJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29iaiBUaGUgb2JqZWN0IHdpdGhpbiB3aGljaCB0byBsb29rOyBkZWZhdWx0IGlzXHJcbiAqICAgICB8Z29vZy5nbG9iYWx8LlxyXG4gKiBAcmV0dXJuIHs/fSBUaGUgdmFsdWUgKG9iamVjdCBvciBwcmltaXRpdmUpIG9yLCBpZiBub3QgZm91bmQsIG51bGwuXHJcbiAqL1xyXG5nb29nLmdldE9iamVjdEJ5TmFtZSA9IGZ1bmN0aW9uKG5hbWUsIG9wdF9vYmopIHtcclxuICB2YXIgcGFydHMgPSBuYW1lLnNwbGl0KCcuJyk7XHJcbiAgdmFyIGN1ciA9IG9wdF9vYmogfHwgZ29vZy5nbG9iYWw7XHJcbiAgZm9yICh2YXIgcGFydDsgcGFydCA9IHBhcnRzLnNoaWZ0KCk7ICkge1xyXG4gICAgaWYgKGdvb2cuaXNEZWZBbmROb3ROdWxsKGN1cltwYXJ0XSkpIHtcclxuICAgICAgY3VyID0gY3VyW3BhcnRdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBjdXI7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEdsb2JhbGl6ZXMgYSB3aG9sZSBuYW1lc3BhY2UsIHN1Y2ggYXMgZ29vZyBvciBnb29nLmxhbmcuXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG5hbWVzcGFjZSB0byBnbG9iYWxpemUuXHJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X2dsb2JhbCBUaGUgb2JqZWN0IHRvIGFkZCB0aGUgcHJvcGVydGllcyB0by5cclxuICogQGRlcHJlY2F0ZWQgUHJvcGVydGllcyBtYXkgYmUgZXhwbGljaXRseSBleHBvcnRlZCB0byB0aGUgZ2xvYmFsIHNjb3BlLCBidXRcclxuICogICAgIHRoaXMgc2hvdWxkIG5vIGxvbmdlciBiZSBkb25lIGluIGJ1bGsuXHJcbiAqL1xyXG5nb29nLmdsb2JhbGl6ZSA9IGZ1bmN0aW9uKG9iaiwgb3B0X2dsb2JhbCkge1xyXG4gIHZhciBnbG9iYWwgPSBvcHRfZ2xvYmFsIHx8IGdvb2cuZ2xvYmFsO1xyXG4gIGZvciAodmFyIHggaW4gb2JqKSB7XHJcbiAgICBnbG9iYWxbeF0gPSBvYmpbeF07XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgZGVwZW5kZW5jeSBmcm9tIGEgZmlsZSB0byB0aGUgZmlsZXMgaXQgcmVxdWlyZXMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxQYXRoIFRoZSBwYXRoIHRvIHRoZSBqcyBmaWxlLlxyXG4gKiBAcGFyYW0ge0FycmF5fSBwcm92aWRlcyBBbiBhcnJheSBvZiBzdHJpbmdzIHdpdGggdGhlIG5hbWVzIG9mIHRoZSBvYmplY3RzXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZmlsZSBwcm92aWRlcy5cclxuICogQHBhcmFtIHtBcnJheX0gcmVxdWlyZXMgQW4gYXJyYXkgb2Ygc3RyaW5ncyB3aXRoIHRoZSBuYW1lcyBvZiB0aGUgb2JqZWN0c1xyXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIGZpbGUgcmVxdWlyZXMuXHJcbiAqL1xyXG5nb29nLmFkZERlcGVuZGVuY3kgPSBmdW5jdGlvbihyZWxQYXRoLCBwcm92aWRlcywgcmVxdWlyZXMpIHtcclxuICBpZiAoIUNPTVBJTEVEKSB7XHJcbiAgICB2YXIgcHJvdmlkZSwgcmVxdWlyZTtcclxuICAgIHZhciBwYXRoID0gcmVsUGF0aC5yZXBsYWNlKC9cXFxcL2csICcvJyk7XHJcbiAgICB2YXIgZGVwcyA9IGdvb2cuZGVwZW5kZW5jaWVzXztcclxuICAgIGZvciAodmFyIGkgPSAwOyBwcm92aWRlID0gcHJvdmlkZXNbaV07IGkrKykge1xyXG4gICAgICBkZXBzLm5hbWVUb1BhdGhbcHJvdmlkZV0gPSBwYXRoO1xyXG4gICAgICBpZiAoIShwYXRoIGluIGRlcHMucGF0aFRvTmFtZXMpKSB7XHJcbiAgICAgICAgZGVwcy5wYXRoVG9OYW1lc1twYXRoXSA9IHt9O1xyXG4gICAgICB9XHJcbiAgICAgIGRlcHMucGF0aFRvTmFtZXNbcGF0aF1bcHJvdmlkZV0gPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgZm9yICh2YXIgaiA9IDA7IHJlcXVpcmUgPSByZXF1aXJlc1tqXTsgaisrKSB7XHJcbiAgICAgIGlmICghKHBhdGggaW4gZGVwcy5yZXF1aXJlcykpIHtcclxuICAgICAgICBkZXBzLnJlcXVpcmVzW3BhdGhdID0ge307XHJcbiAgICAgIH1cclxuICAgICAgZGVwcy5yZXF1aXJlc1twYXRoXVtyZXF1aXJlXSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcblxyXG5cclxuLy8gTk9URShubmF6ZSk6IFRoZSBkZWJ1ZyBET00gbG9hZGVyIHdhcyBpbmNsdWRlZCBpbiBiYXNlLmpzIGFzIGFuIG9yaWduYWxcclxuLy8gd2F5IHRvIGRvIFwiZGVidWctbW9kZVwiIGRldmVsb3BtZW50LiAgVGhlIGRlcGVuZGVuY3kgc3lzdGVtIGNhbiBzb21ldGltZXNcclxuLy8gYmUgY29uZnVzaW5nLCBhcyBjYW4gdGhlIGRlYnVnIERPTSBsb2FkZXIncyBhc3luY3Jvbm91cyBuYXR1cmUuXHJcbi8vXHJcbi8vIFdpdGggdGhlIERPTSBsb2FkZXIsIGEgY2FsbCB0byBnb29nLnJlcXVpcmUoKSBpcyBub3QgYmxvY2tpbmcgLS0gdGhlXHJcbi8vIHNjcmlwdCB3aWxsIG5vdCBsb2FkIHVudGlsIHNvbWUgcG9pbnQgYWZ0ZXIgdGhlIGN1cnJlbnQgc2NyaXB0LiAgSWYgYVxyXG4vLyBuYW1lc3BhY2UgaXMgbmVlZGVkIGF0IHJ1bnRpbWUsIGl0IG5lZWRzIHRvIGJlIGRlZmluZWQgaW4gYSBwcmV2aW91c1xyXG4vLyBzY3JpcHQsIG9yIGxvYWRlZCB2aWEgcmVxdWlyZSgpIHdpdGggaXRzIHJlZ2lzdGVyZWQgZGVwZW5kZW5jaWVzLlxyXG4vLyBVc2VyLWRlZmluZWQgbmFtZXNwYWNlcyBtYXkgbmVlZCB0aGVpciBvd24gZGVwcyBmaWxlLiAgU2VlIGh0dHA6Ly9nby9qc19kZXBzLFxyXG4vLyBodHRwOi8vZ28vZ2VuanNkZXBzLCBvciwgZXh0ZXJuYWxseSwgRGVwc1dyaXRlci5cclxuLy8gaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9jbG9zdXJlL2xpYnJhcnkvZG9jcy9kZXBzd3JpdGVyLmh0bWxcclxuLy9cclxuLy8gQmVjYXVzZSBvZiBsZWdhY3kgY2xpZW50cywgdGhlIERPTSBsb2FkZXIgY2FuJ3QgYmUgZWFzaWx5IHJlbW92ZWQgZnJvbVxyXG4vLyBiYXNlLmpzLiAgV29yayBpcyBiZWluZyBkb25lIHRvIG1ha2UgaXQgZGlzYWJsZWFibGUgb3IgcmVwbGFjZWFibGUgZm9yXHJcbi8vIGRpZmZlcmVudCBlbnZpcm9ubWVudHMgKERPTS1sZXNzIEphdmFTY3JpcHQgaW50ZXJwcmV0ZXJzIGxpa2UgUmhpbm8gb3IgVjgsXHJcbi8vIGZvciBleGFtcGxlKS4gU2VlIGJvb3RzdHJhcC8gZm9yIG1vcmUgaW5mb3JtYXRpb24uXHJcblxyXG5cclxuLyoqXHJcbiAqIEBkZWZpbmUge2Jvb2xlYW59IFdoZXRoZXIgdG8gZW5hYmxlIHRoZSBkZWJ1ZyBsb2FkZXIuXHJcbiAqXHJcbiAqIElmIGVuYWJsZWQsIGEgY2FsbCB0byBnb29nLnJlcXVpcmUoKSB3aWxsIGF0dGVtcHQgdG8gbG9hZCB0aGUgbmFtZXNwYWNlIGJ5XHJcbiAqIGFwcGVuZGluZyBhIHNjcmlwdCB0YWcgdG8gdGhlIERPTSAoaWYgdGhlIG5hbWVzcGFjZSBoYXMgYmVlbiByZWdpc3RlcmVkKS5cclxuICpcclxuICogSWYgZGlzYWJsZWQsIGdvb2cucmVxdWlyZSgpIHdpbGwgc2ltcGx5IGFzc2VydCB0aGF0IHRoZSBuYW1lc3BhY2UgaGFzIGJlZW5cclxuICogcHJvdmlkZWQgKGFuZCBkZXBlbmQgb24gdGhlIGZhY3QgdGhhdCBzb21lIG91dHNpZGUgdG9vbCBjb3JyZWN0bHkgb3JkZXJlZFxyXG4gKiB0aGUgc2NyaXB0KS5cclxuICovXHJcbmdvb2cuRU5BQkxFX0RFQlVHX0xPQURFUiA9IHRydWU7XHJcblxyXG5cclxuLyoqXHJcbiAqIEltcGxlbWVudHMgYSBzeXN0ZW0gZm9yIHRoZSBkeW5hbWljIHJlc29sdXRpb24gb2YgZGVwZW5kZW5jaWVzXHJcbiAqIHRoYXQgd29ya3MgaW4gcGFyYWxsZWwgd2l0aCB0aGUgQlVJTEQgc3lzdGVtLiBOb3RlIHRoYXQgYWxsIGNhbGxzXHJcbiAqIHRvIGdvb2cucmVxdWlyZSB3aWxsIGJlIHN0cmlwcGVkIGJ5IHRoZSBKU0NvbXBpbGVyIHdoZW4gdGhlXHJcbiAqIC0tY2xvc3VyZV9wYXNzIG9wdGlvbiBpcyB1c2VkLlxyXG4gKiBAc2VlIGdvb2cucHJvdmlkZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lc3BhY2UgdG8gaW5jbHVkZSAoYXMgd2FzIGdpdmVuIGluIGdvb2cucHJvdmlkZSgpKVxyXG4gKiAgICAgaW4gdGhlIGZvcm0gXCJnb29nLnBhY2thZ2UucGFydFwiLlxyXG4gKi9cclxuZ29vZy5yZXF1aXJlID0gZnVuY3Rpb24obmFtZSkge1xyXG5cclxuICAvLyBpZiB0aGUgb2JqZWN0IGFscmVhZHkgZXhpc3RzIHdlIGRvIG5vdCBuZWVkIGRvIGRvIGFueXRoaW5nXHJcbiAgLy8gVE9ETyhhcnYpOiBJZiB3ZSBzdGFydCB0byBzdXBwb3J0IHJlcXVpcmUgYmFzZWQgb24gZmlsZSBuYW1lIHRoaXMgaGFzXHJcbiAgLy8gICAgICAgICAgICB0byBjaGFuZ2VcclxuICAvLyBUT0RPKGFydik6IElmIHdlIGFsbG93IGdvb2cuZm9vLiogdGhpcyBoYXMgdG8gY2hhbmdlXHJcbiAgLy8gVE9ETyhhcnYpOiBJZiB3ZSBpbXBsZW1lbnQgZHluYW1pYyBsb2FkIGFmdGVyIHBhZ2UgbG9hZCB3ZSBzaG91bGQgcHJvYmFibHlcclxuICAvLyAgICAgICAgICAgIG5vdCByZW1vdmUgdGhpcyBjb2RlIGZvciB0aGUgY29tcGlsZWQgb3V0cHV0XHJcbiAgaWYgKCFDT01QSUxFRCkge1xyXG4gICAgaWYgKGdvb2cuaXNQcm92aWRlZF8obmFtZSkpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChnb29nLkVOQUJMRV9ERUJVR19MT0FERVIpIHtcclxuICAgICAgdmFyIHBhdGggPSBnb29nLmdldFBhdGhGcm9tRGVwc18obmFtZSk7XHJcbiAgICAgIGlmIChwYXRoKSB7XHJcbiAgICAgICAgZ29vZy5pbmNsdWRlZF9bcGF0aF0gPSB0cnVlO1xyXG4gICAgICAgIGdvb2cud3JpdGVTY3JpcHRzXygpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHZhciBlcnJvck1lc3NhZ2UgPSAnZ29vZy5yZXF1aXJlIGNvdWxkIG5vdCBmaW5kOiAnICsgbmFtZTtcclxuICAgIGlmIChnb29nLmdsb2JhbC5jb25zb2xlKSB7XHJcbiAgICAgIGdvb2cuZ2xvYmFsLmNvbnNvbGVbJ2Vycm9yJ10oZXJyb3JNZXNzYWdlKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgICB0aHJvdyBFcnJvcihlcnJvck1lc3NhZ2UpO1xyXG5cclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFBhdGggZm9yIGluY2x1ZGVkIHNjcmlwdHNcclxuICogQHR5cGUge3N0cmluZ31cclxuICovXHJcbmdvb2cuYmFzZVBhdGggPSAnJztcclxuXHJcblxyXG4vKipcclxuICogQSBob29rIGZvciBvdmVycmlkaW5nIHRoZSBiYXNlIHBhdGguXHJcbiAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxyXG4gKi9cclxuZ29vZy5nbG9iYWwuQ0xPU1VSRV9CQVNFX1BBVEg7XHJcblxyXG5cclxuLyoqXHJcbiAqIFdoZXRoZXIgdG8gd3JpdGUgb3V0IENsb3N1cmUncyBkZXBzIGZpbGUuIEJ5IGRlZmF1bHQsXHJcbiAqIHRoZSBkZXBzIGFyZSB3cml0dGVuLlxyXG4gKiBAdHlwZSB7Ym9vbGVhbnx1bmRlZmluZWR9XHJcbiAqL1xyXG5nb29nLmdsb2JhbC5DTE9TVVJFX05PX0RFUFM7XHJcblxyXG5cclxuLyoqXHJcbiAqIEEgZnVuY3Rpb24gdG8gaW1wb3J0IGEgc2luZ2xlIHNjcmlwdC4gVGhpcyBpcyBtZWFudCB0byBiZSBvdmVycmlkZGVuIHdoZW5cclxuICogQ2xvc3VyZSBpcyBiZWluZyBydW4gaW4gbm9uLUhUTUwgY29udGV4dHMsIHN1Y2ggYXMgd2ViIHdvcmtlcnMuIEl0J3MgZGVmaW5lZFxyXG4gKiBpbiB0aGUgZ2xvYmFsIHNjb3BlIHNvIHRoYXQgaXQgY2FuIGJlIHNldCBiZWZvcmUgYmFzZS5qcyBpcyBsb2FkZWQsIHdoaWNoXHJcbiAqIGFsbG93cyBkZXBzLmpzIHRvIGJlIGltcG9ydGVkIHByb3Blcmx5LlxyXG4gKlxyXG4gKiBUaGUgZnVuY3Rpb24gaXMgcGFzc2VkIHRoZSBzY3JpcHQgc291cmNlLCB3aGljaCBpcyBhIHJlbGF0aXZlIFVSSS4gSXQgc2hvdWxkXHJcbiAqIHJldHVybiB0cnVlIGlmIHRoZSBzY3JpcHQgd2FzIGltcG9ydGVkLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAqL1xyXG5nb29nLmdsb2JhbC5DTE9TVVJFX0lNUE9SVF9TQ1JJUFQ7XHJcblxyXG5cclxuLyoqXHJcbiAqIE51bGwgZnVuY3Rpb24gdXNlZCBmb3IgZGVmYXVsdCB2YWx1ZXMgb2YgY2FsbGJhY2tzLCBldGMuXHJcbiAqIEByZXR1cm4ge3ZvaWR9IE5vdGhpbmcuXHJcbiAqL1xyXG5nb29nLm51bGxGdW5jdGlvbiA9IGZ1bmN0aW9uKCkge307XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoZSBpZGVudGl0eSBmdW5jdGlvbi4gUmV0dXJucyBpdHMgZmlyc3QgYXJndW1lbnQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7Kj19IG9wdF9yZXR1cm5WYWx1ZSBUaGUgc2luZ2xlIHZhbHVlIHRoYXQgd2lsbCBiZSByZXR1cm5lZC5cclxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBPcHRpb25hbCB0cmFpbGluZyBhcmd1bWVudHMuIFRoZXNlIGFyZSBpZ25vcmVkLlxyXG4gKiBAcmV0dXJuIHs/fSBUaGUgZmlyc3QgYXJndW1lbnQuIFdlIGNhbid0IGtub3cgdGhlIHR5cGUgLS0ganVzdCBwYXNzIGl0IGFsb25nXHJcbiAqICAgICAgd2l0aG91dCB0eXBlLlxyXG4gKiBAZGVwcmVjYXRlZCBVc2UgZ29vZy5mdW5jdGlvbnMuaWRlbnRpdHkgaW5zdGVhZC5cclxuICovXHJcbmdvb2cuaWRlbnRpdHlGdW5jdGlvbiA9IGZ1bmN0aW9uKG9wdF9yZXR1cm5WYWx1ZSwgdmFyX2FyZ3MpIHtcclxuICByZXR1cm4gb3B0X3JldHVyblZhbHVlO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBXaGVuIGRlZmluaW5nIGEgY2xhc3MgRm9vIHdpdGggYW4gYWJzdHJhY3QgbWV0aG9kIGJhcigpLCB5b3UgY2FuIGRvOlxyXG4gKlxyXG4gKiBGb28ucHJvdG90eXBlLmJhciA9IGdvb2cuYWJzdHJhY3RNZXRob2RcclxuICpcclxuICogTm93IGlmIGEgc3ViY2xhc3Mgb2YgRm9vIGZhaWxzIHRvIG92ZXJyaWRlIGJhcigpLCBhbiBlcnJvclxyXG4gKiB3aWxsIGJlIHRocm93biB3aGVuIGJhcigpIGlzIGludm9rZWQuXHJcbiAqXHJcbiAqIE5vdGU6IFRoaXMgZG9lcyBub3QgdGFrZSB0aGUgbmFtZSBvZiB0aGUgZnVuY3Rpb24gdG8gb3ZlcnJpZGUgYXNcclxuICogYW4gYXJndW1lbnQgYmVjYXVzZSB0aGF0IHdvdWxkIG1ha2UgaXQgbW9yZSBkaWZmaWN1bHQgdG8gb2JmdXNjYXRlXHJcbiAqIG91ciBKYXZhU2NyaXB0IGNvZGUuXHJcbiAqXHJcbiAqIEB0eXBlIHshRnVuY3Rpb259XHJcbiAqIEB0aHJvd3Mge0Vycm9yfSB3aGVuIGludm9rZWQgdG8gaW5kaWNhdGUgdGhlIG1ldGhvZCBzaG91bGQgYmVcclxuICogICBvdmVycmlkZGVuLlxyXG4gKi9cclxuZ29vZy5hYnN0cmFjdE1ldGhvZCA9IGZ1bmN0aW9uKCkge1xyXG4gIHRocm93IEVycm9yKCd1bmltcGxlbWVudGVkIGFic3RyYWN0IG1ldGhvZCcpO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEge0Bjb2RlIGdldEluc3RhbmNlfSBzdGF0aWMgbWV0aG9kIHRoYXQgYWx3YXlzIHJldHVybiB0aGUgc2FtZSBpbnN0YW5jZVxyXG4gKiBvYmplY3QuXHJcbiAqIEBwYXJhbSB7IUZ1bmN0aW9ufSBjdG9yIFRoZSBjb25zdHJ1Y3RvciBmb3IgdGhlIGNsYXNzIHRvIGFkZCB0aGUgc3RhdGljXHJcbiAqICAgICBtZXRob2QgdG8uXHJcbiAqL1xyXG5nb29nLmFkZFNpbmdsZXRvbkdldHRlciA9IGZ1bmN0aW9uKGN0b3IpIHtcclxuICBjdG9yLmdldEluc3RhbmNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICBpZiAoY3Rvci5pbnN0YW5jZV8pIHtcclxuICAgICAgcmV0dXJuIGN0b3IuaW5zdGFuY2VfO1xyXG4gICAgfVxyXG4gICAgaWYgKGdvb2cuREVCVUcpIHtcclxuICAgICAgLy8gTk9URTogSlNDb21waWxlciBjYW4ndCBvcHRpbWl6ZSBhd2F5IEFycmF5I3B1c2guXHJcbiAgICAgIGdvb2cuaW5zdGFudGlhdGVkU2luZ2xldG9uc19bZ29vZy5pbnN0YW50aWF0ZWRTaW5nbGV0b25zXy5sZW5ndGhdID0gY3RvcjtcclxuICAgIH1cclxuICAgIHJldHVybiBjdG9yLmluc3RhbmNlXyA9IG5ldyBjdG9yO1xyXG4gIH07XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEFsbCBzaW5nbGV0b24gY2xhc3NlcyB0aGF0IGhhdmUgYmVlbiBpbnN0YW50aWF0ZWQsIGZvciB0ZXN0aW5nLiBEb24ndCByZWFkXHJcbiAqIGl0IGRpcmVjdGx5LCB1c2UgdGhlIHtAY29kZSBnb29nLnRlc3Rpbmcuc2luZ2xldG9ufSBtb2R1bGUuIFRoZSBjb21waWxlclxyXG4gKiByZW1vdmVzIHRoaXMgdmFyaWFibGUgaWYgdW51c2VkLlxyXG4gKiBAdHlwZSB7IUFycmF5LjwhRnVuY3Rpb24+fVxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuZ29vZy5pbnN0YW50aWF0ZWRTaW5nbGV0b25zXyA9IFtdO1xyXG5cclxuXHJcbmlmICghQ09NUElMRUQgJiYgZ29vZy5FTkFCTEVfREVCVUdfTE9BREVSKSB7XHJcbiAgLyoqXHJcbiAgICogT2JqZWN0IHVzZWQgdG8ga2VlcCB0cmFjayBvZiB1cmxzIHRoYXQgaGF2ZSBhbHJlYWR5IGJlZW4gYWRkZWQuIFRoaXNcclxuICAgKiByZWNvcmQgYWxsb3dzIHRoZSBwcmV2ZW50aW9uIG9mIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cclxuICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgZ29vZy5pbmNsdWRlZF8gPSB7fTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoaXMgb2JqZWN0IGlzIHVzZWQgdG8ga2VlcCB0cmFjayBvZiBkZXBlbmRlbmNpZXMgYW5kIG90aGVyIGRhdGEgdGhhdCBpc1xyXG4gICAqIHVzZWQgZm9yIGxvYWRpbmcgc2NyaXB0c1xyXG4gICAqIEBwcml2YXRlXHJcbiAgICogQHR5cGUge09iamVjdH1cclxuICAgKi9cclxuICBnb29nLmRlcGVuZGVuY2llc18gPSB7XHJcbiAgICBwYXRoVG9OYW1lczoge30sIC8vIDEgdG8gbWFueVxyXG4gICAgbmFtZVRvUGF0aDoge30sIC8vIDEgdG8gMVxyXG4gICAgcmVxdWlyZXM6IHt9LCAvLyAxIHRvIG1hbnlcclxuICAgIC8vIHVzZWQgd2hlbiByZXNvbHZpbmcgZGVwZW5kZW5jaWVzIHRvIHByZXZlbnQgdXMgZnJvbVxyXG4gICAgLy8gdmlzaXRpbmcgdGhlIGZpbGUgdHdpY2VcclxuICAgIHZpc2l0ZWQ6IHt9LFxyXG4gICAgd3JpdHRlbjoge30gLy8gdXNlZCB0byBrZWVwIHRyYWNrIG9mIHNjcmlwdCBmaWxlcyB3ZSBoYXZlIHdyaXR0ZW5cclxuICB9O1xyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogVHJpZXMgdG8gZGV0ZWN0IHdoZXRoZXIgaXMgaW4gdGhlIGNvbnRleHQgb2YgYW4gSFRNTCBkb2N1bWVudC5cclxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIGl0IGxvb2tzIGxpa2UgSFRNTCBkb2N1bWVudC5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGdvb2cuaW5IdG1sRG9jdW1lbnRfID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgZG9jID0gZ29vZy5nbG9iYWwuZG9jdW1lbnQ7XHJcbiAgICByZXR1cm4gdHlwZW9mIGRvYyAhPSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgICAgICd3cml0ZScgaW4gZG9jOyAgLy8gWFVMRG9jdW1lbnQgbWlzc2VzIHdyaXRlLlxyXG4gIH07XHJcblxyXG5cclxuICAvKipcclxuICAgKiBUcmllcyB0byBkZXRlY3QgdGhlIGJhc2UgcGF0aCBvZiB0aGUgYmFzZS5qcyBzY3JpcHQgdGhhdCBib290c3RyYXBzIENsb3N1cmVcclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGdvb2cuZmluZEJhc2VQYXRoXyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgaWYgKGdvb2cuZ2xvYmFsLkNMT1NVUkVfQkFTRV9QQVRIKSB7XHJcbiAgICAgIGdvb2cuYmFzZVBhdGggPSBnb29nLmdsb2JhbC5DTE9TVVJFX0JBU0VfUEFUSDtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfSBlbHNlIGlmICghZ29vZy5pbkh0bWxEb2N1bWVudF8oKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgZG9jID0gZ29vZy5nbG9iYWwuZG9jdW1lbnQ7XHJcbiAgICB2YXIgc2NyaXB0cyA9IGRvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XHJcbiAgICAvLyBTZWFyY2ggYmFja3dhcmRzIHNpbmNlIHRoZSBjdXJyZW50IHNjcmlwdCBpcyBpbiBhbG1vc3QgYWxsIGNhc2VzIHRoZSBvbmVcclxuICAgIC8vIHRoYXQgaGFzIGJhc2UuanMuXHJcbiAgICBmb3IgKHZhciBpID0gc2NyaXB0cy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICB2YXIgc3JjID0gc2NyaXB0c1tpXS5zcmM7XHJcbiAgICAgIHZhciBxbWFyayA9IHNyYy5sYXN0SW5kZXhPZignPycpO1xyXG4gICAgICB2YXIgbCA9IHFtYXJrID09IC0xID8gc3JjLmxlbmd0aCA6IHFtYXJrO1xyXG4gICAgICBpZiAoc3JjLnN1YnN0cihsIC0gNywgNykgPT0gJ2Jhc2UuanMnKSB7XHJcbiAgICAgICAgZ29vZy5iYXNlUGF0aCA9IHNyYy5zdWJzdHIoMCwgbCAtIDcpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG5cclxuICAvKipcclxuICAgKiBJbXBvcnRzIGEgc2NyaXB0IGlmLCBhbmQgb25seSBpZiwgdGhhdCBzY3JpcHQgaGFzbid0IGFscmVhZHkgYmVlbiBpbXBvcnRlZC5cclxuICAgKiAoTXVzdCBiZSBjYWxsZWQgYXQgZXhlY3V0aW9uIHRpbWUpXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNyYyBTY3JpcHQgc291cmNlLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgZ29vZy5pbXBvcnRTY3JpcHRfID0gZnVuY3Rpb24oc3JjKSB7XHJcbiAgICB2YXIgaW1wb3J0U2NyaXB0ID0gZ29vZy5nbG9iYWwuQ0xPU1VSRV9JTVBPUlRfU0NSSVBUIHx8XHJcbiAgICAgICAgZ29vZy53cml0ZVNjcmlwdFRhZ187XHJcbiAgICBpZiAoIWdvb2cuZGVwZW5kZW5jaWVzXy53cml0dGVuW3NyY10gJiYgaW1wb3J0U2NyaXB0KHNyYykpIHtcclxuICAgICAgZ29vZy5kZXBlbmRlbmNpZXNfLndyaXR0ZW5bc3JjXSA9IHRydWU7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoZSBpbXBvcnQgZnVuY3Rpb24uIFdyaXRlcyBhIHNjcmlwdCB0YWcgdG9cclxuICAgKiBpbXBvcnQgdGhlIHNjcmlwdC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgVGhlIHNjcmlwdCBzb3VyY2UuXHJcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc2NyaXB0IHdhcyBpbXBvcnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICovXHJcbiAgZ29vZy53cml0ZVNjcmlwdFRhZ18gPSBmdW5jdGlvbihzcmMpIHtcclxuICAgIGlmIChnb29nLmluSHRtbERvY3VtZW50XygpKSB7XHJcbiAgICAgIHZhciBkb2MgPSBnb29nLmdsb2JhbC5kb2N1bWVudDtcclxuICAgICAgZG9jLndyaXRlKFxyXG4gICAgICAgICAgJzxzY3JpcHQgdHlwZT1cInRleHQvamF2YXNjcmlwdFwiIHNyYz1cIicgKyBzcmMgKyAnXCI+PC8nICsgJ3NjcmlwdD4nKTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc29sdmVzIGRlcGVuZGVuY2llcyBiYXNlZCBvbiB0aGUgZGVwZW5kZW5jaWVzIGFkZGVkIHVzaW5nIGFkZERlcGVuZGVuY3lcclxuICAgKiBhbmQgY2FsbHMgaW1wb3J0U2NyaXB0XyBpbiB0aGUgY29ycmVjdCBvcmRlci5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIGdvb2cud3JpdGVTY3JpcHRzXyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gdGhlIHNjcmlwdHMgd2UgbmVlZCB0byB3cml0ZSB0aGlzIHRpbWVcclxuICAgIHZhciBzY3JpcHRzID0gW107XHJcbiAgICB2YXIgc2VlblNjcmlwdCA9IHt9O1xyXG4gICAgdmFyIGRlcHMgPSBnb29nLmRlcGVuZGVuY2llc187XHJcblxyXG4gICAgZnVuY3Rpb24gdmlzaXROb2RlKHBhdGgpIHtcclxuICAgICAgaWYgKHBhdGggaW4gZGVwcy53cml0dGVuKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyB3ZSBoYXZlIGFscmVhZHkgdmlzaXRlZCB0aGlzIG9uZS4gV2UgY2FuIGdldCBoZXJlIGlmIHdlIGhhdmUgY3ljbGljXHJcbiAgICAgIC8vIGRlcGVuZGVuY2llc1xyXG4gICAgICBpZiAocGF0aCBpbiBkZXBzLnZpc2l0ZWQpIHtcclxuICAgICAgICBpZiAoIShwYXRoIGluIHNlZW5TY3JpcHQpKSB7XHJcbiAgICAgICAgICBzZWVuU2NyaXB0W3BhdGhdID0gdHJ1ZTtcclxuICAgICAgICAgIHNjcmlwdHMucHVzaChwYXRoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBkZXBzLnZpc2l0ZWRbcGF0aF0gPSB0cnVlO1xyXG5cclxuICAgICAgaWYgKHBhdGggaW4gZGVwcy5yZXF1aXJlcykge1xyXG4gICAgICAgIGZvciAodmFyIHJlcXVpcmVOYW1lIGluIGRlcHMucmVxdWlyZXNbcGF0aF0pIHtcclxuICAgICAgICAgIC8vIElmIHRoZSByZXF1aXJlZCBuYW1lIGlzIGRlZmluZWQsIHdlIGFzc3VtZSB0aGF0IGl0IHdhcyBhbHJlYWR5XHJcbiAgICAgICAgICAvLyBib290c3RyYXBwZWQgYnkgb3RoZXIgbWVhbnMuXHJcbiAgICAgICAgICBpZiAoIWdvb2cuaXNQcm92aWRlZF8ocmVxdWlyZU5hbWUpKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXF1aXJlTmFtZSBpbiBkZXBzLm5hbWVUb1BhdGgpIHtcclxuICAgICAgICAgICAgICB2aXNpdE5vZGUoZGVwcy5uYW1lVG9QYXRoW3JlcXVpcmVOYW1lXSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhyb3cgRXJyb3IoJ1VuZGVmaW5lZCBuYW1lVG9QYXRoIGZvciAnICsgcmVxdWlyZU5hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIShwYXRoIGluIHNlZW5TY3JpcHQpKSB7XHJcbiAgICAgICAgc2VlblNjcmlwdFtwYXRoXSA9IHRydWU7XHJcbiAgICAgICAgc2NyaXB0cy5wdXNoKHBhdGgpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yICh2YXIgcGF0aCBpbiBnb29nLmluY2x1ZGVkXykge1xyXG4gICAgICBpZiAoIWRlcHMud3JpdHRlbltwYXRoXSkge1xyXG4gICAgICAgIHZpc2l0Tm9kZShwYXRoKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoc2NyaXB0c1tpXSkge1xyXG4gICAgICAgIGdvb2cuaW1wb3J0U2NyaXB0Xyhnb29nLmJhc2VQYXRoICsgc2NyaXB0c1tpXSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1VuZGVmaW5lZCBzY3JpcHQgaW5wdXQnKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG5cclxuICAvKipcclxuICAgKiBMb29rcyBhdCB0aGUgZGVwZW5kZW5jeSBydWxlcyBhbmQgdHJpZXMgdG8gZGV0ZXJtaW5lIHRoZSBzY3JpcHQgZmlsZSB0aGF0XHJcbiAgICogZnVsZmlsbHMgYSBwYXJ0aWN1bGFyIHJ1bGUuXHJcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJ1bGUgSW4gdGhlIGZvcm0gZ29vZy5uYW1lc3BhY2UuQ2xhc3Mgb3IgcHJvamVjdC5zY3JpcHQuXHJcbiAgICogQHJldHVybiB7P3N0cmluZ30gVXJsIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHJ1bGUsIG9yIG51bGwuXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBnb29nLmdldFBhdGhGcm9tRGVwc18gPSBmdW5jdGlvbihydWxlKSB7XHJcbiAgICBpZiAocnVsZSBpbiBnb29nLmRlcGVuZGVuY2llc18ubmFtZVRvUGF0aCkge1xyXG4gICAgICByZXR1cm4gZ29vZy5kZXBlbmRlbmNpZXNfLm5hbWVUb1BhdGhbcnVsZV07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBnb29nLmZpbmRCYXNlUGF0aF8oKTtcclxuXHJcbiAgLy8gQWxsb3cgcHJvamVjdHMgdG8gbWFuYWdlIHRoZSBkZXBzIGZpbGVzIHRoZW1zZWx2ZXMuXHJcbiAgaWYgKCFnb29nLmdsb2JhbC5DTE9TVVJFX05PX0RFUFMpIHtcclxuICAgIGdvb2cuaW1wb3J0U2NyaXB0Xyhnb29nLmJhc2VQYXRoICsgJ2RlcHMuanMnKTtcclxuICB9XHJcbn1cclxuXHJcblxyXG5cclxuLy89PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuLy8gTGFuZ3VhZ2UgRW5oYW5jZW1lbnRzXHJcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG5cclxuLyoqXHJcbiAqIFRoaXMgaXMgYSBcImZpeGVkXCIgdmVyc2lvbiBvZiB0aGUgdHlwZW9mIG9wZXJhdG9yLiAgSXQgZGlmZmVycyBmcm9tIHRoZSB0eXBlb2ZcclxuICogb3BlcmF0b3IgaW4gc3VjaCBhIHdheSB0aGF0IG51bGwgcmV0dXJucyAnbnVsbCcgYW5kIGFycmF5cyByZXR1cm4gJ2FycmF5Jy5cclxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZ2V0IHRoZSB0eXBlIG9mLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFRoZSBuYW1lIG9mIHRoZSB0eXBlLlxyXG4gKi9cclxuZ29vZy50eXBlT2YgPSBmdW5jdGlvbih2YWx1ZSkge1xyXG4gIHZhciBzID0gdHlwZW9mIHZhbHVlO1xyXG4gIGlmIChzID09ICdvYmplY3QnKSB7XHJcbiAgICBpZiAodmFsdWUpIHtcclxuICAgICAgLy8gQ2hlY2sgdGhlc2UgZmlyc3QsIHNvIHdlIGNhbiBhdm9pZCBjYWxsaW5nIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgaWZcclxuICAgICAgLy8gcG9zc2libGUuXHJcbiAgICAgIC8vXHJcbiAgICAgIC8vIElFIGltcHJvcGVybHkgbWFyc2hhbHMgdHllcG9mIGFjcm9zcyBleGVjdXRpb24gY29udGV4dHMsIGJ1dCBhXHJcbiAgICAgIC8vIGNyb3NzLWNvbnRleHQgb2JqZWN0IHdpbGwgc3RpbGwgcmV0dXJuIGZhbHNlIGZvciBcImluc3RhbmNlb2YgT2JqZWN0XCIuXHJcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgcmV0dXJuICdhcnJheSc7XHJcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgICByZXR1cm4gcztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gSEFDSzogSW4gb3JkZXIgdG8gdXNlIGFuIE9iamVjdCBwcm90b3R5cGUgbWV0aG9kIG9uIHRoZSBhcmJpdHJhcnlcclxuICAgICAgLy8gICB2YWx1ZSwgdGhlIGNvbXBpbGVyIHJlcXVpcmVzIHRoZSB2YWx1ZSBiZSBjYXN0IHRvIHR5cGUgT2JqZWN0LFxyXG4gICAgICAvLyAgIGV2ZW4gdGhvdWdoIHRoZSBFQ01BIHNwZWMgZXhwbGljaXRseSBhbGxvd3MgaXQuXHJcbiAgICAgIHZhciBjbGFzc05hbWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoXHJcbiAgICAgICAgICAvKiogQHR5cGUge09iamVjdH0gKi8gKHZhbHVlKSk7XHJcbiAgICAgIC8vIEluIEZpcmVmb3ggMy42LCBhdHRlbXB0aW5nIHRvIGFjY2VzcyBpZnJhbWUgd2luZG93IG9iamVjdHMnIGxlbmd0aFxyXG4gICAgICAvLyBwcm9wZXJ0eSB0aHJvd3MgYW4gTlNfRVJST1JfRkFJTFVSRSwgc28gd2UgbmVlZCB0byBzcGVjaWFsLWNhc2UgaXRcclxuICAgICAgLy8gaGVyZS5cclxuICAgICAgaWYgKGNsYXNzTmFtZSA9PSAnW29iamVjdCBXaW5kb3ddJykge1xyXG4gICAgICAgIHJldHVybiAnb2JqZWN0JztcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gV2UgY2Fubm90IGFsd2F5cyB1c2UgY29uc3RydWN0b3IgPT0gQXJyYXkgb3IgaW5zdGFuY2VvZiBBcnJheSBiZWNhdXNlXHJcbiAgICAgIC8vIGRpZmZlcmVudCBmcmFtZXMgaGF2ZSBkaWZmZXJlbnQgQXJyYXkgb2JqZWN0cy4gSW4gSUU2LCBpZiB0aGUgaWZyYW1lXHJcbiAgICAgIC8vIHdoZXJlIHRoZSBhcnJheSB3YXMgY3JlYXRlZCBpcyBkZXN0cm95ZWQsIHRoZSBhcnJheSBsb3NlcyBpdHNcclxuICAgICAgLy8gcHJvdG90eXBlLiBUaGVuIGRlcmVmZXJlbmNpbmcgdmFsLnNwbGljZSBoZXJlIHRocm93cyBhbiBleGNlcHRpb24sIHNvXHJcbiAgICAgIC8vIHdlIGNhbid0IHVzZSBnb29nLmlzRnVuY3Rpb24uIENhbGxpbmcgdHlwZW9mIGRpcmVjdGx5IHJldHVybnMgJ3Vua25vd24nXHJcbiAgICAgIC8vIHNvIHRoYXQgd2lsbCB3b3JrLiBJbiB0aGlzIGNhc2UsIHRoaXMgZnVuY3Rpb24gd2lsbCByZXR1cm4gZmFsc2UgYW5kXHJcbiAgICAgIC8vIG1vc3QgYXJyYXkgZnVuY3Rpb25zIHdpbGwgc3RpbGwgd29yayBiZWNhdXNlIHRoZSBhcnJheSBpcyBzdGlsbFxyXG4gICAgICAvLyBhcnJheS1saWtlIChzdXBwb3J0cyBsZW5ndGggYW5kIFtdKSBldmVuIHRob3VnaCBpdCBoYXMgbG9zdCBpdHNcclxuICAgICAgLy8gcHJvdG90eXBlLlxyXG4gICAgICAvLyBNYXJrIE1pbGxlciBub3RpY2VkIHRoYXQgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xyXG4gICAgICAvLyBhbGxvd3MgYWNjZXNzIHRvIHRoZSB1bmZvcmdlYWJsZSBbW0NsYXNzXV0gcHJvcGVydHkuXHJcbiAgICAgIC8vICAxNS4yLjQuMiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nICggKVxyXG4gICAgICAvLyAgV2hlbiB0aGUgdG9TdHJpbmcgbWV0aG9kIGlzIGNhbGxlZCwgdGhlIGZvbGxvd2luZyBzdGVwcyBhcmUgdGFrZW46XHJcbiAgICAgIC8vICAgICAgMS4gR2V0IHRoZSBbW0NsYXNzXV0gcHJvcGVydHkgb2YgdGhpcyBvYmplY3QuXHJcbiAgICAgIC8vICAgICAgMi4gQ29tcHV0ZSBhIHN0cmluZyB2YWx1ZSBieSBjb25jYXRlbmF0aW5nIHRoZSB0aHJlZSBzdHJpbmdzXHJcbiAgICAgIC8vICAgICAgICAgXCJbb2JqZWN0IFwiLCBSZXN1bHQoMSksIGFuZCBcIl1cIi5cclxuICAgICAgLy8gICAgICAzLiBSZXR1cm4gUmVzdWx0KDIpLlxyXG4gICAgICAvLyBhbmQgdGhpcyBiZWhhdmlvciBzdXJ2aXZlcyB0aGUgZGVzdHJ1Y3Rpb24gb2YgdGhlIGV4ZWN1dGlvbiBjb250ZXh0LlxyXG4gICAgICBpZiAoKGNsYXNzTmFtZSA9PSAnW29iamVjdCBBcnJheV0nIHx8XHJcbiAgICAgICAgICAgLy8gSW4gSUUgYWxsIG5vbiB2YWx1ZSB0eXBlcyBhcmUgd3JhcHBlZCBhcyBvYmplY3RzIGFjcm9zcyB3aW5kb3dcclxuICAgICAgICAgICAvLyBib3VuZGFyaWVzIChub3QgaWZyYW1lIHRob3VnaCkgc28gd2UgaGF2ZSB0byBkbyBvYmplY3QgZGV0ZWN0aW9uXHJcbiAgICAgICAgICAgLy8gZm9yIHRoaXMgZWRnZSBjYXNlXHJcbiAgICAgICAgICAgdHlwZW9mIHZhbHVlLmxlbmd0aCA9PSAnbnVtYmVyJyAmJlxyXG4gICAgICAgICAgIHR5cGVvZiB2YWx1ZS5zcGxpY2UgIT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAgICB0eXBlb2YgdmFsdWUucHJvcGVydHlJc0VudW1lcmFibGUgIT0gJ3VuZGVmaW5lZCcgJiZcclxuICAgICAgICAgICAhdmFsdWUucHJvcGVydHlJc0VudW1lcmFibGUoJ3NwbGljZScpXHJcblxyXG4gICAgICAgICAgKSkge1xyXG4gICAgICAgIHJldHVybiAnYXJyYXknO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIEhBQ0s6IFRoZXJlIGlzIHN0aWxsIGFuIGFycmF5IGNhc2UgdGhhdCBmYWlscy5cclxuICAgICAgLy8gICAgIGZ1bmN0aW9uIEFycmF5SW1wb3N0b3IoKSB7fVxyXG4gICAgICAvLyAgICAgQXJyYXlJbXBvc3Rvci5wcm90b3R5cGUgPSBbXTtcclxuICAgICAgLy8gICAgIHZhciBpbXBvc3RvciA9IG5ldyBBcnJheUltcG9zdG9yO1xyXG4gICAgICAvLyB0aGlzIGNhbiBiZSBmaXhlZCBieSBnZXR0aW5nIHJpZCBvZiB0aGUgZmFzdCBwYXRoXHJcbiAgICAgIC8vICh2YWx1ZSBpbnN0YW5jZW9mIEFycmF5KSBhbmQgc29sZWx5IHJlbHlpbmcgb25cclxuICAgICAgLy8gKHZhbHVlICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcudmFsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XScpXHJcbiAgICAgIC8vIGJ1dCB0aGF0IHdvdWxkIHJlcXVpcmUgbWFueSBtb3JlIGZ1bmN0aW9uIGNhbGxzIGFuZCBpcyBub3Qgd2FycmFudGVkXHJcbiAgICAgIC8vIHVubGVzcyBjbG9zdXJlIGNvZGUgaXMgcmVjZWl2aW5nIG9iamVjdHMgZnJvbSB1bnRydXN0ZWQgc291cmNlcy5cclxuXHJcbiAgICAgIC8vIElFIGluIGNyb3NzLXdpbmRvdyBjYWxscyBkb2VzIG5vdCBjb3JyZWN0bHkgbWFyc2hhbCB0aGUgZnVuY3Rpb24gdHlwZVxyXG4gICAgICAvLyAoaXQgYXBwZWFycyBqdXN0IGFzIGFuIG9iamVjdCkgc28gd2UgY2Fubm90IHVzZSBqdXN0IHR5cGVvZiB2YWwgPT1cclxuICAgICAgLy8gJ2Z1bmN0aW9uJy4gSG93ZXZlciwgaWYgdGhlIG9iamVjdCBoYXMgYSBjYWxsIHByb3BlcnR5LCBpdCBpcyBhXHJcbiAgICAgIC8vIGZ1bmN0aW9uLlxyXG4gICAgICBpZiAoKGNsYXNzTmFtZSA9PSAnW29iamVjdCBGdW5jdGlvbl0nIHx8XHJcbiAgICAgICAgICB0eXBlb2YgdmFsdWUuY2FsbCAhPSAndW5kZWZpbmVkJyAmJlxyXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnByb3BlcnR5SXNFbnVtZXJhYmxlICE9ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgICAhdmFsdWUucHJvcGVydHlJc0VudW1lcmFibGUoJ2NhbGwnKSkpIHtcclxuICAgICAgICByZXR1cm4gJ2Z1bmN0aW9uJztcclxuICAgICAgfVxyXG5cclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJ251bGwnO1xyXG4gICAgfVxyXG5cclxuICB9IGVsc2UgaWYgKHMgPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUuY2FsbCA9PSAndW5kZWZpbmVkJykge1xyXG4gICAgLy8gSW4gU2FmYXJpIHR5cGVvZiBub2RlTGlzdCByZXR1cm5zICdmdW5jdGlvbicsIGFuZCBvbiBGaXJlZm94XHJcbiAgICAvLyB0eXBlb2YgYmVoYXZlcyBzaW1pbGFybHkgZm9yIEhUTUx7QXBwbGV0LEVtYmVkLE9iamVjdH1FbGVtZW50c1xyXG4gICAgLy8gYW5kIFJlZ0V4cHMuICBXZSB3b3VsZCBsaWtlIHRvIHJldHVybiBvYmplY3QgZm9yIHRob3NlIGFuZCB3ZSBjYW5cclxuICAgIC8vIGRldGVjdCBhbiBpbnZhbGlkIGZ1bmN0aW9uIGJ5IG1ha2luZyBzdXJlIHRoYXQgdGhlIGZ1bmN0aW9uXHJcbiAgICAvLyBvYmplY3QgaGFzIGEgY2FsbCBtZXRob2QuXHJcbiAgICByZXR1cm4gJ29iamVjdCc7XHJcbiAgfVxyXG4gIHJldHVybiBzO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBub3QgfHVuZGVmaW5lZHwuXHJcbiAqIFdBUk5JTkc6IERvIG5vdCB1c2UgdGhpcyB0byB0ZXN0IGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gVXNlIHRoZSBpblxyXG4gKiBvcGVyYXRvciBpbnN0ZWFkLiAgQWRkaXRpb25hbGx5LCB0aGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCB0aGUgZ2xvYmFsXHJcbiAqIHVuZGVmaW5lZCB2YXJpYWJsZSBoYXMgbm90IGJlZW4gcmVkZWZpbmVkLlxyXG4gKiBAcGFyYW0geyp9IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHZhcmlhYmxlIGlzIGRlZmluZWQuXHJcbiAqL1xyXG5nb29nLmlzRGVmID0gZnVuY3Rpb24odmFsKSB7XHJcbiAgcmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyB8bnVsbHxcclxuICogQHBhcmFtIHsqfSB2YWwgVmFyaWFibGUgdG8gdGVzdC5cclxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBudWxsLlxyXG4gKi9cclxuZ29vZy5pc051bGwgPSBmdW5jdGlvbih2YWwpIHtcclxuICByZXR1cm4gdmFsID09PSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBkZWZpbmVkIGFuZCBub3QgbnVsbFxyXG4gKiBAcGFyYW0geyp9IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHZhcmlhYmxlIGlzIGRlZmluZWQgYW5kIG5vdCBudWxsLlxyXG4gKi9cclxuZ29vZy5pc0RlZkFuZE5vdE51bGwgPSBmdW5jdGlvbih2YWwpIHtcclxuICAvLyBOb3RlIHRoYXQgdW5kZWZpbmVkID09IG51bGwuXHJcbiAgcmV0dXJuIHZhbCAhPSBudWxsO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhbiBhcnJheVxyXG4gKiBAcGFyYW0geyp9IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHZhcmlhYmxlIGlzIGFuIGFycmF5LlxyXG4gKi9cclxuZ29vZy5pc0FycmF5ID0gZnVuY3Rpb24odmFsKSB7XHJcbiAgcmV0dXJuIGdvb2cudHlwZU9mKHZhbCkgPT0gJ2FycmF5JztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgbG9va3MgbGlrZSBhbiBhcnJheS4gVG8gcXVhbGlmeSBhcyBhcnJheSBsaWtlXHJcbiAqIHRoZSB2YWx1ZSBuZWVkcyB0byBiZSBlaXRoZXIgYSBOb2RlTGlzdCBvciBhbiBvYmplY3Qgd2l0aCBhIE51bWJlciBsZW5ndGhcclxuICogcHJvcGVydHkuXHJcbiAqIEBwYXJhbSB7Kn0gdmFsIFZhcmlhYmxlIHRvIHRlc3QuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdmFyaWFibGUgaXMgYW4gYXJyYXkuXHJcbiAqL1xyXG5nb29nLmlzQXJyYXlMaWtlID0gZnVuY3Rpb24odmFsKSB7XHJcbiAgdmFyIHR5cGUgPSBnb29nLnR5cGVPZih2YWwpO1xyXG4gIHJldHVybiB0eXBlID09ICdhcnJheScgfHwgdHlwZSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsLmxlbmd0aCA9PSAnbnVtYmVyJztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgbG9va3MgbGlrZSBhIERhdGUuIFRvIHF1YWxpZnkgYXMgRGF0ZS1saWtlXHJcbiAqIHRoZSB2YWx1ZSBuZWVkcyB0byBiZSBhbiBvYmplY3QgYW5kIGhhdmUgYSBnZXRGdWxsWWVhcigpIGZ1bmN0aW9uLlxyXG4gKiBAcGFyYW0geyp9IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHZhcmlhYmxlIGlzIGEgbGlrZSBhIERhdGUuXHJcbiAqL1xyXG5nb29nLmlzRGF0ZUxpa2UgPSBmdW5jdGlvbih2YWwpIHtcclxuICByZXR1cm4gZ29vZy5pc09iamVjdCh2YWwpICYmIHR5cGVvZiB2YWwuZ2V0RnVsbFllYXIgPT0gJ2Z1bmN0aW9uJztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBzdHJpbmdcclxuICogQHBhcmFtIHsqfSB2YWwgVmFyaWFibGUgdG8gdGVzdC5cclxuICogQHJldHVybiB7Ym9vbGVhbn0gV2hldGhlciB2YXJpYWJsZSBpcyBhIHN0cmluZy5cclxuICovXHJcbmdvb2cuaXNTdHJpbmcgPSBmdW5jdGlvbih2YWwpIHtcclxuICByZXR1cm4gdHlwZW9mIHZhbCA9PSAnc3RyaW5nJztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBzcGVjaWZpZWQgdmFsdWUgaXMgYSBib29sZWFuXHJcbiAqIEBwYXJhbSB7Kn0gdmFsIFZhcmlhYmxlIHRvIHRlc3QuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdmFyaWFibGUgaXMgYm9vbGVhbi5cclxuICovXHJcbmdvb2cuaXNCb29sZWFuID0gZnVuY3Rpb24odmFsKSB7XHJcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT0gJ2Jvb2xlYW4nO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIG51bWJlclxyXG4gKiBAcGFyYW0geyp9IHZhbCBWYXJpYWJsZSB0byB0ZXN0LlxyXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIHZhcmlhYmxlIGlzIGEgbnVtYmVyLlxyXG4gKi9cclxuZ29vZy5pc051bWJlciA9IGZ1bmN0aW9uKHZhbCkge1xyXG4gIHJldHVybiB0eXBlb2YgdmFsID09ICdudW1iZXInO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHNwZWNpZmllZCB2YWx1ZSBpcyBhIGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7Kn0gdmFsIFZhcmlhYmxlIHRvIHRlc3QuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdmFyaWFibGUgaXMgYSBmdW5jdGlvbi5cclxuICovXHJcbmdvb2cuaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKHZhbCkge1xyXG4gIHJldHVybiBnb29nLnR5cGVPZih2YWwpID09ICdmdW5jdGlvbic7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIHZhbHVlIGlzIGFuIG9iamVjdC4gIFRoaXMgaW5jbHVkZXMgYXJyYXlzXHJcbiAqIGFuZCBmdW5jdGlvbnMuXHJcbiAqIEBwYXJhbSB7Kn0gdmFsIFZhcmlhYmxlIHRvIHRlc3QuXHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgdmFyaWFibGUgaXMgYW4gb2JqZWN0LlxyXG4gKi9cclxuZ29vZy5pc09iamVjdCA9IGZ1bmN0aW9uKHZhbCkge1xyXG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbDtcclxuICByZXR1cm4gdHlwZSA9PSAnb2JqZWN0JyAmJiB2YWwgIT0gbnVsbCB8fCB0eXBlID09ICdmdW5jdGlvbic7XHJcbiAgLy8gcmV0dXJuIE9iamVjdCh2YWwpID09PSB2YWwgYWxzbyB3b3JrcywgYnV0IGlzIHNsb3dlciwgZXNwZWNpYWxseSBpZiB2YWwgaXNcclxuICAvLyBub3QgYW4gb2JqZWN0LlxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBHZXRzIGEgdW5pcXVlIElEIGZvciBhbiBvYmplY3QuIFRoaXMgbXV0YXRlcyB0aGUgb2JqZWN0IHNvIHRoYXQgZnVydGhlclxyXG4gKiBjYWxscyB3aXRoIHRoZSBzYW1lIG9iamVjdCBhcyBhIHBhcmFtZXRlciByZXR1cm5zIHRoZSBzYW1lIHZhbHVlLiBUaGUgdW5pcXVlXHJcbiAqIElEIGlzIGd1YXJhbnRlZWQgdG8gYmUgdW5pcXVlIGFjcm9zcyB0aGUgY3VycmVudCBzZXNzaW9uIGFtb25nc3Qgb2JqZWN0cyB0aGF0XHJcbiAqIGFyZSBwYXNzZWQgaW50byB7QGNvZGUgZ2V0VWlkfS4gVGhlcmUgaXMgbm8gZ3VhcmFudGVlIHRoYXQgdGhlIElEIGlzIHVuaXF1ZVxyXG4gKiBvciBjb25zaXN0ZW50IGFjcm9zcyBzZXNzaW9ucy4gSXQgaXMgdW5zYWZlIHRvIGdlbmVyYXRlIHVuaXF1ZSBJRCBmb3JcclxuICogZnVuY3Rpb24gcHJvdG90eXBlcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIGdldCB0aGUgdW5pcXVlIElEIGZvci5cclxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgdW5pcXVlIElEIGZvciB0aGUgb2JqZWN0LlxyXG4gKi9cclxuZ29vZy5nZXRVaWQgPSBmdW5jdGlvbihvYmopIHtcclxuICAvLyBUT0RPKGFydik6IE1ha2UgdGhlIHR5cGUgc3RyaWN0ZXIsIGRvIG5vdCBhY2NlcHQgbnVsbC5cclxuXHJcbiAgLy8gSW4gT3BlcmEgd2luZG93Lmhhc093blByb3BlcnR5IGV4aXN0cyBidXQgYWx3YXlzIHJldHVybnMgZmFsc2Ugc28gd2UgYXZvaWRcclxuICAvLyB1c2luZyBpdC4gQXMgYSBjb25zZXF1ZW5jZSB0aGUgdW5pcXVlIElEIGdlbmVyYXRlZCBmb3IgQmFzZUNsYXNzLnByb3RvdHlwZVxyXG4gIC8vIGFuZCBTdWJDbGFzcy5wcm90b3R5cGUgd2lsbCBiZSB0aGUgc2FtZS5cclxuICByZXR1cm4gb2JqW2dvb2cuVUlEX1BST1BFUlRZX10gfHxcclxuICAgICAgKG9ialtnb29nLlVJRF9QUk9QRVJUWV9dID0gKytnb29nLnVpZENvdW50ZXJfKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogUmVtb3ZlcyB0aGUgdW5pcXVlIElEIGZyb20gYW4gb2JqZWN0LiBUaGlzIGlzIHVzZWZ1bCBpZiB0aGUgb2JqZWN0IHdhc1xyXG4gKiBwcmV2aW91c2x5IG11dGF0ZWQgdXNpbmcge0Bjb2RlIGdvb2cuZ2V0VWlkfSBpbiB3aGljaCBjYXNlIHRoZSBtdXRhdGlvbiBpc1xyXG4gKiB1bmRvbmUuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byByZW1vdmUgdGhlIHVuaXF1ZSBJRCBmaWVsZCBmcm9tLlxyXG4gKi9cclxuZ29vZy5yZW1vdmVVaWQgPSBmdW5jdGlvbihvYmopIHtcclxuICAvLyBUT0RPKGFydik6IE1ha2UgdGhlIHR5cGUgc3RyaWN0ZXIsIGRvIG5vdCBhY2NlcHQgbnVsbC5cclxuXHJcbiAgLy8gRE9NIG5vZGVzIGluIElFIGFyZSBub3QgaW5zdGFuY2Ugb2YgT2JqZWN0IGFuZCB0aHJvd3MgZXhjZXB0aW9uXHJcbiAgLy8gZm9yIGRlbGV0ZS4gSW5zdGVhZCB3ZSB0cnkgdG8gdXNlIHJlbW92ZUF0dHJpYnV0ZVxyXG4gIGlmICgncmVtb3ZlQXR0cmlidXRlJyBpbiBvYmopIHtcclxuICAgIG9iai5yZW1vdmVBdHRyaWJ1dGUoZ29vZy5VSURfUFJPUEVSVFlfKTtcclxuICB9XHJcbiAgLyoqIEBwcmVzZXJ2ZVRyeSAqL1xyXG4gIHRyeSB7XHJcbiAgICBkZWxldGUgb2JqW2dvb2cuVUlEX1BST1BFUlRZX107XHJcbiAgfSBjYXRjaCAoZXgpIHtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIE5hbWUgZm9yIHVuaXF1ZSBJRCBwcm9wZXJ0eS4gSW5pdGlhbGl6ZWQgaW4gYSB3YXkgdG8gaGVscCBhdm9pZCBjb2xsaXNpb25zXHJcbiAqIHdpdGggb3RoZXIgY2xvc3VyZSBqYXZhc2NyaXB0IG9uIHRoZSBzYW1lIHBhZ2UuXHJcbiAqIEB0eXBlIHtzdHJpbmd9XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5nb29nLlVJRF9QUk9QRVJUWV8gPSAnY2xvc3VyZV91aWRfJyArXHJcbiAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyMTQ3NDgzNjQ4KS50b1N0cmluZygzNik7XHJcblxyXG5cclxuLyoqXHJcbiAqIENvdW50ZXIgZm9yIFVJRC5cclxuICogQHR5cGUge251bWJlcn1cclxuICogQHByaXZhdGVcclxuICovXHJcbmdvb2cudWlkQ291bnRlcl8gPSAwO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBBZGRzIGEgaGFzaCBjb2RlIGZpZWxkIHRvIGFuIG9iamVjdC4gVGhlIGhhc2ggY29kZSBpcyB1bmlxdWUgZm9yIHRoZVxyXG4gKiBnaXZlbiBvYmplY3QuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBnZXQgdGhlIGhhc2ggY29kZSBmb3IuXHJcbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIGhhc2ggY29kZSBmb3IgdGhlIG9iamVjdC5cclxuICogQGRlcHJlY2F0ZWQgVXNlIGdvb2cuZ2V0VWlkIGluc3RlYWQuXHJcbiAqL1xyXG5nb29nLmdldEhhc2hDb2RlID0gZ29vZy5nZXRVaWQ7XHJcblxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZXMgdGhlIGhhc2ggY29kZSBmaWVsZCBmcm9tIGFuIG9iamVjdC5cclxuICogQHBhcmFtIHtPYmplY3R9IG9iaiBUaGUgb2JqZWN0IHRvIHJlbW92ZSB0aGUgZmllbGQgZnJvbS5cclxuICogQGRlcHJlY2F0ZWQgVXNlIGdvb2cucmVtb3ZlVWlkIGluc3RlYWQuXHJcbiAqL1xyXG5nb29nLnJlbW92ZUhhc2hDb2RlID0gZ29vZy5yZW1vdmVVaWQ7XHJcblxyXG5cclxuLyoqXHJcbiAqIENsb25lcyBhIHZhbHVlLiBUaGUgaW5wdXQgbWF5IGJlIGFuIE9iamVjdCwgQXJyYXksIG9yIGJhc2ljIHR5cGUuIE9iamVjdHMgYW5kXHJcbiAqIGFycmF5cyB3aWxsIGJlIGNsb25lZCByZWN1cnNpdmVseS5cclxuICpcclxuICogV0FSTklOR1M6XHJcbiAqIDxjb2RlPmdvb2cuY2xvbmVPYmplY3Q8L2NvZGU+IGRvZXMgbm90IGRldGVjdCByZWZlcmVuY2UgbG9vcHMuIE9iamVjdHMgdGhhdFxyXG4gKiByZWZlciB0byB0aGVtc2VsdmVzIHdpbGwgY2F1c2UgaW5maW5pdGUgcmVjdXJzaW9uLlxyXG4gKlxyXG4gKiA8Y29kZT5nb29nLmNsb25lT2JqZWN0PC9jb2RlPiBpcyB1bmF3YXJlIG9mIHVuaXF1ZSBpZGVudGlmaWVycywgYW5kIGNvcGllc1xyXG4gKiBVSURzIGNyZWF0ZWQgYnkgPGNvZGU+Z2V0VWlkPC9jb2RlPiBpbnRvIGNsb25lZCByZXN1bHRzLlxyXG4gKlxyXG4gKiBAcGFyYW0geyp9IG9iaiBUaGUgdmFsdWUgdG8gY2xvbmUuXHJcbiAqIEByZXR1cm4geyp9IEEgY2xvbmUgb2YgdGhlIGlucHV0IHZhbHVlLlxyXG4gKiBAZGVwcmVjYXRlZCBnb29nLmNsb25lT2JqZWN0IGlzIHVuc2FmZS4gUHJlZmVyIHRoZSBnb29nLm9iamVjdCBtZXRob2RzLlxyXG4gKi9cclxuZ29vZy5jbG9uZU9iamVjdCA9IGZ1bmN0aW9uKG9iaikge1xyXG4gIHZhciB0eXBlID0gZ29vZy50eXBlT2Yob2JqKTtcclxuICBpZiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdhcnJheScpIHtcclxuICAgIGlmIChvYmouY2xvbmUpIHtcclxuICAgICAgcmV0dXJuIG9iai5jbG9uZSgpO1xyXG4gICAgfVxyXG4gICAgdmFyIGNsb25lID0gdHlwZSA9PSAnYXJyYXknID8gW10gOiB7fTtcclxuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcclxuICAgICAgY2xvbmVba2V5XSA9IGdvb2cuY2xvbmVPYmplY3Qob2JqW2tleV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNsb25lO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG9iajtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRm9yd2FyZCBkZWNsYXJhdGlvbiBmb3IgdGhlIGNsb25lIG1ldGhvZC4gVGhpcyBpcyBuZWNlc3NhcnkgdW50aWwgdGhlXHJcbiAqIGNvbXBpbGVyIGNhbiBiZXR0ZXIgc3VwcG9ydCBkdWNrLXR5cGluZyBjb25zdHJ1Y3RzIGFzIHVzZWQgaW5cclxuICogZ29vZy5jbG9uZU9iamVjdC5cclxuICpcclxuICogVE9ETyhicmVubmVtYW4pOiBSZW1vdmUgb25jZSB0aGUgSlNDb21waWxlciBjYW4gaW5mZXIgdGhhdCB0aGUgY2hlY2sgZm9yXHJcbiAqIHByb3RvLmNsb25lIGlzIHNhZmUgaW4gZ29vZy5jbG9uZU9iamVjdC5cclxuICpcclxuICogQHR5cGUge0Z1bmN0aW9ufVxyXG4gKi9cclxuT2JqZWN0LnByb3RvdHlwZS5jbG9uZTtcclxuXHJcblxyXG4vKipcclxuICogQSBuYXRpdmUgaW1wbGVtZW50YXRpb24gb2YgZ29vZy5iaW5kLlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBBIGZ1bmN0aW9uIHRvIHBhcnRpYWxseSBhcHBseS5cclxuICogQHBhcmFtIHtPYmplY3R8dW5kZWZpbmVkfSBzZWxmT2JqIFNwZWNpZmllcyB0aGUgb2JqZWN0IHdoaWNoIHx0aGlzfCBzaG91bGRcclxuICogICAgIHBvaW50IHRvIHdoZW4gdGhlIGZ1bmN0aW9uIGlzIHJ1bi5cclxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBBZGRpdGlvbmFsIGFyZ3VtZW50cyB0aGF0IGFyZSBwYXJ0aWFsbHlcclxuICogICAgIGFwcGxpZWQgdG8gdGhlIGZ1bmN0aW9uLlxyXG4gKiBAcmV0dXJuIHshRnVuY3Rpb259IEEgcGFydGlhbGx5LWFwcGxpZWQgZm9ybSBvZiB0aGUgZnVuY3Rpb24gYmluZCgpIHdhc1xyXG4gKiAgICAgaW52b2tlZCBhcyBhIG1ldGhvZCBvZi5cclxuICogQHByaXZhdGVcclxuICogQHN1cHByZXNzIHtkZXByZWNhdGVkfSBUaGUgY29tcGlsZXIgdGhpbmtzIHRoYXQgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcclxuICogICAgIGlzIGRlcHJlY2F0ZWQgYmVjYXVzZSBzb21lIHBlb3BsZSBoYXZlIGRlY2xhcmVkIGEgcHVyZS1KUyB2ZXJzaW9uLlxyXG4gKiAgICAgT25seSB0aGUgcHVyZS1KUyB2ZXJzaW9uIGlzIHRydWx5IGRlcHJlY2F0ZWQuXHJcbiAqL1xyXG5nb29nLmJpbmROYXRpdmVfID0gZnVuY3Rpb24oZm4sIHNlbGZPYmosIHZhcl9hcmdzKSB7XHJcbiAgcmV0dXJuIC8qKiBAdHlwZSB7IUZ1bmN0aW9ufSAqLyAoZm4uY2FsbC5hcHBseShmbi5iaW5kLCBhcmd1bWVudHMpKTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogQSBwdXJlLUpTIGltcGxlbWVudGF0aW9uIG9mIGdvb2cuYmluZC5cclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gQSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fHVuZGVmaW5lZH0gc2VsZk9iaiBTcGVjaWZpZXMgdGhlIG9iamVjdCB3aGljaCB8dGhpc3wgc2hvdWxkXHJcbiAqICAgICBwb2ludCB0byB3aGVuIHRoZSBmdW5jdGlvbiBpcyBydW4uXHJcbiAqIEBwYXJhbSB7Li4uKn0gdmFyX2FyZ3MgQWRkaXRpb25hbCBhcmd1bWVudHMgdGhhdCBhcmUgcGFydGlhbGx5XHJcbiAqICAgICBhcHBsaWVkIHRvIHRoZSBmdW5jdGlvbi5cclxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBBIHBhcnRpYWxseS1hcHBsaWVkIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIGJpbmQoKSB3YXNcclxuICogICAgIGludm9rZWQgYXMgYSBtZXRob2Qgb2YuXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5nb29nLmJpbmRKc18gPSBmdW5jdGlvbihmbiwgc2VsZk9iaiwgdmFyX2FyZ3MpIHtcclxuICBpZiAoIWZuKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoKTtcclxuICB9XHJcblxyXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMikge1xyXG4gICAgdmFyIGJvdW5kQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XHJcbiAgICAgIC8vIFByZXBlbmQgdGhlIGJvdW5kIGFyZ3VtZW50cyB0byB0aGUgY3VycmVudCBhcmd1bWVudHMuXHJcbiAgICAgIHZhciBuZXdBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgICAgQXJyYXkucHJvdG90eXBlLnVuc2hpZnQuYXBwbHkobmV3QXJncywgYm91bmRBcmdzKTtcclxuICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGZPYmosIG5ld0FyZ3MpO1xyXG4gICAgfTtcclxuXHJcbiAgfSBlbHNlIHtcclxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGZuLmFwcGx5KHNlbGZPYmosIGFyZ3VtZW50cyk7XHJcbiAgICB9O1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogUGFydGlhbGx5IGFwcGxpZXMgdGhpcyBmdW5jdGlvbiB0byBhIHBhcnRpY3VsYXIgJ3RoaXMgb2JqZWN0JyBhbmQgemVybyBvclxyXG4gKiBtb3JlIGFyZ3VtZW50cy4gVGhlIHJlc3VsdCBpcyBhIG5ldyBmdW5jdGlvbiB3aXRoIHNvbWUgYXJndW1lbnRzIG9mIHRoZSBmaXJzdFxyXG4gKiBmdW5jdGlvbiBwcmUtZmlsbGVkIGFuZCB0aGUgdmFsdWUgb2YgfHRoaXN8ICdwcmUtc3BlY2lmaWVkJy48YnI+PGJyPlxyXG4gKlxyXG4gKiBSZW1haW5pbmcgYXJndW1lbnRzIHNwZWNpZmllZCBhdCBjYWxsLXRpbWUgYXJlIGFwcGVuZGVkIHRvIHRoZSBwcmUtXHJcbiAqIHNwZWNpZmllZCBvbmVzLjxicj48YnI+XHJcbiAqXHJcbiAqIEFsc28gc2VlOiB7QGxpbmsgI3BhcnRpYWx9Ljxicj48YnI+XHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKiA8cHJlPnZhciBiYXJNZXRoQm91bmQgPSBiaW5kKG15RnVuY3Rpb24sIG15T2JqLCAnYXJnMScsICdhcmcyJyk7XHJcbiAqIGJhck1ldGhCb3VuZCgnYXJnMycsICdhcmc0Jyk7PC9wcmU+XHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEEgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5LlxyXG4gKiBAcGFyYW0ge09iamVjdHx1bmRlZmluZWR9IHNlbGZPYmogU3BlY2lmaWVzIHRoZSBvYmplY3Qgd2hpY2ggfHRoaXN8IHNob3VsZFxyXG4gKiAgICAgcG9pbnQgdG8gd2hlbiB0aGUgZnVuY3Rpb24gaXMgcnVuLlxyXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIEFkZGl0aW9uYWwgYXJndW1lbnRzIHRoYXQgYXJlIHBhcnRpYWxseVxyXG4gKiAgICAgYXBwbGllZCB0byB0aGUgZnVuY3Rpb24uXHJcbiAqIEByZXR1cm4geyFGdW5jdGlvbn0gQSBwYXJ0aWFsbHktYXBwbGllZCBmb3JtIG9mIHRoZSBmdW5jdGlvbiBiaW5kKCkgd2FzXHJcbiAqICAgICBpbnZva2VkIGFzIGEgbWV0aG9kIG9mLlxyXG4gKiBAc3VwcHJlc3Mge2RlcHJlY2F0ZWR9IFNlZSBhYm92ZS5cclxuICovXHJcbmdvb2cuYmluZCA9IGZ1bmN0aW9uKGZuLCBzZWxmT2JqLCB2YXJfYXJncykge1xyXG4gIC8vIFRPRE8obmlja3NhbnRvcyk6IG5hcnJvdyB0aGUgdHlwZSBzaWduYXR1cmUuXHJcbiAgaWYgKEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kICYmXHJcbiAgICAgIC8vIE5PVEUobmlja3NhbnRvcyk6IFNvbWVib2R5IHB1bGxlZCBiYXNlLmpzIGludG8gdGhlIGRlZmF1bHRcclxuICAgICAgLy8gQ2hyb21lIGV4dGVuc2lvbiBlbnZpcm9ubWVudC4gVGhpcyBtZWFucyB0aGF0IGZvciBDaHJvbWUgZXh0ZW5zaW9ucyxcclxuICAgICAgLy8gdGhleSBnZXQgdGhlIGltcGxlbWVudGF0aW9uIG9mIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHRoYXRcclxuICAgICAgLy8gY2FsbHMgZ29vZy5iaW5kIGluc3RlYWQgb2YgdGhlIG5hdGl2ZSBvbmUuIEV2ZW4gd29yc2UsIHdlIGRvbid0IHdhbnRcclxuICAgICAgLy8gdG8gaW50cm9kdWNlIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSBiZXR3ZWVuIGdvb2cuYmluZCBhbmRcclxuICAgICAgLy8gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQsIHNvIHdlIGhhdmUgdG8gaGFjayB0aGlzIHRvIG1ha2Ugc3VyZSBpdFxyXG4gICAgICAvLyB3b3JrcyBjb3JyZWN0bHkuXHJcbiAgICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLnRvU3RyaW5nKCkuaW5kZXhPZignbmF0aXZlIGNvZGUnKSAhPSAtMSkge1xyXG4gICAgZ29vZy5iaW5kID0gZ29vZy5iaW5kTmF0aXZlXztcclxuICB9IGVsc2Uge1xyXG4gICAgZ29vZy5iaW5kID0gZ29vZy5iaW5kSnNfO1xyXG4gIH1cclxuICByZXR1cm4gZ29vZy5iaW5kLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIExpa2UgYmluZCgpLCBleGNlcHQgdGhhdCBhICd0aGlzIG9iamVjdCcgaXMgbm90IHJlcXVpcmVkLiBVc2VmdWwgd2hlbiB0aGVcclxuICogdGFyZ2V0IGZ1bmN0aW9uIGlzIGFscmVhZHkgYm91bmQuXHJcbiAqXHJcbiAqIFVzYWdlOlxyXG4gKiB2YXIgZyA9IHBhcnRpYWwoZiwgYXJnMSwgYXJnMik7XHJcbiAqIGcoYXJnMywgYXJnNCk7XHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIEEgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5LlxyXG4gKiBAcGFyYW0gey4uLip9IHZhcl9hcmdzIEFkZGl0aW9uYWwgYXJndW1lbnRzIHRoYXQgYXJlIHBhcnRpYWxseVxyXG4gKiAgICAgYXBwbGllZCB0byBmbi5cclxuICogQHJldHVybiB7IUZ1bmN0aW9ufSBBIHBhcnRpYWxseS1hcHBsaWVkIGZvcm0gb2YgdGhlIGZ1bmN0aW9uIGJpbmQoKSB3YXNcclxuICogICAgIGludm9rZWQgYXMgYSBtZXRob2Qgb2YuXHJcbiAqL1xyXG5nb29nLnBhcnRpYWwgPSBmdW5jdGlvbihmbiwgdmFyX2FyZ3MpIHtcclxuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xyXG4gICAgLy8gUHJlcGVuZCB0aGUgYm91bmQgYXJndW1lbnRzIHRvIHRoZSBjdXJyZW50IGFyZ3VtZW50cy5cclxuICAgIHZhciBuZXdBcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcclxuICAgIG5ld0FyZ3MudW5zaGlmdC5hcHBseShuZXdBcmdzLCBhcmdzKTtcclxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBuZXdBcmdzKTtcclxuICB9O1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDb3BpZXMgYWxsIHRoZSBtZW1iZXJzIG9mIGEgc291cmNlIG9iamVjdCB0byBhIHRhcmdldCBvYmplY3QuIFRoaXMgbWV0aG9kXHJcbiAqIGRvZXMgbm90IHdvcmsgb24gYWxsIGJyb3dzZXJzIGZvciBhbGwgb2JqZWN0cyB0aGF0IGNvbnRhaW4ga2V5cyBzdWNoIGFzXHJcbiAqIHRvU3RyaW5nIG9yIGhhc093blByb3BlcnR5LiBVc2UgZ29vZy5vYmplY3QuZXh0ZW5kIGZvciB0aGlzIHB1cnBvc2UuXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGFyZ2V0LlxyXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFNvdXJjZS5cclxuICovXHJcbmdvb2cubWl4aW4gPSBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xyXG4gIGZvciAodmFyIHggaW4gc291cmNlKSB7XHJcbiAgICB0YXJnZXRbeF0gPSBzb3VyY2VbeF07XHJcbiAgfVxyXG5cclxuICAvLyBGb3IgSUU3IG9yIGxvd2VyLCB0aGUgZm9yLWluLWxvb3AgZG9lcyBub3QgY29udGFpbiBhbnkgcHJvcGVydGllcyB0aGF0IGFyZVxyXG4gIC8vIG5vdCBlbnVtZXJhYmxlIG9uIHRoZSBwcm90b3R5cGUgb2JqZWN0IChmb3IgZXhhbXBsZSwgaXNQcm90b3R5cGVPZiBmcm9tXHJcbiAgLy8gT2JqZWN0LnByb3RvdHlwZSkgYnV0IGFsc28gaXQgd2lsbCBub3QgaW5jbHVkZSAncmVwbGFjZScgb24gb2JqZWN0cyB0aGF0XHJcbiAgLy8gZXh0ZW5kIFN0cmluZyBhbmQgY2hhbmdlICdyZXBsYWNlJyAobm90IHRoYXQgaXQgaXMgY29tbW9uIGZvciBhbnlvbmUgdG9cclxuICAvLyBleHRlbmQgYW55dGhpbmcgZXhjZXB0IE9iamVjdCkuXHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEByZXR1cm4ge251bWJlcn0gQW4gaW50ZWdlciB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHNcclxuICogICAgIGJldHdlZW4gbWlkbmlnaHQsIEphbnVhcnkgMSwgMTk3MCBhbmQgdGhlIGN1cnJlbnQgdGltZS5cclxuICovXHJcbmdvb2cubm93ID0gRGF0ZS5ub3cgfHwgKGZ1bmN0aW9uKCkge1xyXG4gIC8vIFVuYXJ5IHBsdXMgb3BlcmF0b3IgY29udmVydHMgaXRzIG9wZXJhbmQgdG8gYSBudW1iZXIgd2hpY2ggaW4gdGhlIGNhc2Ugb2ZcclxuICAvLyBhIGRhdGUgaXMgZG9uZSBieSBjYWxsaW5nIGdldFRpbWUoKS5cclxuICByZXR1cm4gK25ldyBEYXRlKCk7XHJcbn0pO1xyXG5cclxuXHJcbi8qKlxyXG4gKiBFdmFscyBqYXZhc2NyaXB0IGluIHRoZSBnbG9iYWwgc2NvcGUuICBJbiBJRSB0aGlzIHVzZXMgZXhlY1NjcmlwdCwgb3RoZXJcclxuICogYnJvd3NlcnMgdXNlIGdvb2cuZ2xvYmFsLmV2YWwuIElmIGdvb2cuZ2xvYmFsLmV2YWwgZG9lcyBub3QgZXZhbHVhdGUgaW4gdGhlXHJcbiAqIGdsb2JhbCBzY29wZSAoZm9yIGV4YW1wbGUsIGluIFNhZmFyaSksIGFwcGVuZHMgYSBzY3JpcHQgdGFnIGluc3RlYWQuXHJcbiAqIFRocm93cyBhbiBleGNlcHRpb24gaWYgbmVpdGhlciBleGVjU2NyaXB0IG9yIGV2YWwgaXMgZGVmaW5lZC5cclxuICogQHBhcmFtIHtzdHJpbmd9IHNjcmlwdCBKYXZhU2NyaXB0IHN0cmluZy5cclxuICovXHJcbmdvb2cuZ2xvYmFsRXZhbCA9IGZ1bmN0aW9uKHNjcmlwdCkge1xyXG4gIGlmIChnb29nLmdsb2JhbC5leGVjU2NyaXB0KSB7XHJcbiAgICBnb29nLmdsb2JhbC5leGVjU2NyaXB0KHNjcmlwdCwgJ0phdmFTY3JpcHQnKTtcclxuICB9IGVsc2UgaWYgKGdvb2cuZ2xvYmFsLmV2YWwpIHtcclxuICAgIC8vIFRlc3QgdG8gc2VlIGlmIGV2YWwgd29ya3NcclxuICAgIGlmIChnb29nLmV2YWxXb3Jrc0Zvckdsb2JhbHNfID09IG51bGwpIHtcclxuICAgICAgZ29vZy5nbG9iYWwuZXZhbCgndmFyIF9ldF8gPSAxOycpO1xyXG4gICAgICBpZiAodHlwZW9mIGdvb2cuZ2xvYmFsWydfZXRfJ10gIT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICBkZWxldGUgZ29vZy5nbG9iYWxbJ19ldF8nXTtcclxuICAgICAgICBnb29nLmV2YWxXb3Jrc0Zvckdsb2JhbHNfID0gdHJ1ZTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBnb29nLmV2YWxXb3Jrc0Zvckdsb2JhbHNfID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAoZ29vZy5ldmFsV29ya3NGb3JHbG9iYWxzXykge1xyXG4gICAgICBnb29nLmdsb2JhbC5ldmFsKHNjcmlwdCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YXIgZG9jID0gZ29vZy5nbG9iYWwuZG9jdW1lbnQ7XHJcbiAgICAgIHZhciBzY3JpcHRFbHQgPSBkb2MuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICAgIHNjcmlwdEVsdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XHJcbiAgICAgIHNjcmlwdEVsdC5kZWZlciA9IGZhbHNlO1xyXG4gICAgICAvLyBOb3RlKHVzZXIpOiBjYW4ndCB1c2UgLmlubmVySFRNTCBzaW5jZSBcInQoJzx0ZXN0PicpXCIgd2lsbCBmYWlsIGFuZFxyXG4gICAgICAvLyAudGV4dCBkb2Vzbid0IHdvcmsgaW4gU2FmYXJpIDIuICBUaGVyZWZvcmUgd2UgYXBwZW5kIGEgdGV4dCBub2RlLlxyXG4gICAgICBzY3JpcHRFbHQuYXBwZW5kQ2hpbGQoZG9jLmNyZWF0ZVRleHROb2RlKHNjcmlwdCkpO1xyXG4gICAgICBkb2MuYm9keS5hcHBlbmRDaGlsZChzY3JpcHRFbHQpO1xyXG4gICAgICBkb2MuYm9keS5yZW1vdmVDaGlsZChzY3JpcHRFbHQpO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICB0aHJvdyBFcnJvcignZ29vZy5nbG9iYWxFdmFsIG5vdCBhdmFpbGFibGUnKTtcclxuICB9XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCB3ZSBjYW4gY2FsbCAnZXZhbCcgZGlyZWN0bHkgdG8gZXZhbCBjb2RlIGluIHRoZVxyXG4gKiBnbG9iYWwgc2NvcGUuIFNldCB0byBhIEJvb2xlYW4gYnkgdGhlIGZpcnN0IGNhbGwgdG8gZ29vZy5nbG9iYWxFdmFsICh3aGljaFxyXG4gKiBlbXBpcmljYWxseSB0ZXN0cyB3aGV0aGVyIGV2YWwgd29ya3MgZm9yIGdsb2JhbHMpLiBAc2VlIGdvb2cuZ2xvYmFsRXZhbFxyXG4gKiBAdHlwZSB7P2Jvb2xlYW59XHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5nb29nLmV2YWxXb3Jrc0Zvckdsb2JhbHNfID0gbnVsbDtcclxuXHJcblxyXG4vKipcclxuICogT3B0aW9uYWwgbWFwIG9mIENTUyBjbGFzcyBuYW1lcyB0byBvYmZ1c2NhdGVkIG5hbWVzIHVzZWQgd2l0aFxyXG4gKiBnb29nLmdldENzc05hbWUoKS5cclxuICogQHR5cGUge09iamVjdHx1bmRlZmluZWR9XHJcbiAqIEBwcml2YXRlXHJcbiAqIEBzZWUgZ29vZy5zZXRDc3NOYW1lTWFwcGluZ1xyXG4gKi9cclxuZ29vZy5jc3NOYW1lTWFwcGluZ187XHJcblxyXG5cclxuLyoqXHJcbiAqIE9wdGlvbmFsIG9iZnVzY2F0aW9uIHN0eWxlIGZvciBDU1MgY2xhc3MgbmFtZXMuIFNob3VsZCBiZSBzZXQgdG8gZWl0aGVyXHJcbiAqICdCWV9XSE9MRScgb3IgJ0JZX1BBUlQnIGlmIGRlZmluZWQuXHJcbiAqIEB0eXBlIHtzdHJpbmd8dW5kZWZpbmVkfVxyXG4gKiBAcHJpdmF0ZVxyXG4gKiBAc2VlIGdvb2cuc2V0Q3NzTmFtZU1hcHBpbmdcclxuICovXHJcbmdvb2cuY3NzTmFtZU1hcHBpbmdTdHlsZV87XHJcblxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgc3RyaW5ncyB0aGF0IGFyZSBpbnRlbmRlZCB0byBiZSB1c2VkIGFzIENTUyBjbGFzcyBuYW1lcy5cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiB3b3JrcyBpbiB0YW5kZW0gd2l0aCBAc2VlIGdvb2cuc2V0Q3NzTmFtZU1hcHBpbmcuXHJcbiAqXHJcbiAqIFdpdGhvdXQgYW55IG1hcHBpbmcgc2V0LCB0aGUgYXJndW1lbnRzIGFyZSBzaW1wbGUgam9pbmVkIHdpdGggYVxyXG4gKiBoeXBoZW4gYW5kIHBhc3NlZCB0aHJvdWdoIHVuYWx0ZXJlZC5cclxuICpcclxuICogV2hlbiB0aGVyZSBpcyBhIG1hcHBpbmcsIHRoZXJlIGFyZSB0d28gcG9zc2libGUgc3R5bGVzIGluIHdoaWNoXHJcbiAqIHRoZXNlIG1hcHBpbmdzIGFyZSB1c2VkLiBJbiB0aGUgQllfUEFSVCBzdHlsZSwgZWFjaCBwYXJ0IChpLmUuIGluXHJcbiAqIGJldHdlZW4gaHlwaGVucykgb2YgdGhlIHBhc3NlZCBpbiBjc3MgbmFtZSBpcyByZXdyaXR0ZW4gYWNjb3JkaW5nXHJcbiAqIHRvIHRoZSBtYXAuIEluIHRoZSBCWV9XSE9MRSBzdHlsZSwgdGhlIGZ1bGwgY3NzIG5hbWUgaXMgbG9va2VkIHVwIGluXHJcbiAqIHRoZSBtYXAgZGlyZWN0bHkuIElmIGEgcmV3cml0ZSBpcyBub3Qgc3BlY2lmaWVkIGJ5IHRoZSBtYXAsIHRoZVxyXG4gKiBjb21waWxlciB3aWxsIG91dHB1dCBhIHdhcm5pbmcuXHJcbiAqXHJcbiAqIFdoZW4gdGhlIG1hcHBpbmcgaXMgcGFzc2VkIHRvIHRoZSBjb21waWxlciwgaXQgd2lsbCByZXBsYWNlIGNhbGxzXHJcbiAqIHRvIGdvb2cuZ2V0Q3NzTmFtZSB3aXRoIHRoZSBzdHJpbmdzIGZyb20gdGhlIG1hcHBpbmcsIGUuZy5cclxuICogICAgIHZhciB4ID0gZ29vZy5nZXRDc3NOYW1lKCdmb28nKTtcclxuICogICAgIHZhciB5ID0gZ29vZy5nZXRDc3NOYW1lKHRoaXMuYmFzZUNsYXNzLCAnYWN0aXZlJyk7XHJcbiAqICBiZWNvbWVzOlxyXG4gKiAgICAgdmFyIHg9ICdmb28nO1xyXG4gKiAgICAgdmFyIHkgPSB0aGlzLmJhc2VDbGFzcyArICctYWN0aXZlJztcclxuICpcclxuICogSWYgb25lIGFyZ3VtZW50IGlzIHBhc3NlZCBpdCB3aWxsIGJlIHByb2Nlc3NlZCwgaWYgdHdvIGFyZSBwYXNzZWRcclxuICogb25seSB0aGUgbW9kaWZpZXIgd2lsbCBiZSBwcm9jZXNzZWQsIGFzIGl0IGlzIGFzc3VtZWQgdGhlIGZpcnN0XHJcbiAqIGFyZ3VtZW50IHdhcyBnZW5lcmF0ZWQgYXMgYSByZXN1bHQgb2YgY2FsbGluZyBnb29nLmdldENzc05hbWUuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjbGFzc05hbWUgVGhlIGNsYXNzIG5hbWUuXHJcbiAqIEBwYXJhbSB7c3RyaW5nPX0gb3B0X21vZGlmaWVyIEEgbW9kaWZpZXIgdG8gYmUgYXBwZW5kZWQgdG8gdGhlIGNsYXNzIG5hbWUuXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gVGhlIGNsYXNzIG5hbWUgb3IgdGhlIGNvbmNhdGVuYXRpb24gb2YgdGhlIGNsYXNzIG5hbWUgYW5kXHJcbiAqICAgICB0aGUgbW9kaWZpZXIuXHJcbiAqL1xyXG5nb29nLmdldENzc05hbWUgPSBmdW5jdGlvbihjbGFzc05hbWUsIG9wdF9tb2RpZmllcikge1xyXG4gIHZhciBnZXRNYXBwaW5nID0gZnVuY3Rpb24oY3NzTmFtZSkge1xyXG4gICAgcmV0dXJuIGdvb2cuY3NzTmFtZU1hcHBpbmdfW2Nzc05hbWVdIHx8IGNzc05hbWU7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHJlbmFtZUJ5UGFydHMgPSBmdW5jdGlvbihjc3NOYW1lKSB7XHJcbiAgICAvLyBSZW1hcCBhbGwgdGhlIHBhcnRzIGluZGl2aWR1YWxseS5cclxuICAgIHZhciBwYXJ0cyA9IGNzc05hbWUuc3BsaXQoJy0nKTtcclxuICAgIHZhciBtYXBwZWQgPSBbXTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgbWFwcGVkLnB1c2goZ2V0TWFwcGluZyhwYXJ0c1tpXSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG1hcHBlZC5qb2luKCctJyk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHJlbmFtZTtcclxuICBpZiAoZ29vZy5jc3NOYW1lTWFwcGluZ18pIHtcclxuICAgIHJlbmFtZSA9IGdvb2cuY3NzTmFtZU1hcHBpbmdTdHlsZV8gPT0gJ0JZX1dIT0xFJyA/XHJcbiAgICAgICAgZ2V0TWFwcGluZyA6IHJlbmFtZUJ5UGFydHM7XHJcbiAgfSBlbHNlIHtcclxuICAgIHJlbmFtZSA9IGZ1bmN0aW9uKGEpIHtcclxuICAgICAgcmV0dXJuIGE7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgaWYgKG9wdF9tb2RpZmllcikge1xyXG4gICAgcmV0dXJuIGNsYXNzTmFtZSArICctJyArIHJlbmFtZShvcHRfbW9kaWZpZXIpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXR1cm4gcmVuYW1lKGNsYXNzTmFtZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBTZXRzIHRoZSBtYXAgdG8gY2hlY2sgd2hlbiByZXR1cm5pbmcgYSB2YWx1ZSBmcm9tIGdvb2cuZ2V0Q3NzTmFtZSgpLiBFeGFtcGxlOlxyXG4gKiA8cHJlPlxyXG4gKiBnb29nLnNldENzc05hbWVNYXBwaW5nKHtcclxuICogICBcImdvb2dcIjogXCJhXCIsXHJcbiAqICAgXCJkaXNhYmxlZFwiOiBcImJcIixcclxuICogfSk7XHJcbiAqXHJcbiAqIHZhciB4ID0gZ29vZy5nZXRDc3NOYW1lKCdnb29nJyk7XHJcbiAqIC8vIFRoZSBmb2xsb3dpbmcgZXZhbHVhdGVzIHRvOiBcImEgYS1iXCIuXHJcbiAqIGdvb2cuZ2V0Q3NzTmFtZSgnZ29vZycpICsgJyAnICsgZ29vZy5nZXRDc3NOYW1lKHgsICdkaXNhYmxlZCcpXHJcbiAqIDwvcHJlPlxyXG4gKiBXaGVuIGRlY2xhcmVkIGFzIGEgbWFwIG9mIHN0cmluZyBsaXRlcmFscyB0byBzdHJpbmcgbGl0ZXJhbHMsIHRoZSBKU0NvbXBpbGVyXHJcbiAqIHdpbGwgcmVwbGFjZSBhbGwgY2FsbHMgdG8gZ29vZy5nZXRDc3NOYW1lKCkgdXNpbmcgdGhlIHN1cHBsaWVkIG1hcCBpZiB0aGVcclxuICogLS1jbG9zdXJlX3Bhc3MgZmxhZyBpcyBzZXQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7IU9iamVjdH0gbWFwcGluZyBBIG1hcCBvZiBzdHJpbmdzIHRvIHN0cmluZ3Mgd2hlcmUga2V5cyBhcmUgcG9zc2libGVcclxuICogICAgIGFyZ3VtZW50cyB0byBnb29nLmdldENzc05hbWUoKSBhbmQgdmFsdWVzIGFyZSB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXNcclxuICogICAgIHRoYXQgc2hvdWxkIGJlIHJldHVybmVkLlxyXG4gKiBAcGFyYW0ge3N0cmluZz19IG9wdF9zdHlsZSBUaGUgc3R5bGUgb2YgY3NzIG5hbWUgbWFwcGluZy4gVGhlcmUgYXJlIHR3byB2YWxpZFxyXG4gKiAgICAgb3B0aW9uczogJ0JZX1BBUlQnLCBhbmQgJ0JZX1dIT0xFJy5cclxuICogQHNlZSBnb29nLmdldENzc05hbWUgZm9yIGEgZGVzY3JpcHRpb24uXHJcbiAqL1xyXG5nb29nLnNldENzc05hbWVNYXBwaW5nID0gZnVuY3Rpb24obWFwcGluZywgb3B0X3N0eWxlKSB7XHJcbiAgZ29vZy5jc3NOYW1lTWFwcGluZ18gPSBtYXBwaW5nO1xyXG4gIGdvb2cuY3NzTmFtZU1hcHBpbmdTdHlsZV8gPSBvcHRfc3R5bGU7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIFRvIHVzZSBDU1MgcmVuYW1pbmcgaW4gY29tcGlsZWQgbW9kZSwgb25lIG9mIHRoZSBpbnB1dCBmaWxlcyBzaG91bGQgaGF2ZSBhXHJcbiAqIGNhbGwgdG8gZ29vZy5zZXRDc3NOYW1lTWFwcGluZygpIHdpdGggYW4gb2JqZWN0IGxpdGVyYWwgdGhhdCB0aGUgSlNDb21waWxlclxyXG4gKiBjYW4gZXh0cmFjdCBhbmQgdXNlIHRvIHJlcGxhY2UgYWxsIGNhbGxzIHRvIGdvb2cuZ2V0Q3NzTmFtZSgpLiBJbiB1bmNvbXBpbGVkXHJcbiAqIG1vZGUsIEphdmFTY3JpcHQgY29kZSBzaG91bGQgYmUgbG9hZGVkIGJlZm9yZSB0aGlzIGJhc2UuanMgZmlsZSB0aGF0IGRlY2xhcmVzXHJcbiAqIGEgZ2xvYmFsIHZhcmlhYmxlLCBDTE9TVVJFX0NTU19OQU1FX01BUFBJTkcsIHdoaWNoIGlzIHVzZWQgYmVsb3cuIFRoaXMgaXNcclxuICogdG8gZW5zdXJlIHRoYXQgdGhlIG1hcHBpbmcgaXMgbG9hZGVkIGJlZm9yZSBhbnkgY2FsbHMgdG8gZ29vZy5nZXRDc3NOYW1lKClcclxuICogYXJlIG1hZGUgaW4gdW5jb21waWxlZCBtb2RlLlxyXG4gKlxyXG4gKiBBIGhvb2sgZm9yIG92ZXJyaWRpbmcgdGhlIENTUyBuYW1lIG1hcHBpbmcuXHJcbiAqIEB0eXBlIHtPYmplY3R8dW5kZWZpbmVkfVxyXG4gKi9cclxuZ29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBQSU5HO1xyXG5cclxuXHJcbmlmICghQ09NUElMRUQgJiYgZ29vZy5nbG9iYWwuQ0xPU1VSRV9DU1NfTkFNRV9NQVBQSU5HKSB7XHJcbiAgLy8gVGhpcyBkb2VzIG5vdCBjYWxsIGdvb2cuc2V0Q3NzTmFtZU1hcHBpbmcoKSBiZWNhdXNlIHRoZSBKU0NvbXBpbGVyXHJcbiAgLy8gcmVxdWlyZXMgdGhhdCBnb29nLnNldENzc05hbWVNYXBwaW5nKCkgYmUgY2FsbGVkIHdpdGggYW4gb2JqZWN0IGxpdGVyYWwuXHJcbiAgZ29vZy5jc3NOYW1lTWFwcGluZ18gPSBnb29nLmdsb2JhbC5DTE9TVVJFX0NTU19OQU1FX01BUFBJTkc7XHJcbn1cclxuXHJcblxyXG4vKipcclxuICogQWJzdHJhY3QgaW1wbGVtZW50YXRpb24gb2YgZ29vZy5nZXRNc2cgZm9yIHVzZSB3aXRoIGxvY2FsaXplZCBtZXNzYWdlcy5cclxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciBUcmFuc2xhdGFibGUgc3RyaW5nLCBwbGFjZXMgaG9sZGVycyBpbiB0aGUgZm9ybSB7JGZvb30uXHJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3ZhbHVlcyBNYXAgb2YgcGxhY2UgaG9sZGVyIG5hbWUgdG8gdmFsdWUuXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gbWVzc2FnZSB3aXRoIHBsYWNlaG9sZGVycyBmaWxsZWQuXHJcbiAqL1xyXG5nb29nLmdldE1zZyA9IGZ1bmN0aW9uKHN0ciwgb3B0X3ZhbHVlcykge1xyXG4gIHZhciB2YWx1ZXMgPSBvcHRfdmFsdWVzIHx8IHt9O1xyXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZXMpIHtcclxuICAgIHZhciB2YWx1ZSA9ICgnJyArIHZhbHVlc1trZXldKS5yZXBsYWNlKC9cXCQvZywgJyQkJCQnKTtcclxuICAgIHN0ciA9IHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoJ1xcXFx7XFxcXCQnICsga2V5ICsgJ1xcXFx9JywgJ2dpJyksIHZhbHVlKTtcclxuICB9XHJcbiAgcmV0dXJuIHN0cjtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogRXhwb3NlcyBhbiB1bm9iZnVzY2F0ZWQgZ2xvYmFsIG5hbWVzcGFjZSBwYXRoIGZvciB0aGUgZ2l2ZW4gb2JqZWN0LlxyXG4gKiBOb3RlIHRoYXQgZmllbGRzIG9mIHRoZSBleHBvcnRlZCBvYmplY3QgKndpbGwqIGJlIG9iZnVzY2F0ZWQsXHJcbiAqIHVubGVzcyB0aGV5IGFyZSBleHBvcnRlZCBpbiB0dXJuIHZpYSB0aGlzIGZ1bmN0aW9uIG9yXHJcbiAqIGdvb2cuZXhwb3J0UHJvcGVydHlcclxuICpcclxuICogPHA+QWxzbyBoYW5keSBmb3IgbWFraW5nIHB1YmxpYyBpdGVtcyB0aGF0IGFyZSBkZWZpbmVkIGluIGFub255bW91c1xyXG4gKiBjbG9zdXJlcy5cclxuICpcclxuICogZXguIGdvb2cuZXhwb3J0U3ltYm9sKCdwdWJsaWMucGF0aC5Gb28nLCBGb28pO1xyXG4gKlxyXG4gKiBleC4gZ29vZy5leHBvcnRTeW1ib2woJ3B1YmxpYy5wYXRoLkZvby5zdGF0aWNGdW5jdGlvbicsXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICBGb28uc3RhdGljRnVuY3Rpb24pO1xyXG4gKiAgICAgcHVibGljLnBhdGguRm9vLnN0YXRpY0Z1bmN0aW9uKCk7XHJcbiAqXHJcbiAqIGV4LiBnb29nLmV4cG9ydFN5bWJvbCgncHVibGljLnBhdGguRm9vLnByb3RvdHlwZS5teU1ldGhvZCcsXHJcbiAqICAgICAgICAgICAgICAgICAgICAgICBGb28ucHJvdG90eXBlLm15TWV0aG9kKTtcclxuICogICAgIG5ldyBwdWJsaWMucGF0aC5Gb28oKS5teU1ldGhvZCgpO1xyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcHVibGljUGF0aCBVbm9iZnVzY2F0ZWQgbmFtZSB0byBleHBvcnQuXHJcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IE9iamVjdCB0aGUgbmFtZSBzaG91bGQgcG9pbnQgdG8uXHJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X29iamVjdFRvRXhwb3J0VG8gVGhlIG9iamVjdCB0byBhZGQgdGhlIHBhdGggdG87IGRlZmF1bHRcclxuICogICAgIGlzIHxnb29nLmdsb2JhbHwuXHJcbiAqL1xyXG5nb29nLmV4cG9ydFN5bWJvbCA9IGZ1bmN0aW9uKHB1YmxpY1BhdGgsIG9iamVjdCwgb3B0X29iamVjdFRvRXhwb3J0VG8pIHtcclxuICBnb29nLmV4cG9ydFBhdGhfKHB1YmxpY1BhdGgsIG9iamVjdCwgb3B0X29iamVjdFRvRXhwb3J0VG8pO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBFeHBvcnRzIGEgcHJvcGVydHkgdW5vYmZ1c2NhdGVkIGludG8gdGhlIG9iamVjdCdzIG5hbWVzcGFjZS5cclxuICogZXguIGdvb2cuZXhwb3J0UHJvcGVydHkoRm9vLCAnc3RhdGljRnVuY3Rpb24nLCBGb28uc3RhdGljRnVuY3Rpb24pO1xyXG4gKiBleC4gZ29vZy5leHBvcnRQcm9wZXJ0eShGb28ucHJvdG90eXBlLCAnbXlNZXRob2QnLCBGb28ucHJvdG90eXBlLm15TWV0aG9kKTtcclxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBPYmplY3Qgd2hvc2Ugc3RhdGljIHByb3BlcnR5IGlzIGJlaW5nIGV4cG9ydGVkLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcHVibGljTmFtZSBVbm9iZnVzY2F0ZWQgbmFtZSB0byBleHBvcnQuXHJcbiAqIEBwYXJhbSB7Kn0gc3ltYm9sIE9iamVjdCB0aGUgbmFtZSBzaG91bGQgcG9pbnQgdG8uXHJcbiAqL1xyXG5nb29nLmV4cG9ydFByb3BlcnR5ID0gZnVuY3Rpb24ob2JqZWN0LCBwdWJsaWNOYW1lLCBzeW1ib2wpIHtcclxuICBvYmplY3RbcHVibGljTmFtZV0gPSBzeW1ib2w7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cclxuICpcclxuICogVXNhZ2U6XHJcbiAqIDxwcmU+XHJcbiAqIGZ1bmN0aW9uIFBhcmVudENsYXNzKGEsIGIpIHsgfVxyXG4gKiBQYXJlbnRDbGFzcy5wcm90b3R5cGUuZm9vID0gZnVuY3Rpb24oYSkgeyB9XHJcbiAqXHJcbiAqIGZ1bmN0aW9uIENoaWxkQ2xhc3MoYSwgYiwgYykge1xyXG4gKiAgIGdvb2cuYmFzZSh0aGlzLCBhLCBiKTtcclxuICogfVxyXG4gKiBnb29nLmluaGVyaXRzKENoaWxkQ2xhc3MsIFBhcmVudENsYXNzKTtcclxuICpcclxuICogdmFyIGNoaWxkID0gbmV3IENoaWxkQ2xhc3MoJ2EnLCAnYicsICdzZWUnKTtcclxuICogY2hpbGQuZm9vKCk7IC8vIHdvcmtzXHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBJbiBhZGRpdGlvbiwgYSBzdXBlcmNsYXNzJyBpbXBsZW1lbnRhdGlvbiBvZiBhIG1ldGhvZCBjYW4gYmUgaW52b2tlZFxyXG4gKiBhcyBmb2xsb3dzOlxyXG4gKlxyXG4gKiA8cHJlPlxyXG4gKiBDaGlsZENsYXNzLnByb3RvdHlwZS5mb28gPSBmdW5jdGlvbihhKSB7XHJcbiAqICAgQ2hpbGRDbGFzcy5zdXBlckNsYXNzXy5mb28uY2FsbCh0aGlzLCBhKTtcclxuICogICAvLyBvdGhlciBjb2RlXHJcbiAqIH07XHJcbiAqIDwvcHJlPlxyXG4gKlxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGlsZEN0b3IgQ2hpbGQgY2xhc3MuXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcmVudEN0b3IgUGFyZW50IGNsYXNzLlxyXG4gKi9cclxuZ29vZy5pbmhlcml0cyA9IGZ1bmN0aW9uKGNoaWxkQ3RvciwgcGFyZW50Q3Rvcikge1xyXG4gIC8qKiBAY29uc3RydWN0b3IgKi9cclxuICBmdW5jdGlvbiB0ZW1wQ3RvcigpIHt9O1xyXG4gIHRlbXBDdG9yLnByb3RvdHlwZSA9IHBhcmVudEN0b3IucHJvdG90eXBlO1xyXG4gIGNoaWxkQ3Rvci5zdXBlckNsYXNzXyA9IHBhcmVudEN0b3IucHJvdG90eXBlO1xyXG4gIGNoaWxkQ3Rvci5wcm90b3R5cGUgPSBuZXcgdGVtcEN0b3IoKTtcclxuICBjaGlsZEN0b3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY2hpbGRDdG9yO1xyXG59O1xyXG5cclxuXHJcbi8qKlxyXG4gKiBDYWxsIHVwIHRvIHRoZSBzdXBlcmNsYXNzLlxyXG4gKlxyXG4gKiBJZiB0aGlzIGlzIGNhbGxlZCBmcm9tIGEgY29uc3RydWN0b3IsIHRoZW4gdGhpcyBjYWxscyB0aGUgc3VwZXJjbGFzc1xyXG4gKiBjb250cnVjdG9yIHdpdGggYXJndW1lbnRzIDEtTi5cclxuICpcclxuICogSWYgdGhpcyBpcyBjYWxsZWQgZnJvbSBhIHByb3RvdHlwZSBtZXRob2QsIHRoZW4geW91IG11c3QgcGFzc1xyXG4gKiB0aGUgbmFtZSBvZiB0aGUgbWV0aG9kIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQgdG8gdGhpcyBmdW5jdGlvbi4gSWZcclxuICogeW91IGRvIG5vdCwgeW91IHdpbGwgZ2V0IGEgcnVudGltZSBlcnJvci4gVGhpcyBjYWxscyB0aGUgc3VwZXJjbGFzcydcclxuICogbWV0aG9kIHdpdGggYXJndW1lbnRzIDItTi5cclxuICpcclxuICogVGhpcyBmdW5jdGlvbiBvbmx5IHdvcmtzIGlmIHlvdSB1c2UgZ29vZy5pbmhlcml0cyB0byBleHByZXNzXHJcbiAqIGluaGVyaXRhbmNlIHJlbGF0aW9uc2hpcHMgYmV0d2VlbiB5b3VyIGNsYXNzZXMuXHJcbiAqXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgYSBjb21waWxlciBwcmltaXRpdmUuIEF0IGNvbXBpbGUtdGltZSwgdGhlXHJcbiAqIGNvbXBpbGVyIHdpbGwgZG8gbWFjcm8gZXhwYW5zaW9uIHRvIHJlbW92ZSBhIGxvdCBvZlxyXG4gKiB0aGUgZXh0cmEgb3ZlcmhlYWQgdGhhdCB0aGlzIGZ1bmN0aW9uIGludHJvZHVjZXMuIFRoZSBjb21waWxlclxyXG4gKiB3aWxsIGFsc28gZW5mb3JjZSBhIGxvdCBvZiB0aGUgYXNzdW1wdGlvbnMgdGhhdCB0aGlzIGZ1bmN0aW9uXHJcbiAqIG1ha2VzLCBhbmQgdHJlYXQgaXQgYXMgYSBjb21waWxlciBlcnJvciBpZiB5b3UgYnJlYWsgdGhlbS5cclxuICpcclxuICogQHBhcmFtIHshT2JqZWN0fSBtZSBTaG91bGQgYWx3YXlzIGJlIFwidGhpc1wiLlxyXG4gKiBAcGFyYW0geyo9fSBvcHRfbWV0aG9kTmFtZSBUaGUgbWV0aG9kIG5hbWUgaWYgY2FsbGluZyBhIHN1cGVyIG1ldGhvZC5cclxuICogQHBhcmFtIHsuLi4qfSB2YXJfYXJncyBUaGUgcmVzdCBvZiB0aGUgYXJndW1lbnRzLlxyXG4gKiBAcmV0dXJuIHsqfSBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBzdXBlcmNsYXNzIG1ldGhvZC5cclxuICovXHJcbmdvb2cuYmFzZSA9IGZ1bmN0aW9uKG1lLCBvcHRfbWV0aG9kTmFtZSwgdmFyX2FyZ3MpIHtcclxuICB2YXIgY2FsbGVyID0gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXI7XHJcbiAgaWYgKGNhbGxlci5zdXBlckNsYXNzXykge1xyXG4gICAgLy8gVGhpcyBpcyBhIGNvbnN0cnVjdG9yLiBDYWxsIHRoZSBzdXBlcmNsYXNzIGNvbnN0cnVjdG9yLlxyXG4gICAgcmV0dXJuIGNhbGxlci5zdXBlckNsYXNzXy5jb25zdHJ1Y3Rvci5hcHBseShcclxuICAgICAgICBtZSwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XHJcbiAgfVxyXG5cclxuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XHJcbiAgdmFyIGZvdW5kQ2FsbGVyID0gZmFsc2U7XHJcbiAgZm9yICh2YXIgY3RvciA9IG1lLmNvbnN0cnVjdG9yO1xyXG4gICAgICAgY3RvcjsgY3RvciA9IGN0b3Iuc3VwZXJDbGFzc18gJiYgY3Rvci5zdXBlckNsYXNzXy5jb25zdHJ1Y3Rvcikge1xyXG4gICAgaWYgKGN0b3IucHJvdG90eXBlW29wdF9tZXRob2ROYW1lXSA9PT0gY2FsbGVyKSB7XHJcbiAgICAgIGZvdW5kQ2FsbGVyID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoZm91bmRDYWxsZXIpIHtcclxuICAgICAgcmV0dXJuIGN0b3IucHJvdG90eXBlW29wdF9tZXRob2ROYW1lXS5hcHBseShtZSwgYXJncyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBJZiB3ZSBkaWQgbm90IGZpbmQgdGhlIGNhbGxlciBpbiB0aGUgcHJvdG90eXBlIGNoYWluLFxyXG4gIC8vIHRoZW4gb25lIG9mIHR3byB0aGluZ3MgaGFwcGVuZWQ6XHJcbiAgLy8gMSkgVGhlIGNhbGxlciBpcyBhbiBpbnN0YW5jZSBtZXRob2QuXHJcbiAgLy8gMikgVGhpcyBtZXRob2Qgd2FzIG5vdCBjYWxsZWQgYnkgdGhlIHJpZ2h0IGNhbGxlci5cclxuICBpZiAobWVbb3B0X21ldGhvZE5hbWVdID09PSBjYWxsZXIpIHtcclxuICAgIHJldHVybiBtZS5jb25zdHJ1Y3Rvci5wcm90b3R5cGVbb3B0X21ldGhvZE5hbWVdLmFwcGx5KG1lLCBhcmdzKTtcclxuICB9IGVsc2Uge1xyXG4gICAgdGhyb3cgRXJyb3IoXHJcbiAgICAgICAgJ2dvb2cuYmFzZSBjYWxsZWQgZnJvbSBhIG1ldGhvZCBvZiBvbmUgbmFtZSAnICtcclxuICAgICAgICAndG8gYSBtZXRob2Qgb2YgYSBkaWZmZXJlbnQgbmFtZScpO1xyXG4gIH1cclxufTtcclxuXHJcblxyXG4vKipcclxuICogQWxsb3cgZm9yIGFsaWFzaW5nIHdpdGhpbiBzY29wZSBmdW5jdGlvbnMuICBUaGlzIGZ1bmN0aW9uIGV4aXN0cyBmb3JcclxuICogdW5jb21waWxlZCBjb2RlIC0gaW4gY29tcGlsZWQgY29kZSB0aGUgY2FsbHMgd2lsbCBiZSBpbmxpbmVkIGFuZCB0aGVcclxuICogYWxpYXNlcyBhcHBsaWVkLiAgSW4gdW5jb21waWxlZCBjb2RlIHRoZSBmdW5jdGlvbiBpcyBzaW1wbHkgcnVuIHNpbmNlIHRoZVxyXG4gKiBhbGlhc2VzIGFzIHdyaXR0ZW4gYXJlIHZhbGlkIEphdmFTY3JpcHQuXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKX0gZm4gRnVuY3Rpb24gdG8gY2FsbC4gIFRoaXMgZnVuY3Rpb24gY2FuIGNvbnRhaW4gYWxpYXNlc1xyXG4gKiAgICAgdG8gbmFtZXNwYWNlcyAoZS5nLiBcInZhciBkb20gPSBnb29nLmRvbVwiKSBvciBjbGFzc2VzXHJcbiAqICAgIChlLmcuIFwidmFyIFRpbWVyID0gZ29vZy5UaW1lclwiKS5cclxuICovXHJcbmdvb2cuc2NvcGUgPSBmdW5jdGlvbihmbikge1xyXG4gIGZuLmNhbGwoZ29vZy5nbG9iYWwpO1xyXG59O1xyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBkZWZpbmVzXHJcbiAqL1xyXG5cclxuZ29vZy5wcm92aWRlKCdVU0VfVFlQRURBUlJBWScpO1xyXG5cclxuLy8gU2FmYXJpIOOBjCB0eXBlb2YgVWludDhBcnJheSA9PT0gJ29iamVjdCcg44Gr44Gq44KL44Gf44KB44CBXHJcbi8vIOacquWumue+qeOBi+WQpuOBi+OBpyBUeXBlZCBBcnJheSDjga7kvb/nlKjjgpLmsbrlrprjgZnjgotcclxuXHJcbi8qKiBAY29uc3Qge2Jvb2xlYW59IHVzZSB0eXBlZCBhcnJheSBmbGFnLiAqL1xyXG52YXIgVVNFX1RZUEVEQVJSQVkgPVxyXG4gICh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXHJcbiAgKHR5cGVvZiBVaW50MTZBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXHJcbiAgKHR5cGVvZiBVaW50MzJBcnJheSAhPT0gJ3VuZGVmaW5lZCcpICYmXHJcbiAgKHR5cGVvZiBEYXRhVmlldyAhPT0gJ3VuZGVmaW5lZCcpO1xyXG4iLCIvKipcclxuICogQGZpbGVvdmVydmlldyBiaXQg5Y2Y5L2N44Gn44Gu5pu444GN6L6844G/5a6f6KOFLlxyXG4gKi9cclxuZ29vZy5wcm92aWRlKCdabGliLkJpdFN0cmVhbScpO1xyXG5cclxuZ29vZy5yZXF1aXJlKCdVU0VfVFlQRURBUlJBWScpO1xyXG5cclxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcclxuXHJcbi8qKlxyXG4gKiDjg5Pjg4Pjg4jjgrnjg4jjg6rjg7zjg6BcclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7IShBcnJheXxVaW50OEFycmF5KT19IGJ1ZmZlciBvdXRwdXQgYnVmZmVyLlxyXG4gKiBAcGFyYW0ge251bWJlcj19IGJ1ZmZlclBvc2l0aW9uIHN0YXJ0IGJ1ZmZlciBwb2ludGVyLlxyXG4gKi9cclxuWmxpYi5CaXRTdHJlYW0gPSBmdW5jdGlvbihidWZmZXIsIGJ1ZmZlclBvc2l0aW9uKSB7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGJ1ZmZlciBpbmRleC4gKi9cclxuICB0aGlzLmluZGV4ID0gdHlwZW9mIGJ1ZmZlclBvc2l0aW9uID09PSAnbnVtYmVyJyA/IGJ1ZmZlclBvc2l0aW9uIDogMDtcclxuICAvKiogQHR5cGUge251bWJlcn0gYml0IGluZGV4LiAqL1xyXG4gIHRoaXMuYml0aW5kZXggPSAwO1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheXxVaW50OEFycmF5KX0gYml0LXN0cmVhbSBvdXRwdXQgYnVmZmVyLiAqL1xyXG4gIHRoaXMuYnVmZmVyID0gYnVmZmVyIGluc3RhbmNlb2YgKFVTRV9UWVBFREFSUkFZID8gVWludDhBcnJheSA6IEFycmF5KSA/XHJcbiAgICBidWZmZXIgOlxyXG4gICAgbmV3IChVU0VfVFlQRURBUlJBWSA/IFVpbnQ4QXJyYXkgOiBBcnJheSkoWmxpYi5CaXRTdHJlYW0uRGVmYXVsdEJsb2NrU2l6ZSk7XHJcblxyXG4gIC8vIOWFpeWKm+OBleOCjOOBnyBpbmRleCDjgYzotrPjgorjgarjgYvjgaPjgZ/jgonmi6HlvLXjgZnjgovjgYzjgIHlgI3jgavjgZfjgabjgoLjg4Djg6HjgarjgonkuI3mraPjgajjgZnjgotcclxuICBpZiAodGhpcy5idWZmZXIubGVuZ3RoICogMiA8PSB0aGlzLmluZGV4KSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGluZGV4XCIpO1xyXG4gIH0gZWxzZSBpZiAodGhpcy5idWZmZXIubGVuZ3RoIDw9IHRoaXMuaW5kZXgpIHtcclxuICAgIHRoaXMuZXhwYW5kQnVmZmVyKCk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIOODh+ODleOCqeODq+ODiOODluODreODg+OCr+OCteOCpOOCui5cclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xyXG5abGliLkJpdFN0cmVhbS5EZWZhdWx0QmxvY2tTaXplID0gMHg4MDAwO1xyXG5cclxuLyoqXHJcbiAqIGV4cGFuZCBidWZmZXIuXHJcbiAqIEByZXR1cm4geyEoQXJyYXl8VWludDhBcnJheSl9IG5ldyBidWZmZXIuXHJcbiAqL1xyXG5abGliLkJpdFN0cmVhbS5wcm90b3R5cGUuZXhwYW5kQnVmZmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5fFVpbnQ4QXJyYXkpfSBvbGQgYnVmZmVyLiAqL1xyXG4gIHZhciBvbGRidWYgPSB0aGlzLmJ1ZmZlcjtcclxuICAvKiogQHR5cGUge251bWJlcn0gbG9vcCBjb3VudGVyLiAqL1xyXG4gIHZhciBpO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBsb29wIGxpbWl0ZXIuICovXHJcbiAgdmFyIGlsID0gb2xkYnVmLmxlbmd0aDtcclxuICAvKiogQHR5cGUgeyEoQXJyYXl8VWludDhBcnJheSl9IG5ldyBidWZmZXIuICovXHJcbiAgdmFyIGJ1ZmZlciA9XHJcbiAgICBuZXcgKFVTRV9UWVBFREFSUkFZID8gVWludDhBcnJheSA6IEFycmF5KShpbCA8PCAxKTtcclxuXHJcbiAgLy8gY29weSBidWZmZXJcclxuICBpZiAoVVNFX1RZUEVEQVJSQVkpIHtcclxuICAgIGJ1ZmZlci5zZXQob2xkYnVmKTtcclxuICB9IGVsc2Uge1xyXG4gICAgLy8gWFhYOiBsb29wIHVucm9sbGluZ1xyXG4gICAgZm9yIChpID0gMDsgaSA8IGlsOyArK2kpIHtcclxuICAgICAgYnVmZmVyW2ldID0gb2xkYnVmW2ldO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuICh0aGlzLmJ1ZmZlciA9IGJ1ZmZlcik7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIOaVsOWApOOCkuODk+ODg+ODiOOBp+aMh+WumuOBl+OBn+aVsOOBoOOBkeabuOOBjei+vOOCgC5cclxuICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciDmm7jjgY3ovrzjgoDmlbDlgKQuXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIOabuOOBjei+vOOCgOODk+ODg+ODiOaVsC5cclxuICogQHBhcmFtIHtib29sZWFuPX0gcmV2ZXJzZSDpgIbpoIbjgavmm7jjgY3ovrzjgoDjgarjgonjgbAgdHJ1ZS5cclxuICovXHJcblpsaWIuQml0U3RyZWFtLnByb3RvdHlwZS53cml0ZUJpdHMgPSBmdW5jdGlvbihudW1iZXIsIG4sIHJldmVyc2UpIHtcclxuICB2YXIgYnVmZmVyID0gdGhpcy5idWZmZXI7XHJcbiAgdmFyIGluZGV4ID0gdGhpcy5pbmRleDtcclxuICB2YXIgYml0aW5kZXggPSB0aGlzLmJpdGluZGV4O1xyXG5cclxuICAvKiogQHR5cGUge251bWJlcn0gY3VycmVudCBvY3RldC4gKi9cclxuICB2YXIgY3VycmVudCA9IGJ1ZmZlcltpbmRleF07XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGxvb3AgY291bnRlci4gKi9cclxuICB2YXIgaTtcclxuXHJcbiAgLyoqXHJcbiAgICogMzItYml0IOaVtOaVsOOBruODk+ODg+ODiOmghuOCkumAhuOBq+OBmeOCi1xyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBuIDMyLWJpdCBpbnRlZ2VyLlxyXG4gICAqIEByZXR1cm4ge251bWJlcn0gcmV2ZXJzZWQgMzItYml0IGludGVnZXIuXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBmdW5jdGlvbiByZXYzMl8obikge1xyXG4gICAgcmV0dXJuIChabGliLkJpdFN0cmVhbS5SZXZlcnNlVGFibGVbbiAmIDB4RkZdIDw8IDI0KSB8XHJcbiAgICAgIChabGliLkJpdFN0cmVhbS5SZXZlcnNlVGFibGVbbiA+Pj4gOCAmIDB4RkZdIDw8IDE2KSB8XHJcbiAgICAgIChabGliLkJpdFN0cmVhbS5SZXZlcnNlVGFibGVbbiA+Pj4gMTYgJiAweEZGXSA8PCA4KSB8XHJcbiAgICAgIFpsaWIuQml0U3RyZWFtLlJldmVyc2VUYWJsZVtuID4+PiAyNCAmIDB4RkZdO1xyXG4gIH1cclxuXHJcbiAgaWYgKHJldmVyc2UgJiYgbiA+IDEpIHtcclxuICAgIG51bWJlciA9IG4gPiA4ID9cclxuICAgICAgcmV2MzJfKG51bWJlcikgPj4gKDMyIC0gbikgOlxyXG4gICAgICBabGliLkJpdFN0cmVhbS5SZXZlcnNlVGFibGVbbnVtYmVyXSA+PiAoOCAtIG4pO1xyXG4gIH1cclxuXHJcbiAgLy8gQnl0ZSDlooPnlYzjgpLotoXjgYjjgarjgYTjgajjgY1cclxuICBpZiAobiArIGJpdGluZGV4IDwgOCkge1xyXG4gICAgY3VycmVudCA9IChjdXJyZW50IDw8IG4pIHwgbnVtYmVyO1xyXG4gICAgYml0aW5kZXggKz0gbjtcclxuICAvLyBCeXRlIOWig+eVjOOCkui2heOBiOOCi+OBqOOBjVxyXG4gIH0gZWxzZSB7XHJcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XHJcbiAgICAgIGN1cnJlbnQgPSAoY3VycmVudCA8PCAxKSB8ICgobnVtYmVyID4+IG4gLSBpIC0gMSkgJiAxKTtcclxuXHJcbiAgICAgIC8vIG5leHQgYnl0ZVxyXG4gICAgICBpZiAoKytiaXRpbmRleCA9PT0gOCkge1xyXG4gICAgICAgIGJpdGluZGV4ID0gMDtcclxuICAgICAgICBidWZmZXJbaW5kZXgrK10gPSBabGliLkJpdFN0cmVhbS5SZXZlcnNlVGFibGVbY3VycmVudF07XHJcbiAgICAgICAgY3VycmVudCA9IDA7XHJcblxyXG4gICAgICAgIC8vIGV4cGFuZFxyXG4gICAgICAgIGlmIChpbmRleCA9PT0gYnVmZmVyLmxlbmd0aCkge1xyXG4gICAgICAgICAgYnVmZmVyID0gdGhpcy5leHBhbmRCdWZmZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgYnVmZmVyW2luZGV4XSA9IGN1cnJlbnQ7XHJcblxyXG4gIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xyXG4gIHRoaXMuYml0aW5kZXggPSBiaXRpbmRleDtcclxuICB0aGlzLmluZGV4ID0gaW5kZXg7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIOOCueODiOODquODvOODoOOBrue1guerr+WHpueQhuOCkuihjOOBhlxyXG4gKiBAcmV0dXJuIHshKEFycmF5fFVpbnQ4QXJyYXkpfSDntYLnq6/lh6bnkIblvozjga7jg5Djg4Pjg5XjgqHjgpIgYnl0ZSBhcnJheSDjgafov5TjgZkuXHJcbiAqL1xyXG5abGliLkJpdFN0cmVhbS5wcm90b3R5cGUuZmluaXNoID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyO1xyXG4gIHZhciBpbmRleCA9IHRoaXMuaW5kZXg7XHJcblxyXG4gIC8qKiBAdHlwZSB7IShBcnJheXxVaW50OEFycmF5KX0gb3V0cHV0IGJ1ZmZlci4gKi9cclxuICB2YXIgb3V0cHV0O1xyXG5cclxuICAvLyBiaXRpbmRleCDjgYwgMCDjga7mmYLjga/kvZnliIbjgasgaW5kZXgg44GM6YCy44KT44Gn44GE44KL54q25oWLXHJcbiAgaWYgKHRoaXMuYml0aW5kZXggPiAwKSB7XHJcbiAgICBidWZmZXJbaW5kZXhdIDw8PSA4IC0gdGhpcy5iaXRpbmRleDtcclxuICAgIGJ1ZmZlcltpbmRleF0gPSBabGliLkJpdFN0cmVhbS5SZXZlcnNlVGFibGVbYnVmZmVyW2luZGV4XV07XHJcbiAgICBpbmRleCsrO1xyXG4gIH1cclxuXHJcbiAgLy8gYXJyYXkgdHJ1bmNhdGlvblxyXG4gIGlmIChVU0VfVFlQRURBUlJBWSkge1xyXG4gICAgb3V0cHV0ID0gYnVmZmVyLnN1YmFycmF5KDAsIGluZGV4KTtcclxuICB9IGVsc2Uge1xyXG4gICAgYnVmZmVyLmxlbmd0aCA9IGluZGV4O1xyXG4gICAgb3V0cHV0ID0gYnVmZmVyO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dHB1dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAwLTI1NSDjga7jg5Pjg4Pjg4jpoIbjgpLlj43ou6LjgZfjgZ/jg4bjg7zjg5bjg6tcclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHshKFVpbnQ4QXJyYXl8QXJyYXkuPG51bWJlcj4pfVxyXG4gKi9cclxuWmxpYi5CaXRTdHJlYW0uUmV2ZXJzZVRhYmxlID0gKGZ1bmN0aW9uKHRhYmxlKSB7XHJcbiAgcmV0dXJuIHRhYmxlO1xyXG59KSgoZnVuY3Rpb24oKSB7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5fFVpbnQ4QXJyYXkpfSByZXZlcnNlIHRhYmxlLiAqL1xyXG4gIHZhciB0YWJsZSA9IG5ldyAoVVNFX1RZUEVEQVJSQVkgPyBVaW50OEFycmF5IDogQXJyYXkpKDI1Nik7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGxvb3AgY291bnRlci4gKi9cclxuICB2YXIgaTtcclxuXHJcbiAgLy8gZ2VuZXJhdGVcclxuICBmb3IgKGkgPSAwOyBpIDwgMjU2OyArK2kpIHtcclxuICAgIHRhYmxlW2ldID0gKGZ1bmN0aW9uKG4pIHtcclxuICAgICAgdmFyIHIgPSBuO1xyXG4gICAgICB2YXIgcyA9IDc7XHJcblxyXG4gICAgICBmb3IgKG4gPj4+PSAxOyBuOyBuID4+Pj0gMSkge1xyXG4gICAgICAgIHIgPDw9IDE7XHJcbiAgICAgICAgciB8PSBuICYgMTtcclxuICAgICAgICAtLXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiAociA8PCBzICYgMHhmZikgPj4+IDA7XHJcbiAgICB9KShpKTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0YWJsZTtcclxufSkoKSk7XHJcblxyXG5cclxuLy8gZW5kIG9mIHNjb3BlXHJcbn0pO1xyXG5cclxuLyogdmltOnNldCBleHBhbmR0YWIgdHM9MiBzdz0yIHR3PTgwOiAqL1xyXG4iLCIvKipcclxuICogQGZpbGVvdmVydmlldyBDUkMzMiDlrp/oo4UuXHJcbiAqL1xyXG5nb29nLnByb3ZpZGUoJ1psaWIuQ1JDMzInKTtcclxuXHJcbmdvb2cucmVxdWlyZSgnVVNFX1RZUEVEQVJSQVknKTtcclxuXHJcbi8qKiBAZGVmaW5lIHtib29sZWFufSAqL1xyXG52YXIgWkxJQl9DUkMzMl9DT01QQUNUID0gZmFsc2U7XHJcblxyXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xyXG5cclxuLyoqXHJcbiAqIENSQzMyIOODj+ODg+OCt+ODpeWApOOCkuWPluW+l1xyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGRhdGEgZGF0YSBieXRlIGFycmF5LlxyXG4gKiBAcGFyYW0ge251bWJlcj19IHBvcyBkYXRhIHBvc2l0aW9uLlxyXG4gKiBAcGFyYW0ge251bWJlcj19IGxlbmd0aCBkYXRhIGxlbmd0aC5cclxuICogQHJldHVybiB7bnVtYmVyfSBDUkMzMi5cclxuICovXHJcblpsaWIuQ1JDMzIuY2FsYyA9IGZ1bmN0aW9uKGRhdGEsIHBvcywgbGVuZ3RoKSB7XHJcbiAgcmV0dXJuIFpsaWIuQ1JDMzIudXBkYXRlKGRhdGEsIDAsIHBvcywgbGVuZ3RoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBDUkMzMuODj+ODg+OCt+ODpeWApOOCkuabtOaWsFxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGRhdGEgZGF0YSBieXRlIGFycmF5LlxyXG4gKiBAcGFyYW0ge251bWJlcn0gY3JjIENSQzMyLlxyXG4gKiBAcGFyYW0ge251bWJlcj19IHBvcyBkYXRhIHBvc2l0aW9uLlxyXG4gKiBAcGFyYW0ge251bWJlcj19IGxlbmd0aCBkYXRhIGxlbmd0aC5cclxuICogQHJldHVybiB7bnVtYmVyfSBDUkMzMi5cclxuICovXHJcblpsaWIuQ1JDMzIudXBkYXRlID0gZnVuY3Rpb24oZGF0YSwgY3JjLCBwb3MsIGxlbmd0aCkge1xyXG4gIHZhciB0YWJsZSA9IFpsaWIuQ1JDMzIuVGFibGU7XHJcbiAgdmFyIGkgPSAodHlwZW9mIHBvcyA9PT0gJ251bWJlcicpID8gcG9zIDogKHBvcyA9IDApO1xyXG4gIHZhciBpbCA9ICh0eXBlb2YgbGVuZ3RoID09PSAnbnVtYmVyJykgPyBsZW5ndGggOiBkYXRhLmxlbmd0aDtcclxuXHJcbiAgY3JjIF49IDB4ZmZmZmZmZmY7XHJcblxyXG4gIC8vIGxvb3AgdW5yb2xsaW5nIGZvciBwZXJmb3JtYW5jZVxyXG4gIGZvciAoaSA9IGlsICYgNzsgaS0tOyArK3Bvcykge1xyXG4gICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0YWJsZVsoY3JjIF4gZGF0YVtwb3NdKSAmIDB4ZmZdO1xyXG4gIH1cclxuICBmb3IgKGkgPSBpbCA+PiAzOyBpLS07IHBvcyArPSA4KSB7XHJcbiAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRhYmxlWyhjcmMgXiBkYXRhW3BvcyAgICBdKSAmIDB4ZmZdO1xyXG4gICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0YWJsZVsoY3JjIF4gZGF0YVtwb3MgKyAxXSkgJiAweGZmXTtcclxuICAgIGNyYyA9IChjcmMgPj4+IDgpIF4gdGFibGVbKGNyYyBeIGRhdGFbcG9zICsgMl0pICYgMHhmZl07XHJcbiAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRhYmxlWyhjcmMgXiBkYXRhW3BvcyArIDNdKSAmIDB4ZmZdO1xyXG4gICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0YWJsZVsoY3JjIF4gZGF0YVtwb3MgKyA0XSkgJiAweGZmXTtcclxuICAgIGNyYyA9IChjcmMgPj4+IDgpIF4gdGFibGVbKGNyYyBeIGRhdGFbcG9zICsgNV0pICYgMHhmZl07XHJcbiAgICBjcmMgPSAoY3JjID4+PiA4KSBeIHRhYmxlWyhjcmMgXiBkYXRhW3BvcyArIDZdKSAmIDB4ZmZdO1xyXG4gICAgY3JjID0gKGNyYyA+Pj4gOCkgXiB0YWJsZVsoY3JjIF4gZGF0YVtwb3MgKyA3XSkgJiAweGZmXTtcclxuICB9XHJcblxyXG4gIHJldHVybiAoY3JjIF4gMHhmZmZmZmZmZikgPj4+IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtudW1iZXJ9IG51bVxyXG4gKiBAcGFyYW0ge251bWJlcn0gY3JjXHJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XHJcbiAqL1xyXG5abGliLkNSQzMyLnNpbmdsZSA9IGZ1bmN0aW9uKG51bSwgY3JjKSB7XHJcbiAgcmV0dXJuIChabGliLkNSQzMyLlRhYmxlWyhudW0gXiBjcmMpICYgMHhmZl0gXiAobnVtID4+PiA4KSkgPj4+IDA7XHJcbn07XHJcblxyXG4vKipcclxuICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxyXG4gKiBAY29uc3RcclxuICogQHByaXZhdGVcclxuICovXHJcblpsaWIuQ1JDMzIuVGFibGVfID0gW1xyXG4gIDB4MDAwMDAwMDAsIDB4NzcwNzMwOTYsIDB4ZWUwZTYxMmMsIDB4OTkwOTUxYmEsIDB4MDc2ZGM0MTksIDB4NzA2YWY0OGYsXHJcbiAgMHhlOTYzYTUzNSwgMHg5ZTY0OTVhMywgMHgwZWRiODgzMiwgMHg3OWRjYjhhNCwgMHhlMGQ1ZTkxZSwgMHg5N2QyZDk4OCxcclxuICAweDA5YjY0YzJiLCAweDdlYjE3Y2JkLCAweGU3YjgyZDA3LCAweDkwYmYxZDkxLCAweDFkYjcxMDY0LCAweDZhYjAyMGYyLFxyXG4gIDB4ZjNiOTcxNDgsIDB4ODRiZTQxZGUsIDB4MWFkYWQ0N2QsIDB4NmRkZGU0ZWIsIDB4ZjRkNGI1NTEsIDB4ODNkMzg1YzcsXHJcbiAgMHgxMzZjOTg1NiwgMHg2NDZiYThjMCwgMHhmZDYyZjk3YSwgMHg4YTY1YzllYywgMHgxNDAxNWM0ZiwgMHg2MzA2NmNkOSxcclxuICAweGZhMGYzZDYzLCAweDhkMDgwZGY1LCAweDNiNmUyMGM4LCAweDRjNjkxMDVlLCAweGQ1NjA0MWU0LCAweGEyNjc3MTcyLFxyXG4gIDB4M2MwM2U0ZDEsIDB4NGIwNGQ0NDcsIDB4ZDIwZDg1ZmQsIDB4YTUwYWI1NmIsIDB4MzViNWE4ZmEsIDB4NDJiMjk4NmMsXHJcbiAgMHhkYmJiYzlkNiwgMHhhY2JjZjk0MCwgMHgzMmQ4NmNlMywgMHg0NWRmNWM3NSwgMHhkY2Q2MGRjZiwgMHhhYmQxM2Q1OSxcclxuICAweDI2ZDkzMGFjLCAweDUxZGUwMDNhLCAweGM4ZDc1MTgwLCAweGJmZDA2MTE2LCAweDIxYjRmNGI1LCAweDU2YjNjNDIzLFxyXG4gIDB4Y2ZiYTk1OTksIDB4YjhiZGE1MGYsIDB4MjgwMmI4OWUsIDB4NWYwNTg4MDgsIDB4YzYwY2Q5YjIsIDB4YjEwYmU5MjQsXHJcbiAgMHgyZjZmN2M4NywgMHg1ODY4NGMxMSwgMHhjMTYxMWRhYiwgMHhiNjY2MmQzZCwgMHg3NmRjNDE5MCwgMHgwMWRiNzEwNixcclxuICAweDk4ZDIyMGJjLCAweGVmZDUxMDJhLCAweDcxYjE4NTg5LCAweDA2YjZiNTFmLCAweDlmYmZlNGE1LCAweGU4YjhkNDMzLFxyXG4gIDB4NzgwN2M5YTIsIDB4MGYwMGY5MzQsIDB4OTYwOWE4OGUsIDB4ZTEwZTk4MTgsIDB4N2Y2YTBkYmIsIDB4MDg2ZDNkMmQsXHJcbiAgMHg5MTY0NmM5NywgMHhlNjYzNWMwMSwgMHg2YjZiNTFmNCwgMHgxYzZjNjE2MiwgMHg4NTY1MzBkOCwgMHhmMjYyMDA0ZSxcclxuICAweDZjMDY5NWVkLCAweDFiMDFhNTdiLCAweDgyMDhmNGMxLCAweGY1MGZjNDU3LCAweDY1YjBkOWM2LCAweDEyYjdlOTUwLFxyXG4gIDB4OGJiZWI4ZWEsIDB4ZmNiOTg4N2MsIDB4NjJkZDFkZGYsIDB4MTVkYTJkNDksIDB4OGNkMzdjZjMsIDB4ZmJkNDRjNjUsXHJcbiAgMHg0ZGIyNjE1OCwgMHgzYWI1NTFjZSwgMHhhM2JjMDA3NCwgMHhkNGJiMzBlMiwgMHg0YWRmYTU0MSwgMHgzZGQ4OTVkNyxcclxuICAweGE0ZDFjNDZkLCAweGQzZDZmNGZiLCAweDQzNjllOTZhLCAweDM0NmVkOWZjLCAweGFkNjc4ODQ2LCAweGRhNjBiOGQwLFxyXG4gIDB4NDQwNDJkNzMsIDB4MzMwMzFkZTUsIDB4YWEwYTRjNWYsIDB4ZGQwZDdjYzksIDB4NTAwNTcxM2MsIDB4MjcwMjQxYWEsXHJcbiAgMHhiZTBiMTAxMCwgMHhjOTBjMjA4NiwgMHg1NzY4YjUyNSwgMHgyMDZmODViMywgMHhiOTY2ZDQwOSwgMHhjZTYxZTQ5ZixcclxuICAweDVlZGVmOTBlLCAweDI5ZDljOTk4LCAweGIwZDA5ODIyLCAweGM3ZDdhOGI0LCAweDU5YjMzZDE3LCAweDJlYjQwZDgxLFxyXG4gIDB4YjdiZDVjM2IsIDB4YzBiYTZjYWQsIDB4ZWRiODgzMjAsIDB4OWFiZmIzYjYsIDB4MDNiNmUyMGMsIDB4NzRiMWQyOWEsXHJcbiAgMHhlYWQ1NDczOSwgMHg5ZGQyNzdhZiwgMHgwNGRiMjYxNSwgMHg3M2RjMTY4MywgMHhlMzYzMGIxMiwgMHg5NDY0M2I4NCxcclxuICAweDBkNmQ2YTNlLCAweDdhNmE1YWE4LCAweGU0MGVjZjBiLCAweDkzMDlmZjlkLCAweDBhMDBhZTI3LCAweDdkMDc5ZWIxLFxyXG4gIDB4ZjAwZjkzNDQsIDB4ODcwOGEzZDIsIDB4MWUwMWYyNjgsIDB4NjkwNmMyZmUsIDB4Zjc2MjU3NWQsIDB4ODA2NTY3Y2IsXHJcbiAgMHgxOTZjMzY3MSwgMHg2ZTZiMDZlNywgMHhmZWQ0MWI3NiwgMHg4OWQzMmJlMCwgMHgxMGRhN2E1YSwgMHg2N2RkNGFjYyxcclxuICAweGY5YjlkZjZmLCAweDhlYmVlZmY5LCAweDE3YjdiZTQzLCAweDYwYjA4ZWQ1LCAweGQ2ZDZhM2U4LCAweGExZDE5MzdlLFxyXG4gIDB4MzhkOGMyYzQsIDB4NGZkZmYyNTIsIDB4ZDFiYjY3ZjEsIDB4YTZiYzU3NjcsIDB4M2ZiNTA2ZGQsIDB4NDhiMjM2NGIsXHJcbiAgMHhkODBkMmJkYSwgMHhhZjBhMWI0YywgMHgzNjAzNGFmNiwgMHg0MTA0N2E2MCwgMHhkZjYwZWZjMywgMHhhODY3ZGY1NSxcclxuICAweDMxNmU4ZWVmLCAweDQ2NjliZTc5LCAweGNiNjFiMzhjLCAweGJjNjY4MzFhLCAweDI1NmZkMmEwLCAweDUyNjhlMjM2LFxyXG4gIDB4Y2MwYzc3OTUsIDB4YmIwYjQ3MDMsIDB4MjIwMjE2YjksIDB4NTUwNTI2MmYsIDB4YzViYTNiYmUsIDB4YjJiZDBiMjgsXHJcbiAgMHgyYmI0NWE5MiwgMHg1Y2IzNmEwNCwgMHhjMmQ3ZmZhNywgMHhiNWQwY2YzMSwgMHgyY2Q5OWU4YiwgMHg1YmRlYWUxZCxcclxuICAweDliNjRjMmIwLCAweGVjNjNmMjI2LCAweDc1NmFhMzljLCAweDAyNmQ5MzBhLCAweDljMDkwNmE5LCAweGViMGUzNjNmLFxyXG4gIDB4NzIwNzY3ODUsIDB4MDUwMDU3MTMsIDB4OTViZjRhODIsIDB4ZTJiODdhMTQsIDB4N2JiMTJiYWUsIDB4MGNiNjFiMzgsXHJcbiAgMHg5MmQyOGU5YiwgMHhlNWQ1YmUwZCwgMHg3Y2RjZWZiNywgMHgwYmRiZGYyMSwgMHg4NmQzZDJkNCwgMHhmMWQ0ZTI0MixcclxuICAweDY4ZGRiM2Y4LCAweDFmZGE4MzZlLCAweDgxYmUxNmNkLCAweGY2YjkyNjViLCAweDZmYjA3N2UxLCAweDE4Yjc0Nzc3LFxyXG4gIDB4ODgwODVhZTYsIDB4ZmYwZjZhNzAsIDB4NjYwNjNiY2EsIDB4MTEwMTBiNWMsIDB4OGY2NTllZmYsIDB4Zjg2MmFlNjksXHJcbiAgMHg2MTZiZmZkMywgMHgxNjZjY2Y0NSwgMHhhMDBhZTI3OCwgMHhkNzBkZDJlZSwgMHg0ZTA0ODM1NCwgMHgzOTAzYjNjMixcclxuICAweGE3NjcyNjYxLCAweGQwNjAxNmY3LCAweDQ5Njk0NzRkLCAweDNlNmU3N2RiLCAweGFlZDE2YTRhLCAweGQ5ZDY1YWRjLFxyXG4gIDB4NDBkZjBiNjYsIDB4MzdkODNiZjAsIDB4YTliY2FlNTMsIDB4ZGViYjllYzUsIDB4NDdiMmNmN2YsIDB4MzBiNWZmZTksXHJcbiAgMHhiZGJkZjIxYywgMHhjYWJhYzI4YSwgMHg1M2IzOTMzMCwgMHgyNGI0YTNhNiwgMHhiYWQwMzYwNSwgMHhjZGQ3MDY5MyxcclxuICAweDU0ZGU1NzI5LCAweDIzZDk2N2JmLCAweGIzNjY3YTJlLCAweGM0NjE0YWI4LCAweDVkNjgxYjAyLCAweDJhNmYyYjk0LFxyXG4gIDB4YjQwYmJlMzcsIDB4YzMwYzhlYTEsIDB4NWEwNWRmMWIsIDB4MmQwMmVmOGRcclxuXTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50MzJBcnJheSl9IENSQy0zMiBUYWJsZS5cclxuICogQGNvbnN0XHJcbiAqL1xyXG5abGliLkNSQzMyLlRhYmxlID0gWkxJQl9DUkMzMl9DT01QQUNUID8gKGZ1bmN0aW9uKCkge1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50MzJBcnJheSl9ICovXHJcbiAgdmFyIHRhYmxlID0gbmV3IChVU0VfVFlQRURBUlJBWSA/IFVpbnQzMkFycmF5IDogQXJyYXkpKDI1Nik7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGM7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGk7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGo7XHJcblxyXG4gIGZvciAoaSA9IDA7IGkgPCAyNTY7ICsraSkge1xyXG4gICAgYyA9IGk7XHJcbiAgICBmb3IgKGogPSAwOyBqIDwgODsgKytqKSB7XHJcbiAgICAgIGMgPSAoYyAmIDEpID8gKDB4ZWRCODgzMjAgXiAoYyA+Pj4gMSkpIDogKGMgPj4+IDEpO1xyXG4gICAgfVxyXG4gICAgdGFibGVbaV0gPSBjID4+PiAwO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRhYmxlO1xyXG59KSgpIDogVVNFX1RZUEVEQVJSQVkgPyBuZXcgVWludDMyQXJyYXkoWmxpYi5DUkMzMi5UYWJsZV8pIDogWmxpYi5DUkMzMi5UYWJsZV87XHJcblxyXG59KTtcclxuIiwiZ29vZy5wcm92aWRlKCdGaXhQaGFudG9tSlNGdW5jdGlvbkFwcGx5QnVnX1N0cmluZ0Zyb21DaGFyQ29kZScpO1xyXG5cclxuaWYgKGdvb2cuZ2xvYmFsWydVaW50OEFycmF5J10gIT09IHZvaWQgMCkge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBhbnRpLW9wdGltaXphdGlvblxyXG4gICAgZXZhbChcIlN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgbmV3IFVpbnQ4QXJyYXkoWzBdKSk7XCIpO1xyXG4gIH0gY2F0Y2goZSkge1xyXG4gICAgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSA9IChmdW5jdGlvbihmcm9tQ2hhckNvZGVBcHBseSkge1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24odGhpc29iaiwgYXJncykge1xyXG4gICAgICAgIHJldHVybiBmcm9tQ2hhckNvZGVBcHBseS5jYWxsKFN0cmluZy5mcm9tQ2hhckNvZGUsIHRoaXNvYmosIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpKTtcclxuICAgICAgfVxyXG4gICAgfSkoU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSk7XHJcbiAgfVxyXG59IiwiZ29vZy5wcm92aWRlKCdabGliLkh1ZmZtYW4nKTtcclxuXHJcbmdvb2cucmVxdWlyZSgnVVNFX1RZUEVEQVJSQVknKTtcclxuXHJcbmdvb2cuc2NvcGUoZnVuY3Rpb24oKSB7XHJcblxyXG4vKipcclxuICogYnVpbGQgaHVmZm1hbiB0YWJsZSBmcm9tIGxlbmd0aCBsaXN0LlxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGxlbmd0aHMgbGVuZ3RoIGxpc3QuXHJcbiAqIEByZXR1cm4geyFBcnJheX0gaHVmZm1hbiB0YWJsZS5cclxuICovXHJcblpsaWIuSHVmZm1hbi5idWlsZEh1ZmZtYW5UYWJsZSA9IGZ1bmN0aW9uKGxlbmd0aHMpIHtcclxuICAvKiogQHR5cGUge251bWJlcn0gbGVuZ3RoIGxpc3Qgc2l6ZS4gKi9cclxuICB2YXIgbGlzdFNpemUgPSBsZW5ndGhzLmxlbmd0aDtcclxuICAvKiogQHR5cGUge251bWJlcn0gbWF4IGNvZGUgbGVuZ3RoIGZvciB0YWJsZSBzaXplLiAqL1xyXG4gIHZhciBtYXhDb2RlTGVuZ3RoID0gMDtcclxuICAvKiogQHR5cGUge251bWJlcn0gbWluIGNvZGUgbGVuZ3RoIGZvciB0YWJsZSBzaXplLiAqL1xyXG4gIHZhciBtaW5Db2RlTGVuZ3RoID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSB0YWJsZSBzaXplLiAqL1xyXG4gIHZhciBzaXplO1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheXxVaW50OEFycmF5KX0gaHVmZm1hbiBjb2RlIHRhYmxlLiAqL1xyXG4gIHZhciB0YWJsZTtcclxuICAvKiogQHR5cGUge251bWJlcn0gYml0IGxlbmd0aC4gKi9cclxuICB2YXIgYml0TGVuZ3RoO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBodWZmbWFuIGNvZGUuICovXHJcbiAgdmFyIGNvZGU7XHJcbiAgLyoqXHJcbiAgICog44K144Kk44K644GMIDJebWF4bGVuZ3RoIOWAi+OBruODhuODvOODluODq+OCkuWfi+OCgeOCi+OBn+OCgeOBruOCueOCreODg+ODl+mVty5cclxuICAgKiBAdHlwZSB7bnVtYmVyfSBza2lwIGxlbmd0aCBmb3IgdGFibGUgZmlsbGluZy5cclxuICAgKi9cclxuICB2YXIgc2tpcDtcclxuICAvKiogQHR5cGUge251bWJlcn0gcmV2ZXJzZWQgY29kZS4gKi9cclxuICB2YXIgcmV2ZXJzZWQ7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IHJldmVyc2UgdGVtcC4gKi9cclxuICB2YXIgcnRlbXA7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGxvb3AgY291bnRlci4gKi9cclxuICB2YXIgaTtcclxuICAvKiogQHR5cGUge251bWJlcn0gbG9vcCBsaW1pdC4gKi9cclxuICB2YXIgaWw7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGxvb3AgY291bnRlci4gKi9cclxuICB2YXIgajtcclxuICAvKiogQHR5cGUge251bWJlcn0gdGFibGUgdmFsdWUuICovXHJcbiAgdmFyIHZhbHVlO1xyXG5cclxuICAvLyBNYXRoLm1heCDjga/pgYXjgYTjga7jgafmnIDplbfjga7lgKTjga8gZm9yLWxvb3Ag44Gn5Y+W5b6X44GZ44KLXHJcbiAgZm9yIChpID0gMCwgaWwgPSBsaXN0U2l6ZTsgaSA8IGlsOyArK2kpIHtcclxuICAgIGlmIChsZW5ndGhzW2ldID4gbWF4Q29kZUxlbmd0aCkge1xyXG4gICAgICBtYXhDb2RlTGVuZ3RoID0gbGVuZ3Roc1tpXTtcclxuICAgIH1cclxuICAgIGlmIChsZW5ndGhzW2ldIDwgbWluQ29kZUxlbmd0aCkge1xyXG4gICAgICBtaW5Db2RlTGVuZ3RoID0gbGVuZ3Roc1tpXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNpemUgPSAxIDw8IG1heENvZGVMZW5ndGg7XHJcbiAgdGFibGUgPSBuZXcgKFVTRV9UWVBFREFSUkFZID8gVWludDMyQXJyYXkgOiBBcnJheSkoc2l6ZSk7XHJcblxyXG4gIC8vIOODk+ODg+ODiOmVt+OBruefreOBhOmghuOBi+OCieODj+ODleODnuODs+espuWPt+OCkuWJsuOCiuW9k+OBpuOCi1xyXG4gIGZvciAoYml0TGVuZ3RoID0gMSwgY29kZSA9IDAsIHNraXAgPSAyOyBiaXRMZW5ndGggPD0gbWF4Q29kZUxlbmd0aDspIHtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0U2l6ZTsgKytpKSB7XHJcbiAgICAgIGlmIChsZW5ndGhzW2ldID09PSBiaXRMZW5ndGgpIHtcclxuICAgICAgICAvLyDjg5Pjg4Pjg4jjgqrjg7zjg4Djg7zjgYzpgIbjgavjgarjgovjgZ/jgoHjg5Pjg4Pjg4jplbfliIbkuKbjgbPjgpLlj43ou6LjgZnjgotcclxuICAgICAgICBmb3IgKHJldmVyc2VkID0gMCwgcnRlbXAgPSBjb2RlLCBqID0gMDsgaiA8IGJpdExlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICByZXZlcnNlZCA9IChyZXZlcnNlZCA8PCAxKSB8IChydGVtcCAmIDEpO1xyXG4gICAgICAgICAgcnRlbXAgPj49IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmnIDlpKfjg5Pjg4Pjg4jplbfjgpLjgoLjgajjgavjg4bjg7zjg5bjg6vjgpLkvZzjgovjgZ/jgoHjgIFcclxuICAgICAgICAvLyDmnIDlpKfjg5Pjg4Pjg4jplbfku6XlpJbjgafjga8gMCAvIDEg44Gp44Gh44KJ44Gn44KC6Imv44GE566H5omA44GM44Gn44GN44KLXHJcbiAgICAgICAgLy8g44Gd44Gu44Gp44Gh44KJ44Gn44KC6Imv44GE5aC05omA44Gv5ZCM44GY5YCk44Gn5Z+L44KB44KL44GT44Go44GnXHJcbiAgICAgICAgLy8g5pys5p2l44Gu44OT44OD44OI6ZW35Lul5LiK44Gu44OT44OD44OI5pWw5Y+W5b6X44GX44Gm44KC5ZWP6aGM44GM6LW344GT44KJ44Gq44GE44KI44GG44Gr44GZ44KLXHJcbiAgICAgICAgdmFsdWUgPSAoYml0TGVuZ3RoIDw8IDE2KSB8IGk7XHJcbiAgICAgICAgZm9yIChqID0gcmV2ZXJzZWQ7IGogPCBzaXplOyBqICs9IHNraXApIHtcclxuICAgICAgICAgIHRhYmxlW2pdID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICArK2NvZGU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyDmrKHjga7jg5Pjg4Pjg4jplbfjgbhcclxuICAgICsrYml0TGVuZ3RoO1xyXG4gICAgY29kZSA8PD0gMTtcclxuICAgIHNraXAgPDw9IDE7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gW3RhYmxlLCBtYXhDb2RlTGVuZ3RoLCBtaW5Db2RlTGVuZ3RoXTtcclxufTtcclxuXHJcblxyXG4vLyBlbmQgb2Ygc2NvcGVcclxufSk7XHJcblxyXG4vKiB2aW06c2V0IGV4cGFuZHRhYiB0cz0yIHN3PTIgdHc9ODA6ICovXHJcbiIsIi8qKlxyXG4gKiBAZmlsZW92ZXJ2aWV3IERlZmxhdGUgKFJGQzE5NTEpIOespuWPt+WMluOCouODq+OCtOODquOCuuODoOWun+ijhS5cclxuICovXHJcblxyXG5nb29nLnByb3ZpZGUoJ1psaWIuUmF3RGVmbGF0ZScpO1xyXG5cclxuZ29vZy5yZXF1aXJlKCdVU0VfVFlQRURBUlJBWScpO1xyXG5nb29nLnJlcXVpcmUoJ1psaWIuQml0U3RyZWFtJyk7XHJcbmdvb2cucmVxdWlyZSgnWmxpYi5IZWFwJyk7XHJcblxyXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xyXG5cclxuLyoqXHJcbiAqIFJhdyBEZWZsYXRlIOWun+ijhVxyXG4gKlxyXG4gKiBAY29uc3RydWN0b3JcclxuICogQHBhcmFtIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBpbnB1dCDnrKblj7fljJbjgZnjgovlr77osaHjga7jg5Djg4Pjg5XjgqEuXHJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3BhcmFtcyBvcHRpb24gcGFyYW1ldGVycy5cclxuICpcclxuICogdHlwZWQgYXJyYXkg44GM5L2/55So5Y+v6IO944Gq44Go44GN44CBb3V0cHV0QnVmZmVyIOOBjCBBcnJheSDjga/oh6rli5XnmoTjgasgVWludDhBcnJheSDjgatcclxuICog5aSJ5o+b44GV44KM44G+44GZLlxyXG4gKiDliKXjga7jgqrjg5bjgrjjgqfjgq/jg4jjgavjgarjgovjgZ/jgoHlh7rlipvjg5Djg4Pjg5XjgqHjgpLlj4LnhafjgZfjgabjgYTjgovlpInmlbDjgarjganjga9cclxuICog5pu05paw44GZ44KL5b+F6KaB44GM44GC44KK44G+44GZLlxyXG4gKi9cclxuWmxpYi5SYXdEZWZsYXRlID0gZnVuY3Rpb24oaW5wdXQsIG9wdF9wYXJhbXMpIHtcclxuICAvKiogQHR5cGUge1psaWIuUmF3RGVmbGF0ZS5Db21wcmVzc2lvblR5cGV9ICovXHJcbiAgdGhpcy5jb21wcmVzc2lvblR5cGUgPSBabGliLlJhd0RlZmxhdGUuQ29tcHJlc3Npb25UeXBlLkRZTkFNSUM7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5sYXp5ID0gMDtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDMyQXJyYXkpfSAqL1xyXG4gIHRoaXMuZnJlcXNMaXRMZW47XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQzMkFycmF5KX0gKi9cclxuICB0aGlzLmZyZXFzRGlzdDtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdGhpcy5pbnB1dCA9XHJcbiAgICAoVVNFX1RZUEVEQVJSQVkgJiYgaW5wdXQgaW5zdGFuY2VvZiBBcnJheSkgPyBuZXcgVWludDhBcnJheShpbnB1dCkgOiBpbnB1dDtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IG91dHB1dCBvdXRwdXQgYnVmZmVyLiAqL1xyXG4gIHRoaXMub3V0cHV0O1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBwb3Mgb3V0cHV0IGJ1ZmZlciBwb3NpdGlvbi4gKi9cclxuICB0aGlzLm9wID0gMDtcclxuXHJcbiAgLy8gb3B0aW9uIHBhcmFtZXRlcnNcclxuICBpZiAob3B0X3BhcmFtcykge1xyXG4gICAgaWYgKG9wdF9wYXJhbXNbJ2xhenknXSkge1xyXG4gICAgICB0aGlzLmxhenkgPSBvcHRfcGFyYW1zWydsYXp5J107XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIG9wdF9wYXJhbXNbJ2NvbXByZXNzaW9uVHlwZSddID09PSAnbnVtYmVyJykge1xyXG4gICAgICB0aGlzLmNvbXByZXNzaW9uVHlwZSA9IG9wdF9wYXJhbXNbJ2NvbXByZXNzaW9uVHlwZSddO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdF9wYXJhbXNbJ291dHB1dEJ1ZmZlciddKSB7XHJcbiAgICAgIHRoaXMub3V0cHV0ID1cclxuICAgICAgICAoVVNFX1RZUEVEQVJSQVkgJiYgb3B0X3BhcmFtc1snb3V0cHV0QnVmZmVyJ10gaW5zdGFuY2VvZiBBcnJheSkgP1xyXG4gICAgICAgIG5ldyBVaW50OEFycmF5KG9wdF9wYXJhbXNbJ291dHB1dEJ1ZmZlciddKSA6IG9wdF9wYXJhbXNbJ291dHB1dEJ1ZmZlciddO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBvcHRfcGFyYW1zWydvdXRwdXRJbmRleCddID09PSAnbnVtYmVyJykge1xyXG4gICAgICB0aGlzLm9wID0gb3B0X3BhcmFtc1snb3V0cHV0SW5kZXgnXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlmICghdGhpcy5vdXRwdXQpIHtcclxuICAgIHRoaXMub3V0cHV0ID0gbmV3IChVU0VfVFlQRURBUlJBWSA/IFVpbnQ4QXJyYXkgOiBBcnJheSkoMHg4MDAwKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQGVudW0ge251bWJlcn1cclxuICovXHJcblpsaWIuUmF3RGVmbGF0ZS5Db21wcmVzc2lvblR5cGUgPSB7XHJcbiAgTk9ORTogMCxcclxuICBGSVhFRDogMSxcclxuICBEWU5BTUlDOiAyLFxyXG4gIFJFU0VSVkVEOiAzXHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIExaNzcg44Gu5pyA5bCP44Oe44OD44OB6ZW3XHJcbiAqIEBjb25zdFxyXG4gKiBAdHlwZSB7bnVtYmVyfVxyXG4gKi9cclxuWmxpYi5SYXdEZWZsYXRlLkx6NzdNaW5MZW5ndGggPSAzO1xyXG5cclxuLyoqXHJcbiAqIExaNzcg44Gu5pyA5aSn44Oe44OD44OB6ZW3XHJcbiAqIEBjb25zdFxyXG4gKiBAdHlwZSB7bnVtYmVyfVxyXG4gKi9cclxuWmxpYi5SYXdEZWZsYXRlLkx6NzdNYXhMZW5ndGggPSAyNTg7XHJcblxyXG4vKipcclxuICogTFo3NyDjga7jgqbjgqPjg7Pjg4njgqbjgrXjgqTjgrpcclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xyXG5abGliLlJhd0RlZmxhdGUuV2luZG93U2l6ZSA9IDB4ODAwMDtcclxuXHJcbi8qKlxyXG4gKiDmnIDplbfjga7nrKblj7fplbdcclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHtudW1iZXJ9XHJcbiAqL1xyXG5abGliLlJhd0RlZmxhdGUuTWF4Q29kZUxlbmd0aCA9IDE2O1xyXG5cclxuLyoqXHJcbiAqIOODj+ODleODnuODs+espuWPt+OBruacgOWkp+aVsOWApFxyXG4gKiBAY29uc3RcclxuICogQHR5cGUge251bWJlcn1cclxuICovXHJcblpsaWIuUmF3RGVmbGF0ZS5IVUZNQVggPSAyODY7XHJcblxyXG4vKipcclxuICog5Zu65a6a44OP44OV44Oe44Oz56ym5Y+344Gu56ym5Y+35YyW44OG44O844OW44OrXHJcbiAqIEBjb25zdFxyXG4gKiBAdHlwZSB7QXJyYXkuPEFycmF5LjxudW1iZXIsIG51bWJlcj4+fVxyXG4gKi9cclxuWmxpYi5SYXdEZWZsYXRlLkZpeGVkSHVmZm1hblRhYmxlID0gKGZ1bmN0aW9uKCkge1xyXG4gIHZhciB0YWJsZSA9IFtdLCBpO1xyXG5cclxuICBmb3IgKGkgPSAwOyBpIDwgMjg4OyBpKyspIHtcclxuICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICBjYXNlIChpIDw9IDE0Myk6IHRhYmxlLnB1c2goW2kgICAgICAgKyAweDAzMCwgOF0pOyBicmVhaztcclxuICAgICAgY2FzZSAoaSA8PSAyNTUpOiB0YWJsZS5wdXNoKFtpIC0gMTQ0ICsgMHgxOTAsIDldKTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgKGkgPD0gMjc5KTogdGFibGUucHVzaChbaSAtIDI1NiArIDB4MDAwLCA3XSk7IGJyZWFrO1xyXG4gICAgICBjYXNlIChpIDw9IDI4Nyk6IHRhYmxlLnB1c2goW2kgLSAyODAgKyAweDBDMCwgOF0pOyBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyAnaW52YWxpZCBsaXRlcmFsOiAnICsgaTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0YWJsZTtcclxufSkoKTtcclxuXHJcbi8qKlxyXG4gKiBERUZMQVRFIOODluODreODg+OCr+OBruS9nOaIkFxyXG4gKiBAcmV0dXJuIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSDlnKfnuK7muIjjgb8gYnl0ZSBhcnJheS5cclxuICovXHJcblpsaWIuUmF3RGVmbGF0ZS5wcm90b3R5cGUuY29tcHJlc3MgPSBmdW5jdGlvbigpIHtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdmFyIGJsb2NrQXJyYXk7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIHBvc2l0aW9uO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBsZW5ndGg7XHJcblxyXG4gIHZhciBpbnB1dCA9IHRoaXMuaW5wdXQ7XHJcblxyXG4gIC8vIGNvbXByZXNzaW9uXHJcbiAgc3dpdGNoICh0aGlzLmNvbXByZXNzaW9uVHlwZSkge1xyXG4gICAgY2FzZSBabGliLlJhd0RlZmxhdGUuQ29tcHJlc3Npb25UeXBlLk5PTkU6XHJcbiAgICAgIC8vIGVhY2ggNjU1MzUtQnl0ZSAobGVuZ3RoIGhlYWRlcjogMTYtYml0KVxyXG4gICAgICBmb3IgKHBvc2l0aW9uID0gMCwgbGVuZ3RoID0gaW5wdXQubGVuZ3RoOyBwb3NpdGlvbiA8IGxlbmd0aDspIHtcclxuICAgICAgICBibG9ja0FycmF5ID0gVVNFX1RZUEVEQVJSQVkgP1xyXG4gICAgICAgICAgaW5wdXQuc3ViYXJyYXkocG9zaXRpb24sIHBvc2l0aW9uICsgMHhmZmZmKSA6XHJcbiAgICAgICAgICBpbnB1dC5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAweGZmZmYpO1xyXG4gICAgICAgIHBvc2l0aW9uICs9IGJsb2NrQXJyYXkubGVuZ3RoO1xyXG4gICAgICAgIHRoaXMubWFrZU5vY29tcHJlc3NCbG9jayhibG9ja0FycmF5LCAocG9zaXRpb24gPT09IGxlbmd0aCkpO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBabGliLlJhd0RlZmxhdGUuQ29tcHJlc3Npb25UeXBlLkZJWEVEOlxyXG4gICAgICB0aGlzLm91dHB1dCA9IHRoaXMubWFrZUZpeGVkSHVmZm1hbkJsb2NrKGlucHV0LCB0cnVlKTtcclxuICAgICAgdGhpcy5vcCA9IHRoaXMub3V0cHV0Lmxlbmd0aDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFpsaWIuUmF3RGVmbGF0ZS5Db21wcmVzc2lvblR5cGUuRFlOQU1JQzpcclxuICAgICAgdGhpcy5vdXRwdXQgPSB0aGlzLm1ha2VEeW5hbWljSHVmZm1hbkJsb2NrKGlucHV0LCB0cnVlKTtcclxuICAgICAgdGhpcy5vcCA9IHRoaXMub3V0cHV0Lmxlbmd0aDtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyAnaW52YWxpZCBjb21wcmVzc2lvbiB0eXBlJztcclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzLm91dHB1dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDpnZ7lnKfnuK7jg5bjg63jg4Pjgq/jga7kvZzmiJBcclxuICogQHBhcmFtIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBibG9ja0FycmF5IOODluODreODg+OCr+ODh+ODvOOCvyBieXRlIGFycmF5LlxyXG4gKiBAcGFyYW0geyFib29sZWFufSBpc0ZpbmFsQmxvY2sg5pyA5b6M44Gu44OW44Ot44OD44Kv44Gq44KJ44GwdHJ1ZS5cclxuICogQHJldHVybiB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0g6Z2e5Zyn57iu44OW44Ot44OD44KvIGJ5dGUgYXJyYXkuXHJcbiAqL1xyXG5abGliLlJhd0RlZmxhdGUucHJvdG90eXBlLm1ha2VOb2NvbXByZXNzQmxvY2sgPVxyXG5mdW5jdGlvbihibG9ja0FycmF5LCBpc0ZpbmFsQmxvY2spIHtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgYmZpbmFsO1xyXG4gIC8qKiBAdHlwZSB7WmxpYi5SYXdEZWZsYXRlLkNvbXByZXNzaW9uVHlwZX0gKi9cclxuICB2YXIgYnR5cGU7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGxlbjtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgbmxlbjtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaWw7XHJcblxyXG4gIHZhciBvdXRwdXQgPSB0aGlzLm91dHB1dDtcclxuICB2YXIgb3AgPSB0aGlzLm9wO1xyXG5cclxuICAvLyBleHBhbmQgYnVmZmVyXHJcbiAgaWYgKFVTRV9UWVBFREFSUkFZKSB7XHJcbiAgICBvdXRwdXQgPSBuZXcgVWludDhBcnJheSh0aGlzLm91dHB1dC5idWZmZXIpO1xyXG4gICAgd2hpbGUgKG91dHB1dC5sZW5ndGggPD0gb3AgKyBibG9ja0FycmF5Lmxlbmd0aCArIDUpIHtcclxuICAgICAgb3V0cHV0ID0gbmV3IFVpbnQ4QXJyYXkob3V0cHV0Lmxlbmd0aCA8PCAxKTtcclxuICAgIH1cclxuICAgIG91dHB1dC5zZXQodGhpcy5vdXRwdXQpO1xyXG4gIH1cclxuXHJcbiAgLy8gaGVhZGVyXHJcbiAgYmZpbmFsID0gaXNGaW5hbEJsb2NrID8gMSA6IDA7XHJcbiAgYnR5cGUgPSBabGliLlJhd0RlZmxhdGUuQ29tcHJlc3Npb25UeXBlLk5PTkU7XHJcbiAgb3V0cHV0W29wKytdID0gKGJmaW5hbCkgfCAoYnR5cGUgPDwgMSk7XHJcblxyXG4gIC8vIGxlbmd0aFxyXG4gIGxlbiA9IGJsb2NrQXJyYXkubGVuZ3RoO1xyXG4gIG5sZW4gPSAofmxlbiArIDB4MTAwMDApICYgMHhmZmZmO1xyXG4gIG91dHB1dFtvcCsrXSA9ICAgICAgICAgIGxlbiAmIDB4ZmY7XHJcbiAgb3V0cHV0W29wKytdID0gIChsZW4gPj4+IDgpICYgMHhmZjtcclxuICBvdXRwdXRbb3ArK10gPSAgICAgICAgIG5sZW4gJiAweGZmO1xyXG4gIG91dHB1dFtvcCsrXSA9IChubGVuID4+PiA4KSAmIDB4ZmY7XHJcblxyXG4gIC8vIGNvcHkgYnVmZmVyXHJcbiAgaWYgKFVTRV9UWVBFREFSUkFZKSB7XHJcbiAgICAgb3V0cHV0LnNldChibG9ja0FycmF5LCBvcCk7XHJcbiAgICAgb3AgKz0gYmxvY2tBcnJheS5sZW5ndGg7XHJcbiAgICAgb3V0cHV0ID0gb3V0cHV0LnN1YmFycmF5KDAsIG9wKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZm9yIChpID0gMCwgaWwgPSBibG9ja0FycmF5Lmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcclxuICAgICAgb3V0cHV0W29wKytdID0gYmxvY2tBcnJheVtpXTtcclxuICAgIH1cclxuICAgIG91dHB1dC5sZW5ndGggPSBvcDtcclxuICB9XHJcblxyXG4gIHRoaXMub3AgPSBvcDtcclxuICB0aGlzLm91dHB1dCA9IG91dHB1dDtcclxuXHJcbiAgcmV0dXJuIG91dHB1dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDlm7rlrprjg4/jg5Xjg57jg7Pjg5bjg63jg4Pjgq/jga7kvZzmiJBcclxuICogQHBhcmFtIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBibG9ja0FycmF5IOODluODreODg+OCr+ODh+ODvOOCvyBieXRlIGFycmF5LlxyXG4gKiBAcGFyYW0geyFib29sZWFufSBpc0ZpbmFsQmxvY2sg5pyA5b6M44Gu44OW44Ot44OD44Kv44Gq44KJ44GwdHJ1ZS5cclxuICogQHJldHVybiB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0g5Zu65a6a44OP44OV44Oe44Oz56ym5Y+35YyW44OW44Ot44OD44KvIGJ5dGUgYXJyYXkuXHJcbiAqL1xyXG5abGliLlJhd0RlZmxhdGUucHJvdG90eXBlLm1ha2VGaXhlZEh1ZmZtYW5CbG9jayA9XHJcbmZ1bmN0aW9uKGJsb2NrQXJyYXksIGlzRmluYWxCbG9jaykge1xyXG4gIC8qKiBAdHlwZSB7WmxpYi5CaXRTdHJlYW19ICovXHJcbiAgdmFyIHN0cmVhbSA9IG5ldyBabGliLkJpdFN0cmVhbShVU0VfVFlQRURBUlJBWSA/XHJcbiAgICBuZXcgVWludDhBcnJheSh0aGlzLm91dHB1dC5idWZmZXIpIDogdGhpcy5vdXRwdXQsIHRoaXMub3ApO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBiZmluYWw7XHJcbiAgLyoqIEB0eXBlIHtabGliLlJhd0RlZmxhdGUuQ29tcHJlc3Npb25UeXBlfSAqL1xyXG4gIHZhciBidHlwZTtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDE2QXJyYXkpfSAqL1xyXG4gIHZhciBkYXRhO1xyXG5cclxuICAvLyBoZWFkZXJcclxuICBiZmluYWwgPSBpc0ZpbmFsQmxvY2sgPyAxIDogMDtcclxuICBidHlwZSA9IFpsaWIuUmF3RGVmbGF0ZS5Db21wcmVzc2lvblR5cGUuRklYRUQ7XHJcblxyXG4gIHN0cmVhbS53cml0ZUJpdHMoYmZpbmFsLCAxLCB0cnVlKTtcclxuICBzdHJlYW0ud3JpdGVCaXRzKGJ0eXBlLCAyLCB0cnVlKTtcclxuXHJcbiAgZGF0YSA9IHRoaXMubHo3NyhibG9ja0FycmF5KTtcclxuICB0aGlzLmZpeGVkSHVmZm1hbihkYXRhLCBzdHJlYW0pO1xyXG5cclxuICByZXR1cm4gc3RyZWFtLmZpbmlzaCgpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIOWLleeahOODj+ODleODnuODs+ODluODreODg+OCr+OBruS9nOaIkFxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGJsb2NrQXJyYXkg44OW44Ot44OD44Kv44OH44O844K/IGJ5dGUgYXJyYXkuXHJcbiAqIEBwYXJhbSB7IWJvb2xlYW59IGlzRmluYWxCbG9jayDmnIDlvozjga7jg5bjg63jg4Pjgq/jgarjgonjgbB0cnVlLlxyXG4gKiBAcmV0dXJuIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSDli5XnmoTjg4/jg5Xjg57jg7PnrKblj7fjg5bjg63jg4Pjgq8gYnl0ZSBhcnJheS5cclxuICovXHJcblpsaWIuUmF3RGVmbGF0ZS5wcm90b3R5cGUubWFrZUR5bmFtaWNIdWZmbWFuQmxvY2sgPVxyXG5mdW5jdGlvbihibG9ja0FycmF5LCBpc0ZpbmFsQmxvY2spIHtcclxuICAvKiogQHR5cGUge1psaWIuQml0U3RyZWFtfSAqL1xyXG4gIHZhciBzdHJlYW0gPSBuZXcgWmxpYi5CaXRTdHJlYW0oVVNFX1RZUEVEQVJSQVkgP1xyXG4gICAgbmV3IFVpbnQ4QXJyYXkodGhpcy5vdXRwdXQuYnVmZmVyKSA6IHRoaXMub3V0cHV0LCB0aGlzLm9wKTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgYmZpbmFsO1xyXG4gIC8qKiBAdHlwZSB7WmxpYi5SYXdEZWZsYXRlLkNvbXByZXNzaW9uVHlwZX0gKi9cclxuICB2YXIgYnR5cGU7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQxNkFycmF5KX0gKi9cclxuICB2YXIgZGF0YTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaGxpdDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaGRpc3Q7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGhjbGVuO1xyXG4gIC8qKiBAY29uc3QgQHR5cGUge0FycmF5LjxudW1iZXI+fSAqL1xyXG4gIHZhciBoY2xlbk9yZGVyID1cclxuICAgICAgICBbMTYsIDE3LCAxOCwgMCwgOCwgNywgOSwgNiwgMTAsIDUsIDExLCA0LCAxMiwgMywgMTMsIDIsIDE0LCAxLCAxNV07XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHZhciBsaXRMZW5MZW5ndGhzO1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50MTZBcnJheSl9ICovXHJcbiAgdmFyIGxpdExlbkNvZGVzO1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0gKi9cclxuICB2YXIgZGlzdExlbmd0aHM7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQxNkFycmF5KX0gKi9cclxuICB2YXIgZGlzdENvZGVzO1xyXG4gIC8qKiBAdHlwZSB7e1xyXG4gICAqICAgY29kZXM6ICEoQXJyYXkuPG51bWJlcj58VWludDMyQXJyYXkpLFxyXG4gICAqICAgZnJlcXM6ICEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSlcclxuICAgKiB9fSAqL1xyXG4gIHZhciB0cmVlU3ltYm9scztcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdmFyIHRyZWVMZW5ndGhzO1xyXG4gIC8qKiBAdHlwZSB7QXJyYXl9ICovXHJcbiAgdmFyIHRyYW5zTGVuZ3RocyA9IG5ldyBBcnJheSgxOSk7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQxNkFycmF5KX0gKi9cclxuICB2YXIgdHJlZUNvZGVzO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBjb2RlO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBiaXRsZW47XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGk7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGlsO1xyXG5cclxuICAvLyBoZWFkZXJcclxuICBiZmluYWwgPSBpc0ZpbmFsQmxvY2sgPyAxIDogMDtcclxuICBidHlwZSA9IFpsaWIuUmF3RGVmbGF0ZS5Db21wcmVzc2lvblR5cGUuRFlOQU1JQztcclxuXHJcbiAgc3RyZWFtLndyaXRlQml0cyhiZmluYWwsIDEsIHRydWUpO1xyXG4gIHN0cmVhbS53cml0ZUJpdHMoYnR5cGUsIDIsIHRydWUpO1xyXG5cclxuICBkYXRhID0gdGhpcy5sejc3KGJsb2NrQXJyYXkpO1xyXG5cclxuICAvLyDjg6rjg4bjg6njg6vjg7vplbfjgZUsIOi3nembouOBruODj+ODleODnuODs+espuWPt+OBqOespuWPt+mVt+OBrueul+WHulxyXG4gIGxpdExlbkxlbmd0aHMgPSB0aGlzLmdldExlbmd0aHNfKHRoaXMuZnJlcXNMaXRMZW4sIDE1KTtcclxuICBsaXRMZW5Db2RlcyA9IHRoaXMuZ2V0Q29kZXNGcm9tTGVuZ3Roc18obGl0TGVuTGVuZ3Rocyk7XHJcbiAgZGlzdExlbmd0aHMgPSB0aGlzLmdldExlbmd0aHNfKHRoaXMuZnJlcXNEaXN0LCA3KTtcclxuICBkaXN0Q29kZXMgPSB0aGlzLmdldENvZGVzRnJvbUxlbmd0aHNfKGRpc3RMZW5ndGhzKTtcclxuXHJcbiAgLy8gSExJVCwgSERJU1Qg44Gu5rG65a6aXHJcbiAgZm9yIChobGl0ID0gMjg2OyBobGl0ID4gMjU3ICYmIGxpdExlbkxlbmd0aHNbaGxpdCAtIDFdID09PSAwOyBobGl0LS0pIHt9XHJcbiAgZm9yIChoZGlzdCA9IDMwOyBoZGlzdCA+IDEgJiYgZGlzdExlbmd0aHNbaGRpc3QgLSAxXSA9PT0gMDsgaGRpc3QtLSkge31cclxuXHJcbiAgLy8gSENMRU5cclxuICB0cmVlU3ltYm9scyA9XHJcbiAgICB0aGlzLmdldFRyZWVTeW1ib2xzXyhobGl0LCBsaXRMZW5MZW5ndGhzLCBoZGlzdCwgZGlzdExlbmd0aHMpO1xyXG4gIHRyZWVMZW5ndGhzID0gdGhpcy5nZXRMZW5ndGhzXyh0cmVlU3ltYm9scy5mcmVxcywgNyk7XHJcbiAgZm9yIChpID0gMDsgaSA8IDE5OyBpKyspIHtcclxuICAgIHRyYW5zTGVuZ3Roc1tpXSA9IHRyZWVMZW5ndGhzW2hjbGVuT3JkZXJbaV1dO1xyXG4gIH1cclxuICBmb3IgKGhjbGVuID0gMTk7IGhjbGVuID4gNCAmJiB0cmFuc0xlbmd0aHNbaGNsZW4gLSAxXSA9PT0gMDsgaGNsZW4tLSkge31cclxuXHJcbiAgdHJlZUNvZGVzID0gdGhpcy5nZXRDb2Rlc0Zyb21MZW5ndGhzXyh0cmVlTGVuZ3Rocyk7XHJcblxyXG4gIC8vIOWHuuWKm1xyXG4gIHN0cmVhbS53cml0ZUJpdHMoaGxpdCAtIDI1NywgNSwgdHJ1ZSk7XHJcbiAgc3RyZWFtLndyaXRlQml0cyhoZGlzdCAtIDEsIDUsIHRydWUpO1xyXG4gIHN0cmVhbS53cml0ZUJpdHMoaGNsZW4gLSA0LCA0LCB0cnVlKTtcclxuICBmb3IgKGkgPSAwOyBpIDwgaGNsZW47IGkrKykge1xyXG4gICAgc3RyZWFtLndyaXRlQml0cyh0cmFuc0xlbmd0aHNbaV0sIDMsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgLy8g44OE44Oq44O844Gu5Ye65YqbXHJcbiAgZm9yIChpID0gMCwgaWwgPSB0cmVlU3ltYm9scy5jb2Rlcy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcbiAgICBjb2RlID0gdHJlZVN5bWJvbHMuY29kZXNbaV07XHJcblxyXG4gICAgc3RyZWFtLndyaXRlQml0cyh0cmVlQ29kZXNbY29kZV0sIHRyZWVMZW5ndGhzW2NvZGVdLCB0cnVlKTtcclxuXHJcbiAgICAvLyBleHRyYSBiaXRzXHJcbiAgICBpZiAoY29kZSA+PSAxNikge1xyXG4gICAgICBpKys7XHJcbiAgICAgIHN3aXRjaCAoY29kZSkge1xyXG4gICAgICAgIGNhc2UgMTY6IGJpdGxlbiA9IDI7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTc6IGJpdGxlbiA9IDM7IGJyZWFrO1xyXG4gICAgICAgIGNhc2UgMTg6IGJpdGxlbiA9IDc7IGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICB0aHJvdyAnaW52YWxpZCBjb2RlOiAnICsgY29kZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgc3RyZWFtLndyaXRlQml0cyh0cmVlU3ltYm9scy5jb2Rlc1tpXSwgYml0bGVuLCB0cnVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoaXMuZHluYW1pY0h1ZmZtYW4oXHJcbiAgICBkYXRhLFxyXG4gICAgW2xpdExlbkNvZGVzLCBsaXRMZW5MZW5ndGhzXSxcclxuICAgIFtkaXN0Q29kZXMsIGRpc3RMZW5ndGhzXSxcclxuICAgIHN0cmVhbVxyXG4gICk7XHJcblxyXG4gIHJldHVybiBzdHJlYW0uZmluaXNoKCk7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIOWLleeahOODj+ODleODnuODs+espuWPt+WMlijjgqvjgrnjgr/jg6Djg4/jg5Xjg57jg7Pjg4bjg7zjg5bjg6spXHJcbiAqIEBwYXJhbSB7IShBcnJheS48bnVtYmVyPnxVaW50MTZBcnJheSl9IGRhdGFBcnJheSBMWjc3IOespuWPt+WMlua4iOOBvyBieXRlIGFycmF5LlxyXG4gKiBAcGFyYW0geyFabGliLkJpdFN0cmVhbX0gc3RyZWFtIOabuOOBjei+vOOBv+eUqOODk+ODg+ODiOOCueODiOODquODvOODoC5cclxuICogQHJldHVybiB7IVpsaWIuQml0U3RyZWFtfSDjg4/jg5Xjg57jg7PnrKblj7fljJbmuIjjgb/jg5Pjg4Pjg4jjgrnjg4jjg6rjg7zjg6Djgqrjg5bjgrjjgqfjgq/jg4guXHJcbiAqL1xyXG5abGliLlJhd0RlZmxhdGUucHJvdG90eXBlLmR5bmFtaWNIdWZmbWFuID1cclxuZnVuY3Rpb24oZGF0YUFycmF5LCBsaXRMZW4sIGRpc3QsIHN0cmVhbSkge1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBpbmRleDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgbGVuZ3RoO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBsaXRlcmFsO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBjb2RlO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBsaXRMZW5Db2RlcztcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgbGl0TGVuTGVuZ3RocztcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgZGlzdENvZGVzO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBkaXN0TGVuZ3RocztcclxuXHJcbiAgbGl0TGVuQ29kZXMgPSBsaXRMZW5bMF07XHJcbiAgbGl0TGVuTGVuZ3RocyA9IGxpdExlblsxXTtcclxuICBkaXN0Q29kZXMgPSBkaXN0WzBdO1xyXG4gIGRpc3RMZW5ndGhzID0gZGlzdFsxXTtcclxuXHJcbiAgLy8g56ym5Y+344KSIEJpdFN0cmVhbSDjgavmm7jjgY3ovrzjgpPjgafjgYTjgY9cclxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZGF0YUFycmF5Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7ICsraW5kZXgpIHtcclxuICAgIGxpdGVyYWwgPSBkYXRhQXJyYXlbaW5kZXhdO1xyXG5cclxuICAgIC8vIGxpdGVyYWwgb3IgbGVuZ3RoXHJcbiAgICBzdHJlYW0ud3JpdGVCaXRzKGxpdExlbkNvZGVzW2xpdGVyYWxdLCBsaXRMZW5MZW5ndGhzW2xpdGVyYWxdLCB0cnVlKTtcclxuXHJcbiAgICAvLyDplbfjgZXjg7vot53pm6LnrKblj7dcclxuICAgIGlmIChsaXRlcmFsID4gMjU2KSB7XHJcbiAgICAgIC8vIGxlbmd0aCBleHRyYVxyXG4gICAgICBzdHJlYW0ud3JpdGVCaXRzKGRhdGFBcnJheVsrK2luZGV4XSwgZGF0YUFycmF5WysraW5kZXhdLCB0cnVlKTtcclxuICAgICAgLy8gZGlzdGFuY2VcclxuICAgICAgY29kZSA9IGRhdGFBcnJheVsrK2luZGV4XTtcclxuICAgICAgc3RyZWFtLndyaXRlQml0cyhkaXN0Q29kZXNbY29kZV0sIGRpc3RMZW5ndGhzW2NvZGVdLCB0cnVlKTtcclxuICAgICAgLy8gZGlzdGFuY2UgZXh0cmFcclxuICAgICAgc3RyZWFtLndyaXRlQml0cyhkYXRhQXJyYXlbKytpbmRleF0sIGRhdGFBcnJheVsrK2luZGV4XSwgdHJ1ZSk7XHJcbiAgICAvLyDntYLnq69cclxuICAgIH0gZWxzZSBpZiAobGl0ZXJhbCA9PT0gMjU2KSB7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHN0cmVhbTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDlm7rlrprjg4/jg5Xjg57jg7PnrKblj7fljJZcclxuICogQHBhcmFtIHshKEFycmF5LjxudW1iZXI+fFVpbnQxNkFycmF5KX0gZGF0YUFycmF5IExaNzcg56ym5Y+35YyW5riI44G/IGJ5dGUgYXJyYXkuXHJcbiAqIEBwYXJhbSB7IVpsaWIuQml0U3RyZWFtfSBzdHJlYW0g5pu444GN6L6844G/55So44OT44OD44OI44K544OI44Oq44O844OgLlxyXG4gKiBAcmV0dXJuIHshWmxpYi5CaXRTdHJlYW19IOODj+ODleODnuODs+espuWPt+WMlua4iOOBv+ODk+ODg+ODiOOCueODiOODquODvOODoOOCquODluOCuOOCp+OCr+ODiC5cclxuICovXHJcblpsaWIuUmF3RGVmbGF0ZS5wcm90b3R5cGUuZml4ZWRIdWZmbWFuID0gZnVuY3Rpb24oZGF0YUFycmF5LCBzdHJlYW0pIHtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaW5kZXg7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGxlbmd0aDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgbGl0ZXJhbDtcclxuXHJcbiAgLy8g56ym5Y+344KSIEJpdFN0cmVhbSDjgavmm7jjgY3ovrzjgpPjgafjgYTjgY9cclxuICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gZGF0YUFycmF5Lmxlbmd0aDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcclxuICAgIGxpdGVyYWwgPSBkYXRhQXJyYXlbaW5kZXhdO1xyXG5cclxuICAgIC8vIOespuWPt+OBruabuOOBjei+vOOBv1xyXG4gICAgWmxpYi5CaXRTdHJlYW0ucHJvdG90eXBlLndyaXRlQml0cy5hcHBseShcclxuICAgICAgc3RyZWFtLFxyXG4gICAgICBabGliLlJhd0RlZmxhdGUuRml4ZWRIdWZmbWFuVGFibGVbbGl0ZXJhbF1cclxuICAgICk7XHJcblxyXG4gICAgLy8g6ZW344GV44O76Led6Zui56ym5Y+3XHJcbiAgICBpZiAobGl0ZXJhbCA+IDB4MTAwKSB7XHJcbiAgICAgIC8vIGxlbmd0aCBleHRyYVxyXG4gICAgICBzdHJlYW0ud3JpdGVCaXRzKGRhdGFBcnJheVsrK2luZGV4XSwgZGF0YUFycmF5WysraW5kZXhdLCB0cnVlKTtcclxuICAgICAgLy8gZGlzdGFuY2VcclxuICAgICAgc3RyZWFtLndyaXRlQml0cyhkYXRhQXJyYXlbKytpbmRleF0sIDUpO1xyXG4gICAgICAvLyBkaXN0YW5jZSBleHRyYVxyXG4gICAgICBzdHJlYW0ud3JpdGVCaXRzKGRhdGFBcnJheVsrK2luZGV4XSwgZGF0YUFycmF5WysraW5kZXhdLCB0cnVlKTtcclxuICAgIC8vIOe1guerr1xyXG4gICAgfSBlbHNlIGlmIChsaXRlcmFsID09PSAweDEwMCkge1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBzdHJlYW07XHJcbn07XHJcblxyXG4vKipcclxuICog44Oe44OD44OB5oOF5aCxXHJcbiAqIEBwYXJhbSB7IW51bWJlcn0gbGVuZ3RoIOODnuODg+ODgeOBl+OBn+mVt+OBlS5cclxuICogQHBhcmFtIHshbnVtYmVyfSBiYWNrd2FyZERpc3RhbmNlIOODnuODg+ODgeS9jee9ruOBqOOBrui3nemboi5cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqL1xyXG5abGliLlJhd0RlZmxhdGUuTHo3N01hdGNoID0gZnVuY3Rpb24obGVuZ3RoLCBiYWNrd2FyZERpc3RhbmNlKSB7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IG1hdGNoIGxlbmd0aC4gKi9cclxuICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcclxuICAvKiogQHR5cGUge251bWJlcn0gYmFja3dhcmQgZGlzdGFuY2UuICovXHJcbiAgdGhpcy5iYWNrd2FyZERpc3RhbmNlID0gYmFja3dhcmREaXN0YW5jZTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDplbfjgZXnrKblj7fjg4bjg7zjg5bjg6suXHJcbiAqIFvjgrPjg7zjg4ksIOaLoeW8teODk+ODg+ODiCwg5ouh5by144OT44OD44OI6ZW3XSDjga7phY3liJfjgajjgarjgaPjgabjgYTjgosuXHJcbiAqIEBjb25zdFxyXG4gKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50MzJBcnJheSl9XHJcbiAqL1xyXG5abGliLlJhd0RlZmxhdGUuTHo3N01hdGNoLkxlbmd0aENvZGVUYWJsZSA9IChmdW5jdGlvbih0YWJsZSkge1xyXG4gIHJldHVybiBVU0VfVFlQRURBUlJBWSA/IG5ldyBVaW50MzJBcnJheSh0YWJsZSkgOiB0YWJsZTtcclxufSkoKGZ1bmN0aW9uKCkge1xyXG4gIC8qKiBAdHlwZSB7IUFycmF5fSAqL1xyXG4gIHZhciB0YWJsZSA9IFtdO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBpO1xyXG4gIC8qKiBAdHlwZSB7IUFycmF5LjxudW1iZXI+fSAqL1xyXG4gIHZhciBjO1xyXG5cclxuICBmb3IgKGkgPSAzOyBpIDw9IDI1ODsgaSsrKSB7XHJcbiAgICBjID0gY29kZShpKTtcclxuICAgIHRhYmxlW2ldID0gKGNbMl0gPDwgMjQpIHwgKGNbMV0gPDwgMTYpIHwgY1swXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggbHo3NyBsZW5ndGguXHJcbiAgICogQHJldHVybiB7IUFycmF5LjxudW1iZXI+fSBsejc3IGNvZGVzLlxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIGNvZGUobGVuZ3RoKSB7XHJcbiAgICBzd2l0Y2ggKHRydWUpIHtcclxuICAgICAgY2FzZSAobGVuZ3RoID09PSAzKTogcmV0dXJuIFsyNTcsIGxlbmd0aCAtIDMsIDBdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoID09PSA0KTogcmV0dXJuIFsyNTgsIGxlbmd0aCAtIDQsIDBdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoID09PSA1KTogcmV0dXJuIFsyNTksIGxlbmd0aCAtIDUsIDBdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoID09PSA2KTogcmV0dXJuIFsyNjAsIGxlbmd0aCAtIDYsIDBdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoID09PSA3KTogcmV0dXJuIFsyNjEsIGxlbmd0aCAtIDcsIDBdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoID09PSA4KTogcmV0dXJuIFsyNjIsIGxlbmd0aCAtIDgsIDBdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoID09PSA5KTogcmV0dXJuIFsyNjMsIGxlbmd0aCAtIDksIDBdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoID09PSAxMCk6IHJldHVybiBbMjY0LCBsZW5ndGggLSAxMCwgMF07IGJyZWFrO1xyXG4gICAgICBjYXNlIChsZW5ndGggPD0gMTIpOiByZXR1cm4gWzI2NSwgbGVuZ3RoIC0gMTEsIDFdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoIDw9IDE0KTogcmV0dXJuIFsyNjYsIGxlbmd0aCAtIDEzLCAxXTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgKGxlbmd0aCA8PSAxNik6IHJldHVybiBbMjY3LCBsZW5ndGggLSAxNSwgMV07IGJyZWFrO1xyXG4gICAgICBjYXNlIChsZW5ndGggPD0gMTgpOiByZXR1cm4gWzI2OCwgbGVuZ3RoIC0gMTcsIDFdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoIDw9IDIyKTogcmV0dXJuIFsyNjksIGxlbmd0aCAtIDE5LCAyXTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgKGxlbmd0aCA8PSAyNik6IHJldHVybiBbMjcwLCBsZW5ndGggLSAyMywgMl07IGJyZWFrO1xyXG4gICAgICBjYXNlIChsZW5ndGggPD0gMzApOiByZXR1cm4gWzI3MSwgbGVuZ3RoIC0gMjcsIDJdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoIDw9IDM0KTogcmV0dXJuIFsyNzIsIGxlbmd0aCAtIDMxLCAyXTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgKGxlbmd0aCA8PSA0Mik6IHJldHVybiBbMjczLCBsZW5ndGggLSAzNSwgM107IGJyZWFrO1xyXG4gICAgICBjYXNlIChsZW5ndGggPD0gNTApOiByZXR1cm4gWzI3NCwgbGVuZ3RoIC0gNDMsIDNdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoIDw9IDU4KTogcmV0dXJuIFsyNzUsIGxlbmd0aCAtIDUxLCAzXTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgKGxlbmd0aCA8PSA2Nik6IHJldHVybiBbMjc2LCBsZW5ndGggLSA1OSwgM107IGJyZWFrO1xyXG4gICAgICBjYXNlIChsZW5ndGggPD0gODIpOiByZXR1cm4gWzI3NywgbGVuZ3RoIC0gNjcsIDRdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoIDw9IDk4KTogcmV0dXJuIFsyNzgsIGxlbmd0aCAtIDgzLCA0XTsgYnJlYWs7XHJcbiAgICAgIGNhc2UgKGxlbmd0aCA8PSAxMTQpOiByZXR1cm4gWzI3OSwgbGVuZ3RoIC0gOTksIDRdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoIDw9IDEzMCk6IHJldHVybiBbMjgwLCBsZW5ndGggLSAxMTUsIDRdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoIDw9IDE2Mik6IHJldHVybiBbMjgxLCBsZW5ndGggLSAxMzEsIDVdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoIDw9IDE5NCk6IHJldHVybiBbMjgyLCBsZW5ndGggLSAxNjMsIDVdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoIDw9IDIyNik6IHJldHVybiBbMjgzLCBsZW5ndGggLSAxOTUsIDVdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoIDw9IDI1Nyk6IHJldHVybiBbMjg0LCBsZW5ndGggLSAyMjcsIDVdOyBicmVhaztcclxuICAgICAgY2FzZSAobGVuZ3RoID09PSAyNTgpOiByZXR1cm4gWzI4NSwgbGVuZ3RoIC0gMjU4LCAwXTsgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6IHRocm93ICdpbnZhbGlkIGxlbmd0aDogJyArIGxlbmd0aDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0YWJsZTtcclxufSkoKSk7XHJcblxyXG4vKipcclxuICog6Led6Zui56ym5Y+344OG44O844OW44OrXHJcbiAqIEBwYXJhbSB7IW51bWJlcn0gZGlzdCDot53pm6IuXHJcbiAqIEByZXR1cm4geyFBcnJheS48bnVtYmVyPn0g44Kz44O844OJ44CB5ouh5by144OT44OD44OI44CB5ouh5by144OT44OD44OI6ZW344Gu6YWN5YiXLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuWmxpYi5SYXdEZWZsYXRlLkx6NzdNYXRjaC5wcm90b3R5cGUuZ2V0RGlzdGFuY2VDb2RlXyA9IGZ1bmN0aW9uKGRpc3QpIHtcclxuICAvKiogQHR5cGUgeyFBcnJheS48bnVtYmVyPn0gZGlzdGFuY2UgY29kZSB0YWJsZS4gKi9cclxuICB2YXIgcjtcclxuXHJcbiAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICBjYXNlIChkaXN0ID09PSAxKTogciA9IFswLCBkaXN0IC0gMSwgMF07IGJyZWFrO1xyXG4gICAgY2FzZSAoZGlzdCA9PT0gMik6IHIgPSBbMSwgZGlzdCAtIDIsIDBdOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPT09IDMpOiByID0gWzIsIGRpc3QgLSAzLCAwXTsgYnJlYWs7XHJcbiAgICBjYXNlIChkaXN0ID09PSA0KTogciA9IFszLCBkaXN0IC0gNCwgMF07IGJyZWFrO1xyXG4gICAgY2FzZSAoZGlzdCA8PSA2KTogciA9IFs0LCBkaXN0IC0gNSwgMV07IGJyZWFrO1xyXG4gICAgY2FzZSAoZGlzdCA8PSA4KTogciA9IFs1LCBkaXN0IC0gNywgMV07IGJyZWFrO1xyXG4gICAgY2FzZSAoZGlzdCA8PSAxMik6IHIgPSBbNiwgZGlzdCAtIDksIDJdOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gMTYpOiByID0gWzcsIGRpc3QgLSAxMywgMl07IGJyZWFrO1xyXG4gICAgY2FzZSAoZGlzdCA8PSAyNCk6IHIgPSBbOCwgZGlzdCAtIDE3LCAzXTsgYnJlYWs7XHJcbiAgICBjYXNlIChkaXN0IDw9IDMyKTogciA9IFs5LCBkaXN0IC0gMjUsIDNdOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gNDgpOiByID0gWzEwLCBkaXN0IC0gMzMsIDRdOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gNjQpOiByID0gWzExLCBkaXN0IC0gNDksIDRdOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gOTYpOiByID0gWzEyLCBkaXN0IC0gNjUsIDVdOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gMTI4KTogciA9IFsxMywgZGlzdCAtIDk3LCA1XTsgYnJlYWs7XHJcbiAgICBjYXNlIChkaXN0IDw9IDE5Mik6IHIgPSBbMTQsIGRpc3QgLSAxMjksIDZdOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gMjU2KTogciA9IFsxNSwgZGlzdCAtIDE5MywgNl07IGJyZWFrO1xyXG4gICAgY2FzZSAoZGlzdCA8PSAzODQpOiByID0gWzE2LCBkaXN0IC0gMjU3LCA3XTsgYnJlYWs7XHJcbiAgICBjYXNlIChkaXN0IDw9IDUxMik6IHIgPSBbMTcsIGRpc3QgLSAzODUsIDddOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gNzY4KTogciA9IFsxOCwgZGlzdCAtIDUxMywgOF07IGJyZWFrO1xyXG4gICAgY2FzZSAoZGlzdCA8PSAxMDI0KTogciA9IFsxOSwgZGlzdCAtIDc2OSwgOF07IGJyZWFrO1xyXG4gICAgY2FzZSAoZGlzdCA8PSAxNTM2KTogciA9IFsyMCwgZGlzdCAtIDEwMjUsIDldOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gMjA0OCk6IHIgPSBbMjEsIGRpc3QgLSAxNTM3LCA5XTsgYnJlYWs7XHJcbiAgICBjYXNlIChkaXN0IDw9IDMwNzIpOiByID0gWzIyLCBkaXN0IC0gMjA0OSwgMTBdOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gNDA5Nik6IHIgPSBbMjMsIGRpc3QgLSAzMDczLCAxMF07IGJyZWFrO1xyXG4gICAgY2FzZSAoZGlzdCA8PSA2MTQ0KTogciA9IFsyNCwgZGlzdCAtIDQwOTcsIDExXTsgYnJlYWs7XHJcbiAgICBjYXNlIChkaXN0IDw9IDgxOTIpOiByID0gWzI1LCBkaXN0IC0gNjE0NSwgMTFdOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gMTIyODgpOiByID0gWzI2LCBkaXN0IC0gODE5MywgMTJdOyBicmVhaztcclxuICAgIGNhc2UgKGRpc3QgPD0gMTYzODQpOiByID0gWzI3LCBkaXN0IC0gMTIyODksIDEyXTsgYnJlYWs7XHJcbiAgICBjYXNlIChkaXN0IDw9IDI0NTc2KTogciA9IFsyOCwgZGlzdCAtIDE2Mzg1LCAxM107IGJyZWFrO1xyXG4gICAgY2FzZSAoZGlzdCA8PSAzMjc2OCk6IHIgPSBbMjksIGRpc3QgLSAyNDU3NywgMTNdOyBicmVhaztcclxuICAgIGRlZmF1bHQ6IHRocm93ICdpbnZhbGlkIGRpc3RhbmNlJztcclxuICB9XHJcblxyXG4gIHJldHVybiByO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIOODnuODg+ODgeaDheWgseOCkiBMWjc3IOespuWPt+WMlumFjeWIl+OBp+i/lOOBmS5cclxuICog44Gq44GK44CB44GT44GT44Gn44Gv5Lul5LiL44Gu5YaF6YOo5LuV5qeY44Gn56ym5Y+35YyW44GX44Gm44GE44KLXHJcbiAqIFsgQ09ERSwgRVhUUkEtQklULUxFTiwgRVhUUkEsIENPREUsIEVYVFJBLUJJVC1MRU4sIEVYVFJBIF1cclxuICogQHJldHVybiB7IUFycmF5LjxudW1iZXI+fSBMWjc3IOespuWPt+WMliBieXRlIGFycmF5LlxyXG4gKi9cclxuWmxpYi5SYXdEZWZsYXRlLkx6NzdNYXRjaC5wcm90b3R5cGUudG9Mejc3QXJyYXkgPSBmdW5jdGlvbigpIHtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGRpc3QgPSB0aGlzLmJhY2t3YXJkRGlzdGFuY2U7XHJcbiAgLyoqIEB0eXBlIHtBcnJheX0gKi9cclxuICB2YXIgY29kZUFycmF5ID0gW107XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIHBvcyA9IDA7XHJcbiAgLyoqIEB0eXBlIHshQXJyYXkuPG51bWJlcj59ICovXHJcbiAgdmFyIGNvZGU7XHJcblxyXG4gIC8vIGxlbmd0aFxyXG4gIGNvZGUgPSBabGliLlJhd0RlZmxhdGUuTHo3N01hdGNoLkxlbmd0aENvZGVUYWJsZVtsZW5ndGhdO1xyXG4gIGNvZGVBcnJheVtwb3MrK10gPSBjb2RlICYgMHhmZmZmO1xyXG4gIGNvZGVBcnJheVtwb3MrK10gPSAoY29kZSA+PiAxNikgJiAweGZmO1xyXG4gIGNvZGVBcnJheVtwb3MrK10gPSBjb2RlID4+IDI0O1xyXG5cclxuICAvLyBkaXN0YW5jZVxyXG4gIGNvZGUgPSB0aGlzLmdldERpc3RhbmNlQ29kZV8oZGlzdCk7XHJcbiAgY29kZUFycmF5W3BvcysrXSA9IGNvZGVbMF07XHJcbiAgY29kZUFycmF5W3BvcysrXSA9IGNvZGVbMV07XHJcbiAgY29kZUFycmF5W3BvcysrXSA9IGNvZGVbMl07XHJcblxyXG4gIHJldHVybiBjb2RlQXJyYXk7XHJcbn07XHJcblxyXG4vKipcclxuICogTFo3NyDlrp/oo4VcclxuICogQHBhcmFtIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBkYXRhQXJyYXkgTFo3NyDnrKblj7fljJbjgZnjgovjg5DjgqTjg4jphY3liJcuXHJcbiAqIEByZXR1cm4geyEoQXJyYXkuPG51bWJlcj58VWludDE2QXJyYXkpfSBMWjc3IOespuWPt+WMluOBl+OBn+mFjeWIly5cclxuICovXHJcblpsaWIuUmF3RGVmbGF0ZS5wcm90b3R5cGUubHo3NyA9IGZ1bmN0aW9uKGRhdGFBcnJheSkge1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBpbnB1dCBwb3NpdGlvbiAqL1xyXG4gIHZhciBwb3NpdGlvbjtcclxuICAvKiogQHR5cGUge251bWJlcn0gaW5wdXQgbGVuZ3RoICovXHJcbiAgdmFyIGxlbmd0aDtcclxuICAvKiogQHR5cGUge251bWJlcn0gbG9vcCBjb3VudGVyICovXHJcbiAgdmFyIGk7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGxvb3AgbGltaXRlciAqL1xyXG4gIHZhciBpbDtcclxuICAvKiogQHR5cGUge251bWJlcn0gY2hhaW5lZC1oYXNoLXRhYmxlIGtleSAqL1xyXG4gIHZhciBtYXRjaEtleTtcclxuICAvKiogQHR5cGUge09iamVjdC48bnVtYmVyLCBBcnJheS48bnVtYmVyPj59IGNoYWluZWQtaGFzaC10YWJsZSAqL1xyXG4gIHZhciB0YWJsZSA9IHt9O1xyXG4gIC8qKiBAY29uc3QgQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgd2luZG93U2l6ZSA9IFpsaWIuUmF3RGVmbGF0ZS5XaW5kb3dTaXplO1xyXG4gIC8qKiBAdHlwZSB7QXJyYXkuPG51bWJlcj59IG1hdGNoIGxpc3QgKi9cclxuICB2YXIgbWF0Y2hMaXN0O1xyXG4gIC8qKiBAdHlwZSB7WmxpYi5SYXdEZWZsYXRlLkx6NzdNYXRjaH0gbG9uZ2VzdCBtYXRjaCAqL1xyXG4gIHZhciBsb25nZXN0TWF0Y2g7XHJcbiAgLyoqIEB0eXBlIHtabGliLlJhd0RlZmxhdGUuTHo3N01hdGNofSBwcmV2aW91cyBsb25nZXN0IG1hdGNoICovXHJcbiAgdmFyIHByZXZNYXRjaDtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDE2QXJyYXkpfSBsejc3IGJ1ZmZlciAqL1xyXG4gIHZhciBsejc3YnVmID0gVVNFX1RZUEVEQVJSQVkgP1xyXG4gICAgbmV3IFVpbnQxNkFycmF5KGRhdGFBcnJheS5sZW5ndGggKiAyKSA6IFtdO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBsejc3IG91dHB1dCBidWZmZXIgcG9pbnRlciAqL1xyXG4gIHZhciBwb3MgPSAwO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBsejc3IHNraXAgbGVuZ3RoICovXHJcbiAgdmFyIHNraXBMZW5ndGggPSAwO1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50MzJBcnJheSl9ICovXHJcbiAgdmFyIGZyZXFzTGl0TGVuID0gbmV3IChVU0VfVFlQRURBUlJBWSA/IFVpbnQzMkFycmF5IDogQXJyYXkpKDI4Nik7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQzMkFycmF5KX0gKi9cclxuICB2YXIgZnJlcXNEaXN0ID0gbmV3IChVU0VfVFlQRURBUlJBWSA/IFVpbnQzMkFycmF5IDogQXJyYXkpKDMwKTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgbGF6eSA9IHRoaXMubGF6eTtcclxuICAvKiogQHR5cGUgeyp9IHRlbXBvcmFyeSB2YXJpYWJsZSAqL1xyXG4gIHZhciB0bXA7XHJcblxyXG4gIC8vIOWIneacn+WMllxyXG4gIGlmICghVVNFX1RZUEVEQVJSQVkpIHtcclxuICAgIGZvciAoaSA9IDA7IGkgPD0gMjg1OykgeyBmcmVxc0xpdExlbltpKytdID0gMDsgfVxyXG4gICAgZm9yIChpID0gMDsgaSA8PSAyOTspIHsgZnJlcXNEaXN0W2krK10gPSAwOyB9XHJcbiAgfVxyXG4gIGZyZXFzTGl0TGVuWzI1Nl0gPSAxOyAvLyBFT0Ig44Gu5pyA5L2O5Ye654++5Zue5pWw44GvIDFcclxuXHJcbiAgLyoqXHJcbiAgICog44Oe44OD44OB44OH44O844K/44Gu5pu444GN6L6844G/XHJcbiAgICogQHBhcmFtIHtabGliLlJhd0RlZmxhdGUuTHo3N01hdGNofSBtYXRjaCBMWjc3IE1hdGNoIGRhdGEuXHJcbiAgICogQHBhcmFtIHshbnVtYmVyfSBvZmZzZXQg44K544Kt44OD44OX6ZaL5aeL5L2N572uKOebuOWvvuaMh+WumikuXHJcbiAgICogQHByaXZhdGVcclxuICAgKi9cclxuICBmdW5jdGlvbiB3cml0ZU1hdGNoKG1hdGNoLCBvZmZzZXQpIHtcclxuICAgIC8qKiBAdHlwZSB7QXJyYXkuPG51bWJlcj59ICovXHJcbiAgICB2YXIgbHo3N0FycmF5ID0gbWF0Y2gudG9Mejc3QXJyYXkoKTtcclxuICAgIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gICAgdmFyIGk7XHJcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICAgIHZhciBpbDtcclxuXHJcbiAgICBmb3IgKGkgPSAwLCBpbCA9IGx6NzdBcnJheS5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XHJcbiAgICAgIGx6NzdidWZbcG9zKytdID0gbHo3N0FycmF5W2ldO1xyXG4gICAgfVxyXG4gICAgZnJlcXNMaXRMZW5bbHo3N0FycmF5WzBdXSsrO1xyXG4gICAgZnJlcXNEaXN0W2x6NzdBcnJheVszXV0rKztcclxuICAgIHNraXBMZW5ndGggPSBtYXRjaC5sZW5ndGggKyBvZmZzZXQgLSAxO1xyXG4gICAgcHJldk1hdGNoID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8vIExaNzcg56ym5Y+35YyWXHJcbiAgZm9yIChwb3NpdGlvbiA9IDAsIGxlbmd0aCA9IGRhdGFBcnJheS5sZW5ndGg7IHBvc2l0aW9uIDwgbGVuZ3RoOyArK3Bvc2l0aW9uKSB7XHJcbiAgICAvLyDjg4/jg4Pjgrfjg6Xjgq3jg7zjga7kvZzmiJBcclxuICAgIGZvciAobWF0Y2hLZXkgPSAwLCBpID0gMCwgaWwgPSBabGliLlJhd0RlZmxhdGUuTHo3N01pbkxlbmd0aDsgaSA8IGlsOyArK2kpIHtcclxuICAgICAgaWYgKHBvc2l0aW9uICsgaSA9PT0gbGVuZ3RoKSB7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgICAgbWF0Y2hLZXkgPSAobWF0Y2hLZXkgPDwgOCkgfCBkYXRhQXJyYXlbcG9zaXRpb24gKyBpXTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDjg4bjg7zjg5bjg6vjgYzmnKrlrprnvqnjgaDjgaPjgZ/jgonkvZzmiJDjgZnjgotcclxuICAgIGlmICh0YWJsZVttYXRjaEtleV0gPT09IHZvaWQgMCkgeyB0YWJsZVttYXRjaEtleV0gPSBbXTsgfVxyXG4gICAgbWF0Y2hMaXN0ID0gdGFibGVbbWF0Y2hLZXldO1xyXG5cclxuICAgIC8vIHNraXBcclxuICAgIGlmIChza2lwTGVuZ3RoLS0gPiAwKSB7XHJcbiAgICAgIG1hdGNoTGlzdC5wdXNoKHBvc2l0aW9uKTtcclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Oe44OD44OB44OG44O844OW44Or44Gu5pu05pawICjmnIDlpKfmiLvjgorot53pm6LjgpLotoXjgYjjgabjgYTjgovjgoLjga7jgpLliYrpmaTjgZnjgospXHJcbiAgICB3aGlsZSAobWF0Y2hMaXN0Lmxlbmd0aCA+IDAgJiYgcG9zaXRpb24gLSBtYXRjaExpc3RbMF0gPiB3aW5kb3dTaXplKSB7XHJcbiAgICAgIG1hdGNoTGlzdC5zaGlmdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOODh+ODvOOCv+acq+WwvuOBp+ODnuODg+ODgeOBl+OCiOOBhuOBjOOBquOBhOWgtOWQiOOBr+OBneOBruOBvuOBvua1geOBl+OBk+OCgFxyXG4gICAgaWYgKHBvc2l0aW9uICsgWmxpYi5SYXdEZWZsYXRlLkx6NzdNaW5MZW5ndGggPj0gbGVuZ3RoKSB7XHJcbiAgICAgIGlmIChwcmV2TWF0Y2gpIHtcclxuICAgICAgICB3cml0ZU1hdGNoKHByZXZNYXRjaCwgLTEpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKGkgPSAwLCBpbCA9IGxlbmd0aCAtIHBvc2l0aW9uOyBpIDwgaWw7ICsraSkge1xyXG4gICAgICAgIHRtcCA9IGRhdGFBcnJheVtwb3NpdGlvbiArIGldO1xyXG4gICAgICAgIGx6NzdidWZbcG9zKytdID0gdG1wO1xyXG4gICAgICAgICsrZnJlcXNMaXRMZW5bdG1wXTtcclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuXHJcbiAgICAvLyDjg57jg4Pjg4HlgJnoo5zjgYvjgonmnIDplbfjga7jgoLjga7jgpLmjqLjgZlcclxuICAgIGlmIChtYXRjaExpc3QubGVuZ3RoID4gMCkge1xyXG4gICAgICBsb25nZXN0TWF0Y2ggPSB0aGlzLnNlYXJjaExvbmdlc3RNYXRjaF8oZGF0YUFycmF5LCBwb3NpdGlvbiwgbWF0Y2hMaXN0KTtcclxuXHJcbiAgICAgIGlmIChwcmV2TWF0Y2gpIHtcclxuICAgICAgICAvLyDnj77lnKjjga7jg57jg4Pjg4Hjga7mlrnjgYzliY3lm57jga7jg57jg4Pjg4HjgojjgorjgoLplbfjgYRcclxuICAgICAgICBpZiAocHJldk1hdGNoLmxlbmd0aCA8IGxvbmdlc3RNYXRjaC5sZW5ndGgpIHtcclxuICAgICAgICAgIC8vIHdyaXRlIHByZXZpb3VzIGxpdGVyYWxcclxuICAgICAgICAgIHRtcCA9IGRhdGFBcnJheVtwb3NpdGlvbiAtIDFdO1xyXG4gICAgICAgICAgbHo3N2J1Zltwb3MrK10gPSB0bXA7XHJcbiAgICAgICAgICArK2ZyZXFzTGl0TGVuW3RtcF07XHJcblxyXG4gICAgICAgICAgLy8gd3JpdGUgY3VycmVudCBtYXRjaFxyXG4gICAgICAgICAgd3JpdGVNYXRjaChsb25nZXN0TWF0Y2gsIDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAvLyB3cml0ZSBwcmV2aW91cyBtYXRjaFxyXG4gICAgICAgICAgd3JpdGVNYXRjaChwcmV2TWF0Y2gsIC0xKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAobG9uZ2VzdE1hdGNoLmxlbmd0aCA8IGxhenkpIHtcclxuICAgICAgICBwcmV2TWF0Y2ggPSBsb25nZXN0TWF0Y2g7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd3JpdGVNYXRjaChsb25nZXN0TWF0Y2gsIDApO1xyXG4gICAgICB9XHJcbiAgICAvLyDliY3lm57jg57jg4Pjg4HjgZfjgabjgYTjgabku4rlm57jg57jg4Pjg4HjgYzjgarjgYvjgaPjgZ/jgonliY3lm57jga7jgpLmjqHnlKhcclxuICAgIH0gZWxzZSBpZiAocHJldk1hdGNoKSB7XHJcbiAgICAgIHdyaXRlTWF0Y2gocHJldk1hdGNoLCAtMSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0bXAgPSBkYXRhQXJyYXlbcG9zaXRpb25dO1xyXG4gICAgICBsejc3YnVmW3BvcysrXSA9IHRtcDtcclxuICAgICAgKytmcmVxc0xpdExlblt0bXBdO1xyXG4gICAgfVxyXG5cclxuICAgIG1hdGNoTGlzdC5wdXNoKHBvc2l0aW9uKTsgLy8g44Oe44OD44OB44OG44O844OW44Or44Gr54++5Zyo44Gu5L2N572u44KS5L+d5a2YXHJcbiAgfVxyXG5cclxuICAvLyDntYLnq6/lh6bnkIZcclxuICBsejc3YnVmW3BvcysrXSA9IDI1NjtcclxuICBmcmVxc0xpdExlblsyNTZdKys7XHJcbiAgdGhpcy5mcmVxc0xpdExlbiA9IGZyZXFzTGl0TGVuO1xyXG4gIHRoaXMuZnJlcXNEaXN0ID0gZnJlcXNEaXN0O1xyXG5cclxuICByZXR1cm4gLyoqIEB0eXBlIHshKFVpbnQxNkFycmF5fEFycmF5LjxudW1iZXI+KX0gKi8gKFxyXG4gICAgVVNFX1RZUEVEQVJSQVkgPyAgbHo3N2J1Zi5zdWJhcnJheSgwLCBwb3MpIDogbHo3N2J1ZlxyXG4gICk7XHJcbn07XHJcblxyXG4vKipcclxuICog44Oe44OD44OB44GX44Gf5YCZ6KOc44Gu5Lit44GL44KJ5pyA6ZW35LiA6Ie044KS5o6i44GZXHJcbiAqIEBwYXJhbSB7IU9iamVjdH0gZGF0YSBwbGFpbiBkYXRhIGJ5dGUgYXJyYXkuXHJcbiAqIEBwYXJhbSB7IW51bWJlcn0gcG9zaXRpb24gcGxhaW4gZGF0YSBieXRlIGFycmF5IHBvc2l0aW9uLlxyXG4gKiBAcGFyYW0geyFBcnJheS48bnVtYmVyPn0gbWF0Y2hMaXN0IOWAmeijnOOBqOOBquOCi+S9jee9ruOBrumFjeWIly5cclxuICogQHJldHVybiB7IVpsaWIuUmF3RGVmbGF0ZS5Mejc3TWF0Y2h9IOacgOmVt+OBi+OBpOacgOefrei3nembouOBruODnuODg+ODgeOCquODluOCuOOCp+OCr+ODiC5cclxuICogQHByaXZhdGVcclxuICovXHJcblpsaWIuUmF3RGVmbGF0ZS5wcm90b3R5cGUuc2VhcmNoTG9uZ2VzdE1hdGNoXyA9XHJcbmZ1bmN0aW9uKGRhdGEsIHBvc2l0aW9uLCBtYXRjaExpc3QpIHtcclxuICB2YXIgbWF0Y2gsXHJcbiAgICAgIGN1cnJlbnRNYXRjaCxcclxuICAgICAgbWF0Y2hNYXggPSAwLCBtYXRjaExlbmd0aCxcclxuICAgICAgaSwgaiwgbCwgZGwgPSBkYXRhLmxlbmd0aDtcclxuXHJcbiAgLy8g5YCZ6KOc44KS5b6M44KN44GL44KJIDEg44Gk44Ga44Gk57We44KK6L6844KT44Gn44KG44GPXHJcbiAgcGVybWF0Y2g6XHJcbiAgZm9yIChpID0gMCwgbCA9IG1hdGNoTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgIG1hdGNoID0gbWF0Y2hMaXN0W2wgLSBpIC0gMV07XHJcbiAgICBtYXRjaExlbmd0aCA9IFpsaWIuUmF3RGVmbGF0ZS5Mejc3TWluTGVuZ3RoO1xyXG5cclxuICAgIC8vIOWJjeWbnuOBvuOBp+OBruacgOmVt+S4gOiHtOOCkuacq+WwvuOBi+OCieS4gOiHtOaknOe0ouOBmeOCi1xyXG4gICAgaWYgKG1hdGNoTWF4ID4gWmxpYi5SYXdEZWZsYXRlLkx6NzdNaW5MZW5ndGgpIHtcclxuICAgICAgZm9yIChqID0gbWF0Y2hNYXg7IGogPiBabGliLlJhd0RlZmxhdGUuTHo3N01pbkxlbmd0aDsgai0tKSB7XHJcbiAgICAgICAgaWYgKGRhdGFbbWF0Y2ggKyBqIC0gMV0gIT09IGRhdGFbcG9zaXRpb24gKyBqIC0gMV0pIHtcclxuICAgICAgICAgIGNvbnRpbnVlIHBlcm1hdGNoO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBtYXRjaExlbmd0aCA9IG1hdGNoTWF4O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOacgOmVt+S4gOiHtOaOoue0olxyXG4gICAgd2hpbGUgKG1hdGNoTGVuZ3RoIDwgWmxpYi5SYXdEZWZsYXRlLkx6NzdNYXhMZW5ndGggJiZcclxuICAgICAgICAgICBwb3NpdGlvbiArIG1hdGNoTGVuZ3RoIDwgZGwgJiZcclxuICAgICAgICAgICBkYXRhW21hdGNoICsgbWF0Y2hMZW5ndGhdID09PSBkYXRhW3Bvc2l0aW9uICsgbWF0Y2hMZW5ndGhdKSB7XHJcbiAgICAgICsrbWF0Y2hMZW5ndGg7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g44Oe44OD44OB6ZW344GM5ZCM44GY5aC05ZCI44Gv5b6M5pa544KS5YSq5YWIXHJcbiAgICBpZiAobWF0Y2hMZW5ndGggPiBtYXRjaE1heCkge1xyXG4gICAgICBjdXJyZW50TWF0Y2ggPSBtYXRjaDtcclxuICAgICAgbWF0Y2hNYXggPSBtYXRjaExlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmnIDplbfjgYznorrlrprjgZfjgZ/jgonlvozjga7lh6bnkIbjga/nnIHnlaVcclxuICAgIGlmIChtYXRjaExlbmd0aCA9PT0gWmxpYi5SYXdEZWZsYXRlLkx6NzdNYXhMZW5ndGgpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gbmV3IFpsaWIuUmF3RGVmbGF0ZS5Mejc3TWF0Y2gobWF0Y2hNYXgsIHBvc2l0aW9uIC0gY3VycmVudE1hdGNoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBUcmVlLVRyYW5zbWl0IFN5bWJvbHMg44Gu566X5Ye6XHJcbiAqIHJlZmVyZW5jZTogUHVUVFkgRGVmbGF0ZSBpbXBsZW1lbnRhdGlvblxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGxpdCBITElULlxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGxpdGxlbkxlbmd0aHMg44Oq44OG44Op44Or44Go6ZW344GV56ym5Y+344Gu56ym5Y+36ZW36YWN5YiXLlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaGRpc3QgSERJU1QuXHJcbiAqIEBwYXJhbSB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0gZGlzdExlbmd0aHMg6Led6Zui56ym5Y+344Gu56ym5Y+36ZW36YWN5YiXLlxyXG4gKiBAcmV0dXJuIHt7XHJcbiAqICAgY29kZXM6ICEoQXJyYXkuPG51bWJlcj58VWludDMyQXJyYXkpLFxyXG4gKiAgIGZyZXFzOiAhKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpXHJcbiAqIH19IFRyZWUtVHJhbnNtaXQgU3ltYm9scy5cclxuICovXHJcblpsaWIuUmF3RGVmbGF0ZS5wcm90b3R5cGUuZ2V0VHJlZVN5bWJvbHNfID1cclxuZnVuY3Rpb24oaGxpdCwgbGl0bGVuTGVuZ3RocywgaGRpc3QsIGRpc3RMZW5ndGhzKSB7XHJcbiAgdmFyIHNyYyA9IG5ldyAoVVNFX1RZUEVEQVJSQVkgPyBVaW50MzJBcnJheSA6IEFycmF5KShobGl0ICsgaGRpc3QpLFxyXG4gICAgICBpLCBqLCBydW5MZW5ndGgsIGwsXHJcbiAgICAgIHJlc3VsdCA9IG5ldyAoVVNFX1RZUEVEQVJSQVkgPyBVaW50MzJBcnJheSA6IEFycmF5KSgyODYgKyAzMCksXHJcbiAgICAgIG5SZXN1bHQsXHJcbiAgICAgIHJwdCxcclxuICAgICAgZnJlcXMgPSBuZXcgKFVTRV9UWVBFREFSUkFZID8gVWludDhBcnJheSA6IEFycmF5KSgxOSk7XHJcblxyXG4gIGogPSAwO1xyXG4gIGZvciAoaSA9IDA7IGkgPCBobGl0OyBpKyspIHtcclxuICAgIHNyY1tqKytdID0gbGl0bGVuTGVuZ3Roc1tpXTtcclxuICB9XHJcbiAgZm9yIChpID0gMDsgaSA8IGhkaXN0OyBpKyspIHtcclxuICAgIHNyY1tqKytdID0gZGlzdExlbmd0aHNbaV07XHJcbiAgfVxyXG5cclxuICAvLyDliJ3mnJ/ljJZcclxuICBpZiAoIVVTRV9UWVBFREFSUkFZKSB7XHJcbiAgICBmb3IgKGkgPSAwLCBsID0gZnJlcXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XHJcbiAgICAgIGZyZXFzW2ldID0gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIOespuWPt+WMllxyXG4gIG5SZXN1bHQgPSAwO1xyXG4gIGZvciAoaSA9IDAsIGwgPSBzcmMubGVuZ3RoOyBpIDwgbDsgaSArPSBqKSB7XHJcbiAgICAvLyBSdW4gTGVuZ3RoIEVuY29kaW5nXHJcbiAgICBmb3IgKGogPSAxOyBpICsgaiA8IGwgJiYgc3JjW2kgKyBqXSA9PT0gc3JjW2ldOyArK2opIHt9XHJcblxyXG4gICAgcnVuTGVuZ3RoID0gajtcclxuXHJcbiAgICBpZiAoc3JjW2ldID09PSAwKSB7XHJcbiAgICAgIC8vIDAg44Gu57mw44KK6L+U44GX44GMIDMg5Zue5pyq5rqA44Gq44KJ44Gw44Gd44Gu44G+44G+XHJcbiAgICAgIGlmIChydW5MZW5ndGggPCAzKSB7XHJcbiAgICAgICAgd2hpbGUgKHJ1bkxlbmd0aC0tID4gMCkge1xyXG4gICAgICAgICAgcmVzdWx0W25SZXN1bHQrK10gPSAwO1xyXG4gICAgICAgICAgZnJlcXNbMF0rKztcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgd2hpbGUgKHJ1bkxlbmd0aCA+IDApIHtcclxuICAgICAgICAgIC8vIOe5sOOCiui/lOOBl+OBr+acgOWkpyAxMzgg44G+44Gn44Gq44Gu44Gn5YiH44KK6Kmw44KB44KLXHJcbiAgICAgICAgICBycHQgPSAocnVuTGVuZ3RoIDwgMTM4ID8gcnVuTGVuZ3RoIDogMTM4KTtcclxuXHJcbiAgICAgICAgICBpZiAocnB0ID4gcnVuTGVuZ3RoIC0gMyAmJiBycHQgPCBydW5MZW5ndGgpIHtcclxuICAgICAgICAgICAgcnB0ID0gcnVuTGVuZ3RoIC0gMztcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyAzLTEwIOWbniAtPiAxN1xyXG4gICAgICAgICAgaWYgKHJwdCA8PSAxMCkge1xyXG4gICAgICAgICAgICByZXN1bHRbblJlc3VsdCsrXSA9IDE3O1xyXG4gICAgICAgICAgICByZXN1bHRbblJlc3VsdCsrXSA9IHJwdCAtIDM7XHJcbiAgICAgICAgICAgIGZyZXFzWzE3XSsrO1xyXG4gICAgICAgICAgLy8gMTEtMTM4IOWbniAtPiAxOFxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0W25SZXN1bHQrK10gPSAxODtcclxuICAgICAgICAgICAgcmVzdWx0W25SZXN1bHQrK10gPSBycHQgLSAxMTtcclxuICAgICAgICAgICAgZnJlcXNbMThdKys7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcnVuTGVuZ3RoIC09IHJwdDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJlc3VsdFtuUmVzdWx0KytdID0gc3JjW2ldO1xyXG4gICAgICBmcmVxc1tzcmNbaV1dKys7XHJcbiAgICAgIHJ1bkxlbmd0aC0tO1xyXG5cclxuICAgICAgLy8g57mw44KK6L+U44GX5Zue5pWw44GMM+Wbnuacqua6gOOBquOCieOBsOODqeODs+ODrOODs+OCsOOCueespuWPt+OBr+imgeOCieOBquOBhFxyXG4gICAgICBpZiAocnVuTGVuZ3RoIDwgMykge1xyXG4gICAgICAgIHdoaWxlIChydW5MZW5ndGgtLSA+IDApIHtcclxuICAgICAgICAgIHJlc3VsdFtuUmVzdWx0KytdID0gc3JjW2ldO1xyXG4gICAgICAgICAgZnJlcXNbc3JjW2ldXSsrO1xyXG4gICAgICAgIH1cclxuICAgICAgLy8gMyDlm57ku6XkuIrjgarjgonjgbDjg6njg7Pjg6zjg7PjgrDjgrnnrKblj7fljJZcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB3aGlsZSAocnVuTGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgLy8gcnVuTGVuZ3Ro44KSIDMtNiDjgafliIblibJcclxuICAgICAgICAgIHJwdCA9IChydW5MZW5ndGggPCA2ID8gcnVuTGVuZ3RoIDogNik7XHJcblxyXG4gICAgICAgICAgaWYgKHJwdCA+IHJ1bkxlbmd0aCAtIDMgJiYgcnB0IDwgcnVuTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJwdCA9IHJ1bkxlbmd0aCAtIDM7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmVzdWx0W25SZXN1bHQrK10gPSAxNjtcclxuICAgICAgICAgIHJlc3VsdFtuUmVzdWx0KytdID0gcnB0IC0gMztcclxuICAgICAgICAgIGZyZXFzWzE2XSsrO1xyXG5cclxuICAgICAgICAgIHJ1bkxlbmd0aCAtPSBycHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4ge1xyXG4gICAgY29kZXM6XHJcbiAgICAgIFVTRV9UWVBFREFSUkFZID8gcmVzdWx0LnN1YmFycmF5KDAsIG5SZXN1bHQpIDogcmVzdWx0LnNsaWNlKDAsIG5SZXN1bHQpLFxyXG4gICAgZnJlcXM6IGZyZXFzXHJcbiAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiDjg4/jg5Xjg57jg7PnrKblj7fjga7plbfjgZXjgpLlj5blvpfjgZnjgotcclxuICogQHBhcmFtIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXl8VWludDMyQXJyYXkpfSBmcmVxcyDlh7rnj77jgqvjgqbjg7Pjg4guXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBsaW1pdCDnrKblj7fplbfjga7liLbpmZAuXHJcbiAqIEByZXR1cm4geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IOespuWPt+mVt+mFjeWIly5cclxuICogQHByaXZhdGVcclxuICovXHJcblpsaWIuUmF3RGVmbGF0ZS5wcm90b3R5cGUuZ2V0TGVuZ3Roc18gPSBmdW5jdGlvbihmcmVxcywgbGltaXQpIHtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgblN5bWJvbHMgPSBmcmVxcy5sZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHtabGliLkhlYXB9ICovXHJcbiAgdmFyIGhlYXAgPSBuZXcgWmxpYi5IZWFwKDIgKiBabGliLlJhd0RlZmxhdGUuSFVGTUFYKTtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdmFyIGxlbmd0aCA9IG5ldyAoVVNFX1RZUEVEQVJSQVkgPyBVaW50OEFycmF5IDogQXJyYXkpKG5TeW1ib2xzKTtcclxuICAvKiogQHR5cGUge0FycmF5fSAqL1xyXG4gIHZhciBub2RlcztcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDMyQXJyYXkpfSAqL1xyXG4gIHZhciB2YWx1ZXM7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHZhciBjb2RlTGVuZ3RoO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBpO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBpbDtcclxuXHJcbiAgLy8g6YWN5YiX44Gu5Yid5pyf5YyWXHJcbiAgaWYgKCFVU0VfVFlQRURBUlJBWSkge1xyXG4gICAgZm9yIChpID0gMDsgaSA8IG5TeW1ib2xzOyBpKyspIHtcclxuICAgICAgbGVuZ3RoW2ldID0gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIOODkuODvOODl+OBruani+eviVxyXG4gIGZvciAoaSA9IDA7IGkgPCBuU3ltYm9sczsgKytpKSB7XHJcbiAgICBpZiAoZnJlcXNbaV0gPiAwKSB7XHJcbiAgICAgIGhlYXAucHVzaChpLCBmcmVxc1tpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIG5vZGVzID0gbmV3IEFycmF5KGhlYXAubGVuZ3RoIC8gMik7XHJcbiAgdmFsdWVzID0gbmV3IChVU0VfVFlQRURBUlJBWSA/IFVpbnQzMkFycmF5IDogQXJyYXkpKGhlYXAubGVuZ3RoIC8gMik7XHJcblxyXG4gIC8vIOmdniAwIOOBruimgee0oOOBjOS4gOOBpOOBoOOBkeOBoOOBo+OBn+WgtOWQiOOBr+OAgeOBneOBruOCt+ODs+ODnOODq+OBq+espuWPt+mVtyAxIOOCkuWJsuOCiuW9k+OBpuOBpue1guS6hlxyXG4gIGlmIChub2Rlcy5sZW5ndGggPT09IDEpIHtcclxuICAgIGxlbmd0aFtoZWFwLnBvcCgpLmluZGV4XSA9IDE7XHJcbiAgICByZXR1cm4gbGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLy8gUmV2ZXJzZSBQYWNrYWdlIE1lcmdlIEFsZ29yaXRobSDjgavjgojjgosgQ2Fub25pY2FsIEh1ZmZtYW4gQ29kZSDjga7nrKblj7fplbfmsbrlrppcclxuICBmb3IgKGkgPSAwLCBpbCA9IGhlYXAubGVuZ3RoIC8gMjsgaSA8IGlsOyArK2kpIHtcclxuICAgIG5vZGVzW2ldID0gaGVhcC5wb3AoKTtcclxuICAgIHZhbHVlc1tpXSA9IG5vZGVzW2ldLnZhbHVlO1xyXG4gIH1cclxuICBjb2RlTGVuZ3RoID0gdGhpcy5yZXZlcnNlUGFja2FnZU1lcmdlXyh2YWx1ZXMsIHZhbHVlcy5sZW5ndGgsIGxpbWl0KTtcclxuXHJcbiAgZm9yIChpID0gMCwgaWwgPSBub2Rlcy5sZW5ndGg7IGkgPCBpbDsgKytpKSB7XHJcbiAgICBsZW5ndGhbbm9kZXNbaV0uaW5kZXhdID0gY29kZUxlbmd0aFtpXTtcclxuICB9XHJcblxyXG4gIHJldHVybiBsZW5ndGg7XHJcbn07XHJcblxyXG4vKipcclxuICogUmV2ZXJzZSBQYWNrYWdlIE1lcmdlIEFsZ29yaXRobS5cclxuICogQHBhcmFtIHshKEFycmF5LjxudW1iZXI+fFVpbnQzMkFycmF5KX0gZnJlcXMgc29ydGVkIHByb2JhYmlsaXR5LlxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3ltYm9scyBudW1iZXIgb2Ygc3ltYm9scy5cclxuICogQHBhcmFtIHtudW1iZXJ9IGxpbWl0IGNvZGUgbGVuZ3RoIGxpbWl0LlxyXG4gKiBAcmV0dXJuIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBjb2RlIGxlbmd0aHMuXHJcbiAqL1xyXG5abGliLlJhd0RlZmxhdGUucHJvdG90eXBlLnJldmVyc2VQYWNrYWdlTWVyZ2VfID0gZnVuY3Rpb24oZnJlcXMsIHN5bWJvbHMsIGxpbWl0KSB7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQxNkFycmF5KX0gKi9cclxuICB2YXIgbWluaW11bUNvc3QgPSBuZXcgKFVTRV9UWVBFREFSUkFZID8gVWludDE2QXJyYXkgOiBBcnJheSkobGltaXQpO1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0gKi9cclxuICB2YXIgZmxhZyA9IG5ldyAoVVNFX1RZUEVEQVJSQVkgPyBVaW50OEFycmF5IDogQXJyYXkpKGxpbWl0KTtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdmFyIGNvZGVMZW5ndGggPSBuZXcgKFVTRV9UWVBFREFSUkFZID8gVWludDhBcnJheSA6IEFycmF5KShzeW1ib2xzKTtcclxuICAvKiogQHR5cGUge0FycmF5fSAqL1xyXG4gIHZhciB2YWx1ZSA9IG5ldyBBcnJheShsaW1pdCk7XHJcbiAgLyoqIEB0eXBlIHtBcnJheX0gKi9cclxuICB2YXIgdHlwZSAgPSBuZXcgQXJyYXkobGltaXQpO1xyXG4gIC8qKiBAdHlwZSB7QXJyYXkuPG51bWJlcj59ICovXHJcbiAgdmFyIGN1cnJlbnRQb3NpdGlvbiA9IG5ldyBBcnJheShsaW1pdCk7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGV4Y2VzcyA9ICgxIDw8IGxpbWl0KSAtIHN5bWJvbHM7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGhhbGYgPSAoMSA8PCAobGltaXQgLSAxKSk7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGk7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGo7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIHQ7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIHdlaWdodDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgbmV4dDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IGpcclxuICAgKi9cclxuICBmdW5jdGlvbiB0YWtlUGFja2FnZShqKSB7XHJcbiAgICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICAgIHZhciB4ID0gdHlwZVtqXVtjdXJyZW50UG9zaXRpb25bal1dO1xyXG5cclxuICAgIGlmICh4ID09PSBzeW1ib2xzKSB7XHJcbiAgICAgIHRha2VQYWNrYWdlKGorMSk7XHJcbiAgICAgIHRha2VQYWNrYWdlKGorMSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAtLWNvZGVMZW5ndGhbeF07XHJcbiAgICB9XHJcblxyXG4gICAgKytjdXJyZW50UG9zaXRpb25bal07XHJcbiAgfVxyXG5cclxuICBtaW5pbXVtQ29zdFtsaW1pdC0xXSA9IHN5bWJvbHM7XHJcblxyXG4gIGZvciAoaiA9IDA7IGogPCBsaW1pdDsgKytqKSB7XHJcbiAgICBpZiAoZXhjZXNzIDwgaGFsZikge1xyXG4gICAgICBmbGFnW2pdID0gMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGZsYWdbal0gPSAxO1xyXG4gICAgICBleGNlc3MgLT0gaGFsZjtcclxuICAgIH1cclxuICAgIGV4Y2VzcyA8PD0gMTtcclxuICAgIG1pbmltdW1Db3N0W2xpbWl0LTItal0gPSAobWluaW11bUNvc3RbbGltaXQtMS1qXSAvIDIgfCAwKSArIHN5bWJvbHM7XHJcbiAgfVxyXG4gIG1pbmltdW1Db3N0WzBdID0gZmxhZ1swXTtcclxuXHJcbiAgdmFsdWVbMF0gPSBuZXcgQXJyYXkobWluaW11bUNvc3RbMF0pO1xyXG4gIHR5cGVbMF0gID0gbmV3IEFycmF5KG1pbmltdW1Db3N0WzBdKTtcclxuICBmb3IgKGogPSAxOyBqIDwgbGltaXQ7ICsraikge1xyXG4gICAgaWYgKG1pbmltdW1Db3N0W2pdID4gMiAqIG1pbmltdW1Db3N0W2otMV0gKyBmbGFnW2pdKSB7XHJcbiAgICAgIG1pbmltdW1Db3N0W2pdID0gMiAqIG1pbmltdW1Db3N0W2otMV0gKyBmbGFnW2pdO1xyXG4gICAgfVxyXG4gICAgdmFsdWVbal0gPSBuZXcgQXJyYXkobWluaW11bUNvc3Rbal0pO1xyXG4gICAgdHlwZVtqXSAgPSBuZXcgQXJyYXkobWluaW11bUNvc3Rbal0pO1xyXG4gIH1cclxuXHJcbiAgZm9yIChpID0gMDsgaSA8IHN5bWJvbHM7ICsraSkge1xyXG4gICAgY29kZUxlbmd0aFtpXSA9IGxpbWl0O1xyXG4gIH1cclxuXHJcbiAgZm9yICh0ID0gMDsgdCA8IG1pbmltdW1Db3N0W2xpbWl0LTFdOyArK3QpIHtcclxuICAgIHZhbHVlW2xpbWl0LTFdW3RdID0gZnJlcXNbdF07XHJcbiAgICB0eXBlW2xpbWl0LTFdW3RdICA9IHQ7XHJcbiAgfVxyXG5cclxuICBmb3IgKGkgPSAwOyBpIDwgbGltaXQ7ICsraSkge1xyXG4gICAgY3VycmVudFBvc2l0aW9uW2ldID0gMDtcclxuICB9XHJcbiAgaWYgKGZsYWdbbGltaXQtMV0gPT09IDEpIHtcclxuICAgIC0tY29kZUxlbmd0aFswXTtcclxuICAgICsrY3VycmVudFBvc2l0aW9uW2xpbWl0LTFdO1xyXG4gIH1cclxuXHJcbiAgZm9yIChqID0gbGltaXQtMjsgaiA+PSAwOyAtLWopIHtcclxuICAgIGkgPSAwO1xyXG4gICAgd2VpZ2h0ID0gMDtcclxuICAgIG5leHQgPSBjdXJyZW50UG9zaXRpb25baisxXTtcclxuXHJcbiAgICBmb3IgKHQgPSAwOyB0IDwgbWluaW11bUNvc3Rbal07IHQrKykge1xyXG4gICAgICB3ZWlnaHQgPSB2YWx1ZVtqKzFdW25leHRdICsgdmFsdWVbaisxXVtuZXh0KzFdO1xyXG5cclxuICAgICAgaWYgKHdlaWdodCA+IGZyZXFzW2ldKSB7XHJcbiAgICAgICAgdmFsdWVbal1bdF0gPSB3ZWlnaHQ7XHJcbiAgICAgICAgdHlwZVtqXVt0XSA9IHN5bWJvbHM7XHJcbiAgICAgICAgbmV4dCArPSAyO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhbHVlW2pdW3RdID0gZnJlcXNbaV07XHJcbiAgICAgICAgdHlwZVtqXVt0XSA9IGk7XHJcbiAgICAgICAgKytpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY3VycmVudFBvc2l0aW9uW2pdID0gMDtcclxuICAgIGlmIChmbGFnW2pdID09PSAxKSB7XHJcbiAgICAgIHRha2VQYWNrYWdlKGopO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNvZGVMZW5ndGg7XHJcbn07XHJcblxyXG4vKipcclxuICog56ym5Y+36ZW36YWN5YiX44GL44KJ44OP44OV44Oe44Oz56ym5Y+344KS5Y+W5b6X44GZ44KLXHJcbiAqIHJlZmVyZW5jZTogUHVUVFkgRGVmbGF0ZSBpbXBsZW1lbnRhdGlvblxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGxlbmd0aHMg56ym5Y+36ZW36YWN5YiXLlxyXG4gKiBAcmV0dXJuIHshKEFycmF5LjxudW1iZXI+fFVpbnQxNkFycmF5KX0g44OP44OV44Oe44Oz56ym5Y+36YWN5YiXLlxyXG4gKiBAcHJpdmF0ZVxyXG4gKi9cclxuWmxpYi5SYXdEZWZsYXRlLnByb3RvdHlwZS5nZXRDb2Rlc0Zyb21MZW5ndGhzXyA9IGZ1bmN0aW9uKGxlbmd0aHMpIHtcclxuICB2YXIgY29kZXMgPSBuZXcgKFVTRV9UWVBFREFSUkFZID8gVWludDE2QXJyYXkgOiBBcnJheSkobGVuZ3Rocy5sZW5ndGgpLFxyXG4gICAgICBjb3VudCA9IFtdLFxyXG4gICAgICBzdGFydENvZGUgPSBbXSxcclxuICAgICAgY29kZSA9IDAsIGksIGlsLCBqLCBtO1xyXG5cclxuICAvLyBDb3VudCB0aGUgY29kZXMgb2YgZWFjaCBsZW5ndGguXHJcbiAgZm9yIChpID0gMCwgaWwgPSBsZW5ndGhzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHtcclxuICAgIGNvdW50W2xlbmd0aHNbaV1dID0gKGNvdW50W2xlbmd0aHNbaV1dIHwgMCkgKyAxO1xyXG4gIH1cclxuXHJcbiAgLy8gRGV0ZXJtaW5lIHRoZSBzdGFydGluZyBjb2RlIGZvciBlYWNoIGxlbmd0aCBibG9jay5cclxuICBmb3IgKGkgPSAxLCBpbCA9IFpsaWIuUmF3RGVmbGF0ZS5NYXhDb2RlTGVuZ3RoOyBpIDw9IGlsOyBpKyspIHtcclxuICAgIHN0YXJ0Q29kZVtpXSA9IGNvZGU7XHJcbiAgICBjb2RlICs9IGNvdW50W2ldIHwgMDtcclxuICAgIGNvZGUgPDw9IDE7XHJcbiAgfVxyXG5cclxuICAvLyBEZXRlcm1pbmUgdGhlIGNvZGUgZm9yIGVhY2ggc3ltYm9sLiBNaXJyb3JlZCwgb2YgY291cnNlLlxyXG4gIGZvciAoaSA9IDAsIGlsID0gbGVuZ3Rocy5sZW5ndGg7IGkgPCBpbDsgaSsrKSB7XHJcbiAgICBjb2RlID0gc3RhcnRDb2RlW2xlbmd0aHNbaV1dO1xyXG4gICAgc3RhcnRDb2RlW2xlbmd0aHNbaV1dICs9IDE7XHJcbiAgICBjb2Rlc1tpXSA9IDA7XHJcblxyXG4gICAgZm9yIChqID0gMCwgbSA9IGxlbmd0aHNbaV07IGogPCBtOyBqKyspIHtcclxuICAgICAgY29kZXNbaV0gPSAoY29kZXNbaV0gPDwgMSkgfCAoY29kZSAmIDEpO1xyXG4gICAgICBjb2RlID4+Pj0gMTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBjb2RlcztcclxufTtcclxuXHJcbi8vIGVuZCBvZiBzY29wZVxyXG59KTtcclxuXHJcbi8qIHZpbTpzZXQgZXhwYW5kdGFiIHRzPTIgc3c9MiB0dz04MDogKi9cclxuIiwiZ29vZy5wcm92aWRlKCdabGliLlJhd0luZmxhdGUnKTtcclxuXHJcbmdvb2cucmVxdWlyZSgnVVNFX1RZUEVEQVJSQVknKTtcclxuZ29vZy5yZXF1aXJlKCdabGliLkh1ZmZtYW4nKTtcclxuXHJcbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbi8qKiBAZGVmaW5lIHtudW1iZXJ9IGJ1ZmZlciBibG9jayBzaXplLiAqL1xyXG52YXIgWkxJQl9SQVdfSU5GTEFURV9CVUZGRVJfU0laRSA9IDB4ODAwMDsgLy8gWyAweDgwMDAgPj0gWkxJQl9CVUZGRVJfQkxPQ0tfU0laRSBdXHJcblxyXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xyXG5cclxudmFyIGJ1aWxkSHVmZm1hblRhYmxlID0gWmxpYi5IdWZmbWFuLmJ1aWxkSHVmZm1hblRhYmxlO1xyXG5cclxuLyoqXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0geyEoVWludDhBcnJheXxBcnJheS48bnVtYmVyPil9IGlucHV0IGlucHV0IGJ1ZmZlci5cclxuICogQHBhcmFtIHtPYmplY3R9IG9wdF9wYXJhbXMgb3B0aW9uIHBhcmFtZXRlci5cclxuICpcclxuICogb3B0X3BhcmFtcyDjga/ku6XkuIvjga7jg5fjg63jg5Hjg4bjgqPjgpLmjIflrprjgZnjgovkuovjgYzjgafjgY3jgb7jgZnjgIJcclxuICogICAtIGluZGV4OiBpbnB1dCBidWZmZXIg44GuIGRlZmxhdGUg44Kz44Oz44OG44OK44Gu6ZaL5aeL5L2N572uLlxyXG4gKiAgIC0gYmxvY2tTaXplOiDjg5Djg4Pjg5XjgqHjga7jg5bjg63jg4Pjgq/jgrXjgqTjgrouXHJcbiAqICAgLSBidWZmZXJUeXBlOiBabGliLlJhd0luZmxhdGUuQnVmZmVyVHlwZSDjga7lgKTjgavjgojjgaPjgabjg5Djg4Pjg5XjgqHjga7nrqHnkIbmlrnms5XjgpLmjIflrprjgZnjgosuXHJcbiAqICAgLSByZXNpemU6IOeiuuS/neOBl+OBn+ODkOODg+ODleOCoeOBjOWun+mam+OBruWkp+OBjeOBleOCiOOCiuWkp+OBjeOBi+OBo+OBn+WgtOWQiOOBq+WIh+OCiuipsOOCgeOCiy5cclxuICovXHJcblpsaWIuUmF3SW5mbGF0ZSA9IGZ1bmN0aW9uKGlucHV0LCBvcHRfcGFyYW1zKSB7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBpbmZsYXRlZCBidWZmZXIgKi9cclxuICB0aGlzLmJ1ZmZlcjtcclxuICAvKiogQHR5cGUgeyFBcnJheS48KEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpPn0gKi9cclxuICB0aGlzLmJsb2NrcyA9IFtdO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBibG9jayBzaXplLiAqL1xyXG4gIHRoaXMuYnVmZmVyU2l6ZSA9IFpMSUJfUkFXX0lORkxBVEVfQlVGRkVSX1NJWkU7XHJcbiAgLyoqIEB0eXBlIHshbnVtYmVyfSB0b3RhbCBvdXRwdXQgYnVmZmVyIHBvaW50ZXIuICovXHJcbiAgdGhpcy50b3RhbHBvcyA9IDA7XHJcbiAgLyoqIEB0eXBlIHshbnVtYmVyfSBpbnB1dCBidWZmZXIgcG9pbnRlci4gKi9cclxuICB0aGlzLmlwID0gMDtcclxuICAvKiogQHR5cGUgeyFudW1iZXJ9IGJpdCBzdHJlYW0gcmVhZGVyIGJ1ZmZlci4gKi9cclxuICB0aGlzLmJpdHNidWYgPSAwO1xyXG4gIC8qKiBAdHlwZSB7IW51bWJlcn0gYml0IHN0cmVhbSByZWFkZXIgYnVmZmVyIHNpemUuICovXHJcbiAgdGhpcy5iaXRzYnVmbGVuID0gMDtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGlucHV0IGJ1ZmZlci4gKi9cclxuICB0aGlzLmlucHV0ID0gVVNFX1RZUEVEQVJSQVkgPyBuZXcgVWludDhBcnJheShpbnB1dCkgOiBpbnB1dDtcclxuICAvKiogQHR5cGUgeyEoVWludDhBcnJheXxBcnJheS48bnVtYmVyPil9IG91dHB1dCBidWZmZXIuICovXHJcbiAgdGhpcy5vdXRwdXQ7XHJcbiAgLyoqIEB0eXBlIHshbnVtYmVyfSBvdXRwdXQgYnVmZmVyIHBvaW50ZXIuICovXHJcbiAgdGhpcy5vcDtcclxuICAvKiogQHR5cGUge2Jvb2xlYW59IGlzIGZpbmFsIGJsb2NrIGZsYWcuICovXHJcbiAgdGhpcy5iZmluYWwgPSBmYWxzZTtcclxuICAvKiogQHR5cGUge1psaWIuUmF3SW5mbGF0ZS5CdWZmZXJUeXBlfSBidWZmZXIgbWFuYWdlbWVudC4gKi9cclxuICB0aGlzLmJ1ZmZlclR5cGUgPSBabGliLlJhd0luZmxhdGUuQnVmZmVyVHlwZS5BREFQVElWRTtcclxuICAvKiogQHR5cGUge2Jvb2xlYW59IHJlc2l6ZSBmbGFnIGZvciBtZW1vcnkgc2l6ZSBvcHRpbWl6YXRpb24uICovXHJcbiAgdGhpcy5yZXNpemUgPSBmYWxzZTtcclxuXHJcbiAgLy8gb3B0aW9uIHBhcmFtZXRlcnNcclxuICBpZiAob3B0X3BhcmFtcyB8fCAhKG9wdF9wYXJhbXMgPSB7fSkpIHtcclxuICAgIGlmIChvcHRfcGFyYW1zWydpbmRleCddKSB7XHJcbiAgICAgIHRoaXMuaXAgPSBvcHRfcGFyYW1zWydpbmRleCddO1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdF9wYXJhbXNbJ2J1ZmZlclNpemUnXSkge1xyXG4gICAgICB0aGlzLmJ1ZmZlclNpemUgPSBvcHRfcGFyYW1zWydidWZmZXJTaXplJ107XHJcbiAgICB9XHJcbiAgICBpZiAob3B0X3BhcmFtc1snYnVmZmVyVHlwZSddKSB7XHJcbiAgICAgIHRoaXMuYnVmZmVyVHlwZSA9IG9wdF9wYXJhbXNbJ2J1ZmZlclR5cGUnXTtcclxuICAgIH1cclxuICAgIGlmIChvcHRfcGFyYW1zWydyZXNpemUnXSkge1xyXG4gICAgICB0aGlzLnJlc2l6ZSA9IG9wdF9wYXJhbXNbJ3Jlc2l6ZSddO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gaW5pdGlhbGl6ZVxyXG4gIHN3aXRjaCAodGhpcy5idWZmZXJUeXBlKSB7XHJcbiAgICBjYXNlIFpsaWIuUmF3SW5mbGF0ZS5CdWZmZXJUeXBlLkJMT0NLOlxyXG4gICAgICB0aGlzLm9wID0gWmxpYi5SYXdJbmZsYXRlLk1heEJhY2t3YXJkTGVuZ3RoO1xyXG4gICAgICB0aGlzLm91dHB1dCA9XHJcbiAgICAgICAgbmV3IChVU0VfVFlQRURBUlJBWSA/IFVpbnQ4QXJyYXkgOiBBcnJheSkoXHJcbiAgICAgICAgICBabGliLlJhd0luZmxhdGUuTWF4QmFja3dhcmRMZW5ndGggK1xyXG4gICAgICAgICAgdGhpcy5idWZmZXJTaXplICtcclxuICAgICAgICAgIFpsaWIuUmF3SW5mbGF0ZS5NYXhDb3B5TGVuZ3RoXHJcbiAgICAgICAgKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFpsaWIuUmF3SW5mbGF0ZS5CdWZmZXJUeXBlLkFEQVBUSVZFOlxyXG4gICAgICB0aGlzLm9wID0gMDtcclxuICAgICAgdGhpcy5vdXRwdXQgPSBuZXcgKFVTRV9UWVBFREFSUkFZID8gVWludDhBcnJheSA6IEFycmF5KSh0aGlzLmJ1ZmZlclNpemUpO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbmZsYXRlIG1vZGUnKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQGVudW0ge251bWJlcn1cclxuICovXHJcblpsaWIuUmF3SW5mbGF0ZS5CdWZmZXJUeXBlID0ge1xyXG4gIEJMT0NLOiAwLFxyXG4gIEFEQVBUSVZFOiAxXHJcbn07XHJcblxyXG4vKipcclxuICogZGVjb21wcmVzcy5cclxuICogQHJldHVybiB7IShVaW50OEFycmF5fEFycmF5LjxudW1iZXI+KX0gaW5mbGF0ZWQgYnVmZmVyLlxyXG4gKi9cclxuWmxpYi5SYXdJbmZsYXRlLnByb3RvdHlwZS5kZWNvbXByZXNzID0gZnVuY3Rpb24oKSB7XHJcbiAgd2hpbGUgKCF0aGlzLmJmaW5hbCkge1xyXG4gICAgdGhpcy5wYXJzZUJsb2NrKCk7XHJcbiAgfVxyXG5cclxuICBzd2l0Y2ggKHRoaXMuYnVmZmVyVHlwZSkge1xyXG4gICAgY2FzZSBabGliLlJhd0luZmxhdGUuQnVmZmVyVHlwZS5CTE9DSzpcclxuICAgICAgcmV0dXJuIHRoaXMuY29uY2F0QnVmZmVyQmxvY2soKTtcclxuICAgIGNhc2UgWmxpYi5SYXdJbmZsYXRlLkJ1ZmZlclR5cGUuQURBUFRJVkU6XHJcbiAgICAgIHJldHVybiB0aGlzLmNvbmNhdEJ1ZmZlckR5bmFtaWMoKTtcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbmZsYXRlIG1vZGUnKTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHtudW1iZXJ9IG1heCBiYWNrd2FyZCBsZW5ndGggZm9yIExaNzcuXHJcbiAqL1xyXG5abGliLlJhd0luZmxhdGUuTWF4QmFja3dhcmRMZW5ndGggPSAzMjc2ODtcclxuXHJcbi8qKlxyXG4gKiBAY29uc3RcclxuICogQHR5cGUge251bWJlcn0gbWF4IGNvcHkgbGVuZ3RoIGZvciBMWjc3LlxyXG4gKi9cclxuWmxpYi5SYXdJbmZsYXRlLk1heENvcHlMZW5ndGggPSAyNTg7XHJcblxyXG4vKipcclxuICogaHVmZm1hbiBvcmRlclxyXG4gKiBAY29uc3RcclxuICogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9XHJcbiAqL1xyXG5abGliLlJhd0luZmxhdGUuT3JkZXIgPSAoZnVuY3Rpb24odGFibGUpIHtcclxuICByZXR1cm4gVVNFX1RZUEVEQVJSQVkgPyBuZXcgVWludDE2QXJyYXkodGFibGUpIDogdGFibGU7XHJcbn0pKFsxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1XSk7XHJcblxyXG4vKipcclxuICogaHVmZm1hbiBsZW5ndGggY29kZSB0YWJsZS5cclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQxNkFycmF5KX1cclxuICovXHJcblpsaWIuUmF3SW5mbGF0ZS5MZW5ndGhDb2RlVGFibGUgPSAoZnVuY3Rpb24odGFibGUpIHtcclxuICByZXR1cm4gVVNFX1RZUEVEQVJSQVkgPyBuZXcgVWludDE2QXJyYXkodGFibGUpIDogdGFibGU7XHJcbn0pKFtcclxuICAweDAwMDMsIDB4MDAwNCwgMHgwMDA1LCAweDAwMDYsIDB4MDAwNywgMHgwMDA4LCAweDAwMDksIDB4MDAwYSwgMHgwMDBiLFxyXG4gIDB4MDAwZCwgMHgwMDBmLCAweDAwMTEsIDB4MDAxMywgMHgwMDE3LCAweDAwMWIsIDB4MDAxZiwgMHgwMDIzLCAweDAwMmIsXHJcbiAgMHgwMDMzLCAweDAwM2IsIDB4MDA0MywgMHgwMDUzLCAweDAwNjMsIDB4MDA3MywgMHgwMDgzLCAweDAwYTMsIDB4MDBjMyxcclxuICAweDAwZTMsIDB4MDEwMiwgMHgwMTAyLCAweDAxMDJcclxuXSk7XHJcblxyXG4vKipcclxuICogaHVmZm1hbiBsZW5ndGggZXh0cmEtYml0cyB0YWJsZS5cclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfVxyXG4gKi9cclxuWmxpYi5SYXdJbmZsYXRlLkxlbmd0aEV4dHJhVGFibGUgPSAoZnVuY3Rpb24odGFibGUpIHtcclxuICByZXR1cm4gVVNFX1RZUEVEQVJSQVkgPyBuZXcgVWludDhBcnJheSh0YWJsZSkgOiB0YWJsZTtcclxufSkoW1xyXG4gIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDEsIDEsIDEsIDEsIDIsIDIsIDIsIDIsIDMsIDMsIDMsIDMsIDQsIDQsIDQsIDQsIDUsIDUsXHJcbiAgNSwgNSwgMCwgMCwgMFxyXG5dKTtcclxuXHJcbi8qKlxyXG4gKiBodWZmbWFuIGRpc3QgY29kZSB0YWJsZS5cclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQxNkFycmF5KX1cclxuICovXHJcblpsaWIuUmF3SW5mbGF0ZS5EaXN0Q29kZVRhYmxlID0gKGZ1bmN0aW9uKHRhYmxlKSB7XHJcbiAgcmV0dXJuIFVTRV9UWVBFREFSUkFZID8gbmV3IFVpbnQxNkFycmF5KHRhYmxlKSA6IHRhYmxlO1xyXG59KShbXHJcbiAgMHgwMDAxLCAweDAwMDIsIDB4MDAwMywgMHgwMDA0LCAweDAwMDUsIDB4MDAwNywgMHgwMDA5LCAweDAwMGQsIDB4MDAxMSxcclxuICAweDAwMTksIDB4MDAyMSwgMHgwMDMxLCAweDAwNDEsIDB4MDA2MSwgMHgwMDgxLCAweDAwYzEsIDB4MDEwMSwgMHgwMTgxLFxyXG4gIDB4MDIwMSwgMHgwMzAxLCAweDA0MDEsIDB4MDYwMSwgMHgwODAxLCAweDBjMDEsIDB4MTAwMSwgMHgxODAxLCAweDIwMDEsXHJcbiAgMHgzMDAxLCAweDQwMDEsIDB4NjAwMVxyXG5dKTtcclxuXHJcbi8qKlxyXG4gKiBodWZmbWFuIGRpc3QgZXh0cmEtYml0cyB0YWJsZS5cclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfVxyXG4gKi9cclxuWmxpYi5SYXdJbmZsYXRlLkRpc3RFeHRyYVRhYmxlID0gKGZ1bmN0aW9uKHRhYmxlKSB7XHJcbiAgcmV0dXJuIFVTRV9UWVBFREFSUkFZID8gbmV3IFVpbnQ4QXJyYXkodGFibGUpIDogdGFibGU7XHJcbn0pKFtcclxuICAwLCAwLCAwLCAwLCAxLCAxLCAyLCAyLCAzLCAzLCA0LCA0LCA1LCA1LCA2LCA2LCA3LCA3LCA4LCA4LCA5LCA5LCAxMCwgMTAsIDExLFxyXG4gIDExLCAxMiwgMTIsIDEzLCAxM1xyXG5dKTtcclxuXHJcbi8qKlxyXG4gKiBmaXhlZCBodWZmbWFuIGxlbmd0aCBjb2RlIHRhYmxlXHJcbiAqIEBjb25zdFxyXG4gKiBAdHlwZSB7IUFycmF5fVxyXG4gKi9cclxuWmxpYi5SYXdJbmZsYXRlLkZpeGVkTGl0ZXJhbExlbmd0aFRhYmxlID0gKGZ1bmN0aW9uKHRhYmxlKSB7XHJcbiAgcmV0dXJuIHRhYmxlO1xyXG59KSgoZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGxlbmd0aHMgPSBuZXcgKFVTRV9UWVBFREFSUkFZID8gVWludDhBcnJheSA6IEFycmF5KSgyODgpO1xyXG4gIHZhciBpLCBpbDtcclxuXHJcbiAgZm9yIChpID0gMCwgaWwgPSBsZW5ndGhzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcclxuICAgIGxlbmd0aHNbaV0gPVxyXG4gICAgICAoaSA8PSAxNDMpID8gOCA6XHJcbiAgICAgIChpIDw9IDI1NSkgPyA5IDpcclxuICAgICAgKGkgPD0gMjc5KSA/IDcgOlxyXG4gICAgICA4O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGJ1aWxkSHVmZm1hblRhYmxlKGxlbmd0aHMpO1xyXG59KSgpKTtcclxuXHJcbi8qKlxyXG4gKiBmaXhlZCBodWZmbWFuIGRpc3RhbmNlIGNvZGUgdGFibGVcclxuICogQGNvbnN0XHJcbiAqIEB0eXBlIHshQXJyYXl9XHJcbiAqL1xyXG5abGliLlJhd0luZmxhdGUuRml4ZWREaXN0YW5jZVRhYmxlID0gKGZ1bmN0aW9uKHRhYmxlKSB7XHJcbiAgcmV0dXJuIHRhYmxlO1xyXG59KSgoZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGxlbmd0aHMgPSBuZXcgKFVTRV9UWVBFREFSUkFZID8gVWludDhBcnJheSA6IEFycmF5KSgzMCk7XHJcbiAgdmFyIGksIGlsO1xyXG5cclxuICBmb3IgKGkgPSAwLCBpbCA9IGxlbmd0aHMubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xyXG4gICAgbGVuZ3Roc1tpXSA9IDU7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gYnVpbGRIdWZmbWFuVGFibGUobGVuZ3Rocyk7XHJcbn0pKCkpO1xyXG5cclxuLyoqXHJcbiAqIHBhcnNlIGRlZmxhdGVkIGJsb2NrLlxyXG4gKi9cclxuWmxpYi5SYXdJbmZsYXRlLnByb3RvdHlwZS5wYXJzZUJsb2NrID0gZnVuY3Rpb24oKSB7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGhlYWRlciAqL1xyXG4gIHZhciBoZHIgPSB0aGlzLnJlYWRCaXRzKDMpO1xyXG5cclxuICAvLyBCRklOQUxcclxuICBpZiAoaGRyICYgMHgxKSB7XHJcbiAgICB0aGlzLmJmaW5hbCA9IHRydWU7XHJcbiAgfVxyXG5cclxuICAvLyBCVFlQRVxyXG4gIGhkciA+Pj49IDE7XHJcbiAgc3dpdGNoIChoZHIpIHtcclxuICAgIC8vIHVuY29tcHJlc3NlZFxyXG4gICAgY2FzZSAwOlxyXG4gICAgICB0aGlzLnBhcnNlVW5jb21wcmVzc2VkQmxvY2soKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICAvLyBmaXhlZCBodWZmbWFuXHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHRoaXMucGFyc2VGaXhlZEh1ZmZtYW5CbG9jaygpO1xyXG4gICAgICBicmVhaztcclxuICAgIC8vIGR5bmFtaWMgaHVmZm1hblxyXG4gICAgY2FzZSAyOlxyXG4gICAgICB0aGlzLnBhcnNlRHluYW1pY0h1ZmZtYW5CbG9jaygpO1xyXG4gICAgICBicmVhaztcclxuICAgIC8vIHJlc2VydmVkIG9yIG90aGVyXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gQlRZUEU6ICcgKyBoZHIpO1xyXG4gIH1cclxufTtcclxuXHJcbi8qKlxyXG4gKiByZWFkIGluZmxhdGUgYml0c1xyXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoIGJpdHMgbGVuZ3RoLlxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9IHJlYWQgYml0cy5cclxuICovXHJcblpsaWIuUmF3SW5mbGF0ZS5wcm90b3R5cGUucmVhZEJpdHMgPSBmdW5jdGlvbihsZW5ndGgpIHtcclxuICB2YXIgYml0c2J1ZiA9IHRoaXMuYml0c2J1ZjtcclxuICB2YXIgYml0c2J1ZmxlbiA9IHRoaXMuYml0c2J1ZmxlbjtcclxuICB2YXIgaW5wdXQgPSB0aGlzLmlucHV0O1xyXG4gIHZhciBpcCA9IHRoaXMuaXA7XHJcblxyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcclxuICAvKiogQHR5cGUge251bWJlcn0gaW5wdXQgYW5kIG91dHB1dCBieXRlLiAqL1xyXG4gIHZhciBvY3RldDtcclxuXHJcbiAgLy8gaW5wdXQgYnl0ZVxyXG4gIGlmIChpcCArICgobGVuZ3RoIC0gYml0c2J1ZmxlbiArIDcpID4+IDMpID49IGlucHV0TGVuZ3RoKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2lucHV0IGJ1ZmZlciBpcyBicm9rZW4nKTtcclxuICB9XHJcblxyXG4gIC8vIG5vdCBlbm91Z2ggYnVmZmVyXHJcbiAgd2hpbGUgKGJpdHNidWZsZW4gPCBsZW5ndGgpIHtcclxuICAgIGJpdHNidWYgfD0gaW5wdXRbaXArK10gPDwgYml0c2J1ZmxlbjtcclxuICAgIGJpdHNidWZsZW4gKz0gODtcclxuICB9XHJcblxyXG4gIC8vIG91dHB1dCBieXRlXHJcbiAgb2N0ZXQgPSBiaXRzYnVmICYgLyogTUFTSyAqLyAoKDEgPDwgbGVuZ3RoKSAtIDEpO1xyXG4gIGJpdHNidWYgPj4+PSBsZW5ndGg7XHJcbiAgYml0c2J1ZmxlbiAtPSBsZW5ndGg7XHJcblxyXG4gIHRoaXMuYml0c2J1ZiA9IGJpdHNidWY7XHJcbiAgdGhpcy5iaXRzYnVmbGVuID0gYml0c2J1ZmxlbjtcclxuICB0aGlzLmlwID0gaXA7XHJcblxyXG4gIHJldHVybiBvY3RldDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZWFkIGh1ZmZtYW4gY29kZSB1c2luZyB0YWJsZVxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheXxVaW50MTZBcnJheSl9IHRhYmxlIGh1ZmZtYW4gY29kZSB0YWJsZS5cclxuICogQHJldHVybiB7bnVtYmVyfSBodWZmbWFuIGNvZGUuXHJcbiAqL1xyXG5abGliLlJhd0luZmxhdGUucHJvdG90eXBlLnJlYWRDb2RlQnlUYWJsZSA9IGZ1bmN0aW9uKHRhYmxlKSB7XHJcbiAgdmFyIGJpdHNidWYgPSB0aGlzLmJpdHNidWY7XHJcbiAgdmFyIGJpdHNidWZsZW4gPSB0aGlzLmJpdHNidWZsZW47XHJcbiAgdmFyIGlucHV0ID0gdGhpcy5pbnB1dDtcclxuICB2YXIgaXAgPSB0aGlzLmlwO1xyXG5cclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBodWZmbWFuIGNvZGUgdGFibGUgKi9cclxuICB2YXIgY29kZVRhYmxlID0gdGFibGVbMF07XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIG1heENvZGVMZW5ndGggPSB0YWJsZVsxXTtcclxuICAvKiogQHR5cGUge251bWJlcn0gY29kZSBsZW5ndGggJiBjb2RlICgxNmJpdCwgMTZiaXQpICovXHJcbiAgdmFyIGNvZGVXaXRoTGVuZ3RoO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBjb2RlIGJpdHMgbGVuZ3RoICovXHJcbiAgdmFyIGNvZGVMZW5ndGg7XHJcblxyXG4gIC8vIG5vdCBlbm91Z2ggYnVmZmVyXHJcbiAgd2hpbGUgKGJpdHNidWZsZW4gPCBtYXhDb2RlTGVuZ3RoKSB7XHJcbiAgICBpZiAoaXAgPj0gaW5wdXRMZW5ndGgpIHtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBiaXRzYnVmIHw9IGlucHV0W2lwKytdIDw8IGJpdHNidWZsZW47XHJcbiAgICBiaXRzYnVmbGVuICs9IDg7XHJcbiAgfVxyXG5cclxuICAvLyByZWFkIG1heCBsZW5ndGhcclxuICBjb2RlV2l0aExlbmd0aCA9IGNvZGVUYWJsZVtiaXRzYnVmICYgKCgxIDw8IG1heENvZGVMZW5ndGgpIC0gMSldO1xyXG4gIGNvZGVMZW5ndGggPSBjb2RlV2l0aExlbmd0aCA+Pj4gMTY7XHJcblxyXG4gIGlmIChjb2RlTGVuZ3RoID4gYml0c2J1Zmxlbikge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGNvZGUgbGVuZ3RoOiAnICsgY29kZUxlbmd0aCk7XHJcbiAgfVxyXG5cclxuICB0aGlzLmJpdHNidWYgPSBiaXRzYnVmID4+IGNvZGVMZW5ndGg7XHJcbiAgdGhpcy5iaXRzYnVmbGVuID0gYml0c2J1ZmxlbiAtIGNvZGVMZW5ndGg7XHJcbiAgdGhpcy5pcCA9IGlwO1xyXG5cclxuICByZXR1cm4gY29kZVdpdGhMZW5ndGggJiAweGZmZmY7XHJcbn07XHJcblxyXG4vKipcclxuICogcGFyc2UgdW5jb21wcmVzc2VkIGJsb2NrLlxyXG4gKi9cclxuWmxpYi5SYXdJbmZsYXRlLnByb3RvdHlwZS5wYXJzZVVuY29tcHJlc3NlZEJsb2NrID0gZnVuY3Rpb24oKSB7XHJcbiAgdmFyIGlucHV0ID0gdGhpcy5pbnB1dDtcclxuICB2YXIgaXAgPSB0aGlzLmlwO1xyXG4gIHZhciBvdXRwdXQgPSB0aGlzLm91dHB1dDtcclxuICB2YXIgb3AgPSB0aGlzLm9wO1xyXG5cclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGJsb2NrIGxlbmd0aCAqL1xyXG4gIHZhciBsZW47XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IG51bWJlciBmb3IgY2hlY2sgYmxvY2sgbGVuZ3RoICovXHJcbiAgdmFyIG5sZW47XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IG91dHB1dCBidWZmZXIgbGVuZ3RoICovXHJcbiAgdmFyIG9sZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBjb3B5IGNvdW50ZXIgKi9cclxuICB2YXIgcHJlQ29weTtcclxuXHJcbiAgLy8gc2tpcCBidWZmZXJlZCBoZWFkZXIgYml0c1xyXG4gIHRoaXMuYml0c2J1ZiA9IDA7XHJcbiAgdGhpcy5iaXRzYnVmbGVuID0gMDtcclxuXHJcbiAgLy8gbGVuXHJcbiAgaWYgKGlwICsgMSA+PSBpbnB1dExlbmd0aCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHVuY29tcHJlc3NlZCBibG9jayBoZWFkZXI6IExFTicpO1xyXG4gIH1cclxuICBsZW4gPSBpbnB1dFtpcCsrXSB8IChpbnB1dFtpcCsrXSA8PCA4KTtcclxuXHJcbiAgLy8gbmxlblxyXG4gIGlmIChpcCArIDEgPj0gaW5wdXRMZW5ndGgpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB1bmNvbXByZXNzZWQgYmxvY2sgaGVhZGVyOiBOTEVOJyk7XHJcbiAgfVxyXG4gIG5sZW4gPSBpbnB1dFtpcCsrXSB8IChpbnB1dFtpcCsrXSA8PCA4KTtcclxuXHJcbiAgLy8gY2hlY2sgbGVuICYgbmxlblxyXG4gIGlmIChsZW4gPT09IH5ubGVuKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgdW5jb21wcmVzc2VkIGJsb2NrIGhlYWRlcjogbGVuZ3RoIHZlcmlmeScpO1xyXG4gIH1cclxuXHJcbiAgLy8gY2hlY2sgc2l6ZVxyXG4gIGlmIChpcCArIGxlbiA+IGlucHV0Lmxlbmd0aCkgeyB0aHJvdyBuZXcgRXJyb3IoJ2lucHV0IGJ1ZmZlciBpcyBicm9rZW4nKTsgfVxyXG5cclxuICAvLyBleHBhbmQgYnVmZmVyXHJcbiAgc3dpdGNoICh0aGlzLmJ1ZmZlclR5cGUpIHtcclxuICAgIGNhc2UgWmxpYi5SYXdJbmZsYXRlLkJ1ZmZlclR5cGUuQkxPQ0s6XHJcbiAgICAgIC8vIHByZSBjb3B5XHJcbiAgICAgIHdoaWxlIChvcCArIGxlbiA+IG91dHB1dC5sZW5ndGgpIHtcclxuICAgICAgICBwcmVDb3B5ID0gb2xlbmd0aCAtIG9wO1xyXG4gICAgICAgIGxlbiAtPSBwcmVDb3B5O1xyXG4gICAgICAgIGlmIChVU0VfVFlQRURBUlJBWSkge1xyXG4gICAgICAgICAgb3V0cHV0LnNldChpbnB1dC5zdWJhcnJheShpcCwgaXAgKyBwcmVDb3B5KSwgb3ApO1xyXG4gICAgICAgICAgb3AgKz0gcHJlQ29weTtcclxuICAgICAgICAgIGlwICs9IHByZUNvcHk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHdoaWxlIChwcmVDb3B5LS0pIHtcclxuICAgICAgICAgICAgb3V0cHV0W29wKytdID0gaW5wdXRbaXArK107XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMub3AgPSBvcDtcclxuICAgICAgICBvdXRwdXQgPSB0aGlzLmV4cGFuZEJ1ZmZlckJsb2NrKCk7XHJcbiAgICAgICAgb3AgPSB0aGlzLm9wO1xyXG4gICAgICB9XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBabGliLlJhd0luZmxhdGUuQnVmZmVyVHlwZS5BREFQVElWRTpcclxuICAgICAgd2hpbGUgKG9wICsgbGVuID4gb3V0cHV0Lmxlbmd0aCkge1xyXG4gICAgICAgIG91dHB1dCA9IHRoaXMuZXhwYW5kQnVmZmVyQWRhcHRpdmUoe2ZpeFJhdGlvOiAyfSk7XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaW5mbGF0ZSBtb2RlJyk7XHJcbiAgfVxyXG5cclxuICAvLyBjb3B5XHJcbiAgaWYgKFVTRV9UWVBFREFSUkFZKSB7XHJcbiAgICBvdXRwdXQuc2V0KGlucHV0LnN1YmFycmF5KGlwLCBpcCArIGxlbiksIG9wKTtcclxuICAgIG9wICs9IGxlbjtcclxuICAgIGlwICs9IGxlbjtcclxuICB9IGVsc2Uge1xyXG4gICAgd2hpbGUgKGxlbi0tKSB7XHJcbiAgICAgIG91dHB1dFtvcCsrXSA9IGlucHV0W2lwKytdO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhpcy5pcCA9IGlwO1xyXG4gIHRoaXMub3AgPSBvcDtcclxuICB0aGlzLm91dHB1dCA9IG91dHB1dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBwYXJzZSBmaXhlZCBodWZmbWFuIGJsb2NrLlxyXG4gKi9cclxuWmxpYi5SYXdJbmZsYXRlLnByb3RvdHlwZS5wYXJzZUZpeGVkSHVmZm1hbkJsb2NrID0gZnVuY3Rpb24oKSB7XHJcbiAgc3dpdGNoICh0aGlzLmJ1ZmZlclR5cGUpIHtcclxuICAgIGNhc2UgWmxpYi5SYXdJbmZsYXRlLkJ1ZmZlclR5cGUuQURBUFRJVkU6XHJcbiAgICAgIHRoaXMuZGVjb2RlSHVmZm1hbkFkYXB0aXZlKFxyXG4gICAgICAgIFpsaWIuUmF3SW5mbGF0ZS5GaXhlZExpdGVyYWxMZW5ndGhUYWJsZSxcclxuICAgICAgICBabGliLlJhd0luZmxhdGUuRml4ZWREaXN0YW5jZVRhYmxlXHJcbiAgICAgICk7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBabGliLlJhd0luZmxhdGUuQnVmZmVyVHlwZS5CTE9DSzpcclxuICAgICAgdGhpcy5kZWNvZGVIdWZmbWFuQmxvY2soXHJcbiAgICAgICAgWmxpYi5SYXdJbmZsYXRlLkZpeGVkTGl0ZXJhbExlbmd0aFRhYmxlLFxyXG4gICAgICAgIFpsaWIuUmF3SW5mbGF0ZS5GaXhlZERpc3RhbmNlVGFibGVcclxuICAgICAgKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaW5mbGF0ZSBtb2RlJyk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIHBhcnNlIGR5bmFtaWMgaHVmZm1hbiBibG9jay5cclxuICovXHJcblpsaWIuUmF3SW5mbGF0ZS5wcm90b3R5cGUucGFyc2VEeW5hbWljSHVmZm1hbkJsb2NrID0gZnVuY3Rpb24oKSB7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IG51bWJlciBvZiBsaXRlcmFsIGFuZCBsZW5ndGggY29kZXMuICovXHJcbiAgdmFyIGhsaXQgPSB0aGlzLnJlYWRCaXRzKDUpICsgMjU3O1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXMuICovXHJcbiAgdmFyIGhkaXN0ID0gdGhpcy5yZWFkQml0cyg1KSArIDE7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IG51bWJlciBvZiBjb2RlIGxlbmd0aHMuICovXHJcbiAgdmFyIGhjbGVuID0gdGhpcy5yZWFkQml0cyg0KSArIDQ7XHJcbiAgLyoqIEB0eXBlIHshKFVpbnQ4QXJyYXl8QXJyYXkuPG51bWJlcj4pfSBjb2RlIGxlbmd0aHMuICovXHJcbiAgdmFyIGNvZGVMZW5ndGhzID1cclxuICAgIG5ldyAoVVNFX1RZUEVEQVJSQVkgPyBVaW50OEFycmF5IDogQXJyYXkpKFpsaWIuUmF3SW5mbGF0ZS5PcmRlci5sZW5ndGgpO1xyXG4gIC8qKiBAdHlwZSB7IUFycmF5fSBjb2RlIGxlbmd0aHMgdGFibGUuICovXHJcbiAgdmFyIGNvZGVMZW5ndGhzVGFibGU7XHJcbiAgLyoqIEB0eXBlIHshKFVpbnQ4QXJyYXl8QXJyYXkuPG51bWJlcj4pfSBsaXRlcmFsIGFuZCBsZW5ndGggY29kZSB0YWJsZS4gKi9cclxuICB2YXIgbGl0bGVuVGFibGU7XHJcbiAgLyoqIEB0eXBlIHshKFVpbnQ4QXJyYXl8QXJyYXkuPG51bWJlcj4pfSBkaXN0YW5jZSBjb2RlIHRhYmxlLiAqL1xyXG4gIHZhciBkaXN0VGFibGU7XHJcbiAgLyoqIEB0eXBlIHshKFVpbnQ4QXJyYXl8QXJyYXkuPG51bWJlcj4pfSBjb2RlIGxlbmd0aCB0YWJsZS4gKi9cclxuICB2YXIgbGVuZ3RoVGFibGU7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGNvZGU7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIHByZXY7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIHJlcGVhdDtcclxuICAvKiogQHR5cGUge251bWJlcn0gbG9vcCBjb3VudGVyLiAqL1xyXG4gIHZhciBpO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBsb29wIGxpbWl0LiAqL1xyXG4gIHZhciBpbDtcclxuXHJcbiAgLy8gZGVjb2RlIGNvZGUgbGVuZ3Roc1xyXG4gIGZvciAoaSA9IDA7IGkgPCBoY2xlbjsgKytpKSB7XHJcbiAgICBjb2RlTGVuZ3Roc1tabGliLlJhd0luZmxhdGUuT3JkZXJbaV1dID0gdGhpcy5yZWFkQml0cygzKTtcclxuICB9XHJcbiAgaWYgKCFVU0VfVFlQRURBUlJBWSkge1xyXG4gICAgZm9yIChpID0gaGNsZW4sIGhjbGVuID0gY29kZUxlbmd0aHMubGVuZ3RoOyBpIDwgaGNsZW47ICsraSkge1xyXG4gICAgICBjb2RlTGVuZ3Roc1tabGliLlJhd0luZmxhdGUuT3JkZXJbaV1dID0gMDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIGRlY29kZSBsZW5ndGggdGFibGVcclxuICBjb2RlTGVuZ3Roc1RhYmxlID0gYnVpbGRIdWZmbWFuVGFibGUoY29kZUxlbmd0aHMpO1xyXG4gIGxlbmd0aFRhYmxlID0gbmV3IChVU0VfVFlQRURBUlJBWSA/IFVpbnQ4QXJyYXkgOiBBcnJheSkoaGxpdCArIGhkaXN0KTtcclxuICBmb3IgKGkgPSAwLCBpbCA9IGhsaXQgKyBoZGlzdDsgaSA8IGlsOykge1xyXG4gICAgY29kZSA9IHRoaXMucmVhZENvZGVCeVRhYmxlKGNvZGVMZW5ndGhzVGFibGUpO1xyXG4gICAgc3dpdGNoIChjb2RlKSB7XHJcbiAgICAgIGNhc2UgMTY6XHJcbiAgICAgICAgcmVwZWF0ID0gMyArIHRoaXMucmVhZEJpdHMoMik7XHJcbiAgICAgICAgd2hpbGUgKHJlcGVhdC0tKSB7IGxlbmd0aFRhYmxlW2krK10gPSBwcmV2OyB9XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMTc6XHJcbiAgICAgICAgcmVwZWF0ID0gMyArIHRoaXMucmVhZEJpdHMoMyk7XHJcbiAgICAgICAgd2hpbGUgKHJlcGVhdC0tKSB7IGxlbmd0aFRhYmxlW2krK10gPSAwOyB9XHJcbiAgICAgICAgcHJldiA9IDA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgMTg6XHJcbiAgICAgICAgcmVwZWF0ID0gMTEgKyB0aGlzLnJlYWRCaXRzKDcpO1xyXG4gICAgICAgIHdoaWxlIChyZXBlYXQtLSkgeyBsZW5ndGhUYWJsZVtpKytdID0gMDsgfVxyXG4gICAgICAgIHByZXYgPSAwO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGxlbmd0aFRhYmxlW2krK10gPSBjb2RlO1xyXG4gICAgICAgIHByZXYgPSBjb2RlO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbGl0bGVuVGFibGUgPSBVU0VfVFlQRURBUlJBWVxyXG4gICAgPyBidWlsZEh1ZmZtYW5UYWJsZShsZW5ndGhUYWJsZS5zdWJhcnJheSgwLCBobGl0KSlcclxuICAgIDogYnVpbGRIdWZmbWFuVGFibGUobGVuZ3RoVGFibGUuc2xpY2UoMCwgaGxpdCkpO1xyXG4gIGRpc3RUYWJsZSA9IFVTRV9UWVBFREFSUkFZXHJcbiAgICA/IGJ1aWxkSHVmZm1hblRhYmxlKGxlbmd0aFRhYmxlLnN1YmFycmF5KGhsaXQpKVxyXG4gICAgOiBidWlsZEh1ZmZtYW5UYWJsZShsZW5ndGhUYWJsZS5zbGljZShobGl0KSk7XHJcblxyXG4gIHN3aXRjaCAodGhpcy5idWZmZXJUeXBlKSB7XHJcbiAgICBjYXNlIFpsaWIuUmF3SW5mbGF0ZS5CdWZmZXJUeXBlLkFEQVBUSVZFOlxyXG4gICAgICB0aGlzLmRlY29kZUh1ZmZtYW5BZGFwdGl2ZShsaXRsZW5UYWJsZSwgZGlzdFRhYmxlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBjYXNlIFpsaWIuUmF3SW5mbGF0ZS5CdWZmZXJUeXBlLkJMT0NLOlxyXG4gICAgICB0aGlzLmRlY29kZUh1ZmZtYW5CbG9jayhsaXRsZW5UYWJsZSwgZGlzdFRhYmxlKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgaW5mbGF0ZSBtb2RlJyk7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIGRlY29kZSBodWZmbWFuIGNvZGVcclxuICogQHBhcmFtIHshKEFycmF5LjxudW1iZXI+fFVpbnQxNkFycmF5KX0gbGl0bGVuIGxpdGVyYWwgYW5kIGxlbmd0aCBjb2RlIHRhYmxlLlxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGRpc3QgZGlzdGluYXRpb24gY29kZSB0YWJsZS5cclxuICovXHJcblpsaWIuUmF3SW5mbGF0ZS5wcm90b3R5cGUuZGVjb2RlSHVmZm1hbkJsb2NrID0gZnVuY3Rpb24obGl0bGVuLCBkaXN0KSB7XHJcbiAgdmFyIG91dHB1dCA9IHRoaXMub3V0cHV0O1xyXG4gIHZhciBvcCA9IHRoaXMub3A7XHJcblxyXG4gIHRoaXMuY3VycmVudExpdGxlblRhYmxlID0gbGl0bGVuO1xyXG5cclxuICAvKiogQHR5cGUge251bWJlcn0gb3V0cHV0IHBvc2l0aW9uIGxpbWl0LiAqL1xyXG4gIHZhciBvbGVuZ3RoID0gb3V0cHV0Lmxlbmd0aCAtIFpsaWIuUmF3SW5mbGF0ZS5NYXhDb3B5TGVuZ3RoO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBodWZmbWFuIGNvZGUuICovXHJcbiAgdmFyIGNvZGU7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IHRhYmxlIGluZGV4LiAqL1xyXG4gIHZhciB0aTtcclxuICAvKiogQHR5cGUge251bWJlcn0gaHVmZm1hbiBjb2RlIGRpc3RpbmF0aW9uLiAqL1xyXG4gIHZhciBjb2RlRGlzdDtcclxuICAvKiogQHR5cGUge251bWJlcn0gaHVmZm1hbiBjb2RlIGxlbmd0aC4gKi9cclxuICB2YXIgY29kZUxlbmd0aDtcclxuXHJcbiAgdmFyIGxlbmd0aENvZGVUYWJsZSA9IFpsaWIuUmF3SW5mbGF0ZS5MZW5ndGhDb2RlVGFibGU7XHJcbiAgdmFyIGxlbmd0aEV4dHJhVGFibGUgPSBabGliLlJhd0luZmxhdGUuTGVuZ3RoRXh0cmFUYWJsZTtcclxuICB2YXIgZGlzdENvZGVUYWJsZSA9IFpsaWIuUmF3SW5mbGF0ZS5EaXN0Q29kZVRhYmxlO1xyXG4gIHZhciBkaXN0RXh0cmFUYWJsZSA9IFpsaWIuUmF3SW5mbGF0ZS5EaXN0RXh0cmFUYWJsZTtcclxuXHJcbiAgd2hpbGUgKChjb2RlID0gdGhpcy5yZWFkQ29kZUJ5VGFibGUobGl0bGVuKSkgIT09IDI1Nikge1xyXG4gICAgLy8gbGl0ZXJhbFxyXG4gICAgaWYgKGNvZGUgPCAyNTYpIHtcclxuICAgICAgaWYgKG9wID49IG9sZW5ndGgpIHtcclxuICAgICAgICB0aGlzLm9wID0gb3A7XHJcbiAgICAgICAgb3V0cHV0ID0gdGhpcy5leHBhbmRCdWZmZXJCbG9jaygpO1xyXG4gICAgICAgIG9wID0gdGhpcy5vcDtcclxuICAgICAgfVxyXG4gICAgICBvdXRwdXRbb3ArK10gPSBjb2RlO1xyXG5cclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGVuZ3RoIGNvZGVcclxuICAgIHRpID0gY29kZSAtIDI1NztcclxuICAgIGNvZGVMZW5ndGggPSBsZW5ndGhDb2RlVGFibGVbdGldO1xyXG4gICAgaWYgKGxlbmd0aEV4dHJhVGFibGVbdGldID4gMCkge1xyXG4gICAgICBjb2RlTGVuZ3RoICs9IHRoaXMucmVhZEJpdHMobGVuZ3RoRXh0cmFUYWJsZVt0aV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRpc3QgY29kZVxyXG4gICAgY29kZSA9IHRoaXMucmVhZENvZGVCeVRhYmxlKGRpc3QpO1xyXG4gICAgY29kZURpc3QgPSBkaXN0Q29kZVRhYmxlW2NvZGVdO1xyXG4gICAgaWYgKGRpc3RFeHRyYVRhYmxlW2NvZGVdID4gMCkge1xyXG4gICAgICBjb2RlRGlzdCArPSB0aGlzLnJlYWRCaXRzKGRpc3RFeHRyYVRhYmxlW2NvZGVdKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBsejc3IGRlY29kZVxyXG4gICAgaWYgKG9wID49IG9sZW5ndGgpIHtcclxuICAgICAgdGhpcy5vcCA9IG9wO1xyXG4gICAgICBvdXRwdXQgPSB0aGlzLmV4cGFuZEJ1ZmZlckJsb2NrKCk7XHJcbiAgICAgIG9wID0gdGhpcy5vcDtcclxuICAgIH1cclxuICAgIHdoaWxlIChjb2RlTGVuZ3RoLS0pIHtcclxuICAgICAgb3V0cHV0W29wXSA9IG91dHB1dFsob3ArKykgLSBjb2RlRGlzdF07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB3aGlsZSAodGhpcy5iaXRzYnVmbGVuID49IDgpIHtcclxuICAgIHRoaXMuYml0c2J1ZmxlbiAtPSA4O1xyXG4gICAgdGhpcy5pcC0tO1xyXG4gIH1cclxuICB0aGlzLm9wID0gb3A7XHJcbn07XHJcblxyXG4vKipcclxuICogZGVjb2RlIGh1ZmZtYW4gY29kZSAoYWRhcHRpdmUpXHJcbiAqIEBwYXJhbSB7IShBcnJheS48bnVtYmVyPnxVaW50MTZBcnJheSl9IGxpdGxlbiBsaXRlcmFsIGFuZCBsZW5ndGggY29kZSB0YWJsZS5cclxuICogQHBhcmFtIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBkaXN0IGRpc3RpbmF0aW9uIGNvZGUgdGFibGUuXHJcbiAqL1xyXG5abGliLlJhd0luZmxhdGUucHJvdG90eXBlLmRlY29kZUh1ZmZtYW5BZGFwdGl2ZSA9IGZ1bmN0aW9uKGxpdGxlbiwgZGlzdCkge1xyXG4gIHZhciBvdXRwdXQgPSB0aGlzLm91dHB1dDtcclxuICB2YXIgb3AgPSB0aGlzLm9wO1xyXG5cclxuICB0aGlzLmN1cnJlbnRMaXRsZW5UYWJsZSA9IGxpdGxlbjtcclxuXHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IG91dHB1dCBwb3NpdGlvbiBsaW1pdC4gKi9cclxuICB2YXIgb2xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGh1ZmZtYW4gY29kZS4gKi9cclxuICB2YXIgY29kZTtcclxuICAvKiogQHR5cGUge251bWJlcn0gdGFibGUgaW5kZXguICovXHJcbiAgdmFyIHRpO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBodWZmbWFuIGNvZGUgZGlzdGluYXRpb24uICovXHJcbiAgdmFyIGNvZGVEaXN0O1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBodWZmbWFuIGNvZGUgbGVuZ3RoLiAqL1xyXG4gIHZhciBjb2RlTGVuZ3RoO1xyXG5cclxuICB2YXIgbGVuZ3RoQ29kZVRhYmxlID0gWmxpYi5SYXdJbmZsYXRlLkxlbmd0aENvZGVUYWJsZTtcclxuICB2YXIgbGVuZ3RoRXh0cmFUYWJsZSA9IFpsaWIuUmF3SW5mbGF0ZS5MZW5ndGhFeHRyYVRhYmxlO1xyXG4gIHZhciBkaXN0Q29kZVRhYmxlID0gWmxpYi5SYXdJbmZsYXRlLkRpc3RDb2RlVGFibGU7XHJcbiAgdmFyIGRpc3RFeHRyYVRhYmxlID0gWmxpYi5SYXdJbmZsYXRlLkRpc3RFeHRyYVRhYmxlO1xyXG5cclxuICB3aGlsZSAoKGNvZGUgPSB0aGlzLnJlYWRDb2RlQnlUYWJsZShsaXRsZW4pKSAhPT0gMjU2KSB7XHJcbiAgICAvLyBsaXRlcmFsXHJcbiAgICBpZiAoY29kZSA8IDI1Nikge1xyXG4gICAgICBpZiAob3AgPj0gb2xlbmd0aCkge1xyXG4gICAgICAgIG91dHB1dCA9IHRoaXMuZXhwYW5kQnVmZmVyQWRhcHRpdmUoKTtcclxuICAgICAgICBvbGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcclxuICAgICAgfVxyXG4gICAgICBvdXRwdXRbb3ArK10gPSBjb2RlO1xyXG5cclxuICAgICAgY29udGludWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gbGVuZ3RoIGNvZGVcclxuICAgIHRpID0gY29kZSAtIDI1NztcclxuICAgIGNvZGVMZW5ndGggPSBsZW5ndGhDb2RlVGFibGVbdGldO1xyXG4gICAgaWYgKGxlbmd0aEV4dHJhVGFibGVbdGldID4gMCkge1xyXG4gICAgICBjb2RlTGVuZ3RoICs9IHRoaXMucmVhZEJpdHMobGVuZ3RoRXh0cmFUYWJsZVt0aV0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIGRpc3QgY29kZVxyXG4gICAgY29kZSA9IHRoaXMucmVhZENvZGVCeVRhYmxlKGRpc3QpO1xyXG4gICAgY29kZURpc3QgPSBkaXN0Q29kZVRhYmxlW2NvZGVdO1xyXG4gICAgaWYgKGRpc3RFeHRyYVRhYmxlW2NvZGVdID4gMCkge1xyXG4gICAgICBjb2RlRGlzdCArPSB0aGlzLnJlYWRCaXRzKGRpc3RFeHRyYVRhYmxlW2NvZGVdKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBsejc3IGRlY29kZVxyXG4gICAgaWYgKG9wICsgY29kZUxlbmd0aCA+IG9sZW5ndGgpIHtcclxuICAgICAgb3V0cHV0ID0gdGhpcy5leHBhbmRCdWZmZXJBZGFwdGl2ZSgpO1xyXG4gICAgICBvbGVuZ3RoID0gb3V0cHV0Lmxlbmd0aDtcclxuICAgIH1cclxuICAgIHdoaWxlIChjb2RlTGVuZ3RoLS0pIHtcclxuICAgICAgb3V0cHV0W29wXSA9IG91dHB1dFsob3ArKykgLSBjb2RlRGlzdF07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB3aGlsZSAodGhpcy5iaXRzYnVmbGVuID49IDgpIHtcclxuICAgIHRoaXMuYml0c2J1ZmxlbiAtPSA4O1xyXG4gICAgdGhpcy5pcC0tO1xyXG4gIH1cclxuICB0aGlzLm9wID0gb3A7XHJcbn07XHJcblxyXG4vKipcclxuICogZXhwYW5kIG91dHB1dCBidWZmZXIuXHJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3BhcmFtIG9wdGlvbiBwYXJhbWV0ZXJzLlxyXG4gKiBAcmV0dXJuIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBvdXRwdXQgYnVmZmVyLlxyXG4gKi9cclxuWmxpYi5SYXdJbmZsYXRlLnByb3RvdHlwZS5leHBhbmRCdWZmZXJCbG9jayA9IGZ1bmN0aW9uKG9wdF9wYXJhbSkge1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0gc3RvcmUgYnVmZmVyLiAqL1xyXG4gIHZhciBidWZmZXIgPVxyXG4gICAgbmV3IChVU0VfVFlQRURBUlJBWSA/IFVpbnQ4QXJyYXkgOiBBcnJheSkoXHJcbiAgICAgICAgdGhpcy5vcCAtIFpsaWIuUmF3SW5mbGF0ZS5NYXhCYWNrd2FyZExlbmd0aFxyXG4gICAgKTtcclxuICAvKiogQHR5cGUge251bWJlcn0gYmFja3dhcmQgYmFzZSBwb2ludCAqL1xyXG4gIHZhciBiYWNrd2FyZCA9IHRoaXMub3AgLSBabGliLlJhd0luZmxhdGUuTWF4QmFja3dhcmRMZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGNvcHkgaW5kZXguICovXHJcbiAgdmFyIGk7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGNvcHkgbGltaXQgKi9cclxuICB2YXIgaWw7XHJcblxyXG4gIHZhciBvdXRwdXQgPSB0aGlzLm91dHB1dDtcclxuXHJcbiAgLy8gY29weSB0byBvdXRwdXQgYnVmZmVyXHJcbiAgaWYgKFVTRV9UWVBFREFSUkFZKSB7XHJcbiAgICBidWZmZXIuc2V0KG91dHB1dC5zdWJhcnJheShabGliLlJhd0luZmxhdGUuTWF4QmFja3dhcmRMZW5ndGgsIGJ1ZmZlci5sZW5ndGgpKTtcclxuICB9IGVsc2Uge1xyXG4gICAgZm9yIChpID0gMCwgaWwgPSBidWZmZXIubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xyXG4gICAgICBidWZmZXJbaV0gPSBvdXRwdXRbaSArIFpsaWIuUmF3SW5mbGF0ZS5NYXhCYWNrd2FyZExlbmd0aF07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB0aGlzLmJsb2Nrcy5wdXNoKGJ1ZmZlcik7XHJcbiAgdGhpcy50b3RhbHBvcyArPSBidWZmZXIubGVuZ3RoO1xyXG5cclxuICAvLyBjb3B5IHRvIGJhY2t3YXJkIGJ1ZmZlclxyXG4gIGlmIChVU0VfVFlQRURBUlJBWSkge1xyXG4gICAgb3V0cHV0LnNldChcclxuICAgICAgb3V0cHV0LnN1YmFycmF5KGJhY2t3YXJkLCBiYWNrd2FyZCArIFpsaWIuUmF3SW5mbGF0ZS5NYXhCYWNrd2FyZExlbmd0aClcclxuICAgICk7XHJcbiAgfSBlbHNlIHtcclxuICAgIGZvciAoaSA9IDA7IGkgPCBabGliLlJhd0luZmxhdGUuTWF4QmFja3dhcmRMZW5ndGg7ICsraSkge1xyXG4gICAgICBvdXRwdXRbaV0gPSBvdXRwdXRbYmFja3dhcmQgKyBpXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoaXMub3AgPSBabGliLlJhd0luZmxhdGUuTWF4QmFja3dhcmRMZW5ndGg7XHJcblxyXG4gIHJldHVybiBvdXRwdXQ7XHJcbn07XHJcblxyXG4vKipcclxuICogZXhwYW5kIG91dHB1dCBidWZmZXIuIChhZGFwdGl2ZSlcclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfcGFyYW0gb3B0aW9uIHBhcmFtZXRlcnMuXHJcbiAqIEByZXR1cm4geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IG91dHB1dCBidWZmZXIgcG9pbnRlci5cclxuICovXHJcblpsaWIuUmF3SW5mbGF0ZS5wcm90b3R5cGUuZXhwYW5kQnVmZmVyQWRhcHRpdmUgPSBmdW5jdGlvbihvcHRfcGFyYW0pIHtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IHN0b3JlIGJ1ZmZlci4gKi9cclxuICB2YXIgYnVmZmVyO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBleHBhbnRpb24gcmF0aW8uICovXHJcbiAgdmFyIHJhdGlvID0gKHRoaXMuaW5wdXQubGVuZ3RoIC8gdGhpcy5pcCArIDEpIHwgMDtcclxuICAvKiogQHR5cGUge251bWJlcn0gbWF4aW11bSBudW1iZXIgb2YgaHVmZm1hbiBjb2RlLiAqL1xyXG4gIHZhciBtYXhIdWZmQ29kZTtcclxuICAvKiogQHR5cGUge251bWJlcn0gbmV3IG91dHB1dCBidWZmZXIgc2l6ZS4gKi9cclxuICB2YXIgbmV3U2l6ZTtcclxuICAvKiogQHR5cGUge251bWJlcn0gbWF4IGluZmxhdGUgc2l6ZS4gKi9cclxuICB2YXIgbWF4SW5mbGF0ZVNpemU7XHJcblxyXG4gIHZhciBpbnB1dCA9IHRoaXMuaW5wdXQ7XHJcbiAgdmFyIG91dHB1dCA9IHRoaXMub3V0cHV0O1xyXG5cclxuICBpZiAob3B0X3BhcmFtKSB7XHJcbiAgICBpZiAodHlwZW9mIG9wdF9wYXJhbS5maXhSYXRpbyA9PT0gJ251bWJlcicpIHtcclxuICAgICAgcmF0aW8gPSBvcHRfcGFyYW0uZml4UmF0aW87XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIG9wdF9wYXJhbS5hZGRSYXRpbyA9PT0gJ251bWJlcicpIHtcclxuICAgICAgcmF0aW8gKz0gb3B0X3BhcmFtLmFkZFJhdGlvO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gY2FsY3VsYXRlIG5ldyBidWZmZXIgc2l6ZVxyXG4gIGlmIChyYXRpbyA8IDIpIHtcclxuICAgIG1heEh1ZmZDb2RlID1cclxuICAgICAgKGlucHV0Lmxlbmd0aCAtIHRoaXMuaXApIC8gdGhpcy5jdXJyZW50TGl0bGVuVGFibGVbMl07XHJcbiAgICBtYXhJbmZsYXRlU2l6ZSA9IChtYXhIdWZmQ29kZSAvIDIgKiAyNTgpIHwgMDtcclxuICAgIG5ld1NpemUgPSBtYXhJbmZsYXRlU2l6ZSA8IG91dHB1dC5sZW5ndGggP1xyXG4gICAgICBvdXRwdXQubGVuZ3RoICsgbWF4SW5mbGF0ZVNpemUgOlxyXG4gICAgICBvdXRwdXQubGVuZ3RoIDw8IDE7XHJcbiAgfSBlbHNlIHtcclxuICAgIG5ld1NpemUgPSBvdXRwdXQubGVuZ3RoICogcmF0aW87XHJcbiAgfVxyXG5cclxuICAvLyBidWZmZXIgZXhwYW50aW9uXHJcbiAgaWYgKFVTRV9UWVBFREFSUkFZKSB7XHJcbiAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShuZXdTaXplKTtcclxuICAgIGJ1ZmZlci5zZXQob3V0cHV0KTtcclxuICB9IGVsc2Uge1xyXG4gICAgYnVmZmVyID0gb3V0cHV0O1xyXG4gIH1cclxuXHJcbiAgdGhpcy5vdXRwdXQgPSBidWZmZXI7XHJcblxyXG4gIHJldHVybiB0aGlzLm91dHB1dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBjb25jYXQgb3V0cHV0IGJ1ZmZlci5cclxuICogQHJldHVybiB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0gb3V0cHV0IGJ1ZmZlci5cclxuICovXHJcblpsaWIuUmF3SW5mbGF0ZS5wcm90b3R5cGUuY29uY2F0QnVmZmVyQmxvY2sgPSBmdW5jdGlvbigpIHtcclxuICAvKiogQHR5cGUge251bWJlcn0gYnVmZmVyIHBvaW50ZXIuICovXHJcbiAgdmFyIHBvcyA9IDA7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGJ1ZmZlciBwb2ludGVyLiAqL1xyXG4gIHZhciBsaW1pdCA9IHRoaXMudG90YWxwb3MgKyAodGhpcy5vcCAtIFpsaWIuUmF3SW5mbGF0ZS5NYXhCYWNrd2FyZExlbmd0aCk7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBvdXRwdXQgYmxvY2sgYXJyYXkuICovXHJcbiAgdmFyIG91dHB1dCA9IHRoaXMub3V0cHV0O1xyXG4gIC8qKiBAdHlwZSB7IUFycmF5fSBibG9ja3MgYXJyYXkuICovXHJcbiAgdmFyIGJsb2NrcyA9IHRoaXMuYmxvY2tzO1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0gb3V0cHV0IGJsb2NrIGFycmF5LiAqL1xyXG4gIHZhciBibG9jaztcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IG91dHB1dCBidWZmZXIuICovXHJcbiAgdmFyIGJ1ZmZlciA9IG5ldyAoVVNFX1RZUEVEQVJSQVkgPyBVaW50OEFycmF5IDogQXJyYXkpKGxpbWl0KTtcclxuICAvKiogQHR5cGUge251bWJlcn0gbG9vcCBjb3VudGVyLiAqL1xyXG4gIHZhciBpO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBsb29wIGxpbWl0ZXIuICovXHJcbiAgdmFyIGlsO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSBsb29wIGNvdW50ZXIuICovXHJcbiAgdmFyIGo7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9IGxvb3AgbGltaXRlci4gKi9cclxuICB2YXIgamw7XHJcblxyXG4gIC8vIHNpbmdsZSBidWZmZXJcclxuICBpZiAoYmxvY2tzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuIFVTRV9UWVBFREFSUkFZID9cclxuICAgICAgdGhpcy5vdXRwdXQuc3ViYXJyYXkoWmxpYi5SYXdJbmZsYXRlLk1heEJhY2t3YXJkTGVuZ3RoLCB0aGlzLm9wKSA6XHJcbiAgICAgIHRoaXMub3V0cHV0LnNsaWNlKFpsaWIuUmF3SW5mbGF0ZS5NYXhCYWNrd2FyZExlbmd0aCwgdGhpcy5vcCk7XHJcbiAgfVxyXG5cclxuICAvLyBjb3B5IHRvIGJ1ZmZlclxyXG4gIGZvciAoaSA9IDAsIGlsID0gYmxvY2tzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcclxuICAgIGJsb2NrID0gYmxvY2tzW2ldO1xyXG4gICAgZm9yIChqID0gMCwgamwgPSBibG9jay5sZW5ndGg7IGogPCBqbDsgKytqKSB7XHJcbiAgICAgIGJ1ZmZlcltwb3MrK10gPSBibG9ja1tqXTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIGN1cnJlbnQgYnVmZmVyXHJcbiAgZm9yIChpID0gWmxpYi5SYXdJbmZsYXRlLk1heEJhY2t3YXJkTGVuZ3RoLCBpbCA9IHRoaXMub3A7IGkgPCBpbDsgKytpKSB7XHJcbiAgICBidWZmZXJbcG9zKytdID0gb3V0cHV0W2ldO1xyXG4gIH1cclxuXHJcbiAgdGhpcy5ibG9ja3MgPSBbXTtcclxuICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcclxuXHJcbiAgcmV0dXJuIHRoaXMuYnVmZmVyO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIGNvbmNhdCBvdXRwdXQgYnVmZmVyLiAoZHluYW1pYylcclxuICogQHJldHVybiB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0gb3V0cHV0IGJ1ZmZlci5cclxuICovXHJcblpsaWIuUmF3SW5mbGF0ZS5wcm90b3R5cGUuY29uY2F0QnVmZmVyRHluYW1pYyA9IGZ1bmN0aW9uKCkge1xyXG4gIC8qKiBAdHlwZSB7QXJyYXkuPG51bWJlcj58VWludDhBcnJheX0gb3V0cHV0IGJ1ZmZlci4gKi9cclxuICB2YXIgYnVmZmVyO1xyXG4gIHZhciBvcCA9IHRoaXMub3A7XHJcblxyXG4gIGlmIChVU0VfVFlQRURBUlJBWSkge1xyXG4gICAgaWYgKHRoaXMucmVzaXplKSB7XHJcbiAgICAgIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KG9wKTtcclxuICAgICAgYnVmZmVyLnNldCh0aGlzLm91dHB1dC5zdWJhcnJheSgwLCBvcCkpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYnVmZmVyID0gdGhpcy5vdXRwdXQuc3ViYXJyYXkoMCwgb3ApO1xyXG4gICAgfVxyXG4gIH0gZWxzZSB7XHJcbiAgICBpZiAodGhpcy5vdXRwdXQubGVuZ3RoID4gb3ApIHtcclxuICAgICAgdGhpcy5vdXRwdXQubGVuZ3RoID0gb3A7XHJcbiAgICB9XHJcbiAgICBidWZmZXIgPSB0aGlzLm91dHB1dDtcclxuICB9XHJcblxyXG4gIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xyXG5cclxuICByZXR1cm4gdGhpcy5idWZmZXI7XHJcbn07XHJcblxyXG4vLyBlbmQgb2Ygc2NvcGVcclxufSk7XHJcblxyXG4vKiB2aW06c2V0IGV4cGFuZHRhYiB0cz0yIHN3PTIgdHc9ODA6ICovXHJcbiIsImdvb2cucHJvdmlkZSgnWmxpYi5aaXAnKTtcclxuXHJcbmdvb2cucmVxdWlyZSgnVVNFX1RZUEVEQVJSQVknKTtcclxuZ29vZy5yZXF1aXJlKCdabGliLlJhd0RlZmxhdGUnKTtcclxuZ29vZy5yZXF1aXJlKCdabGliLkNSQzMyJyk7XHJcblxyXG5nb29nLnNjb3BlKGZ1bmN0aW9uKCkge1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3BhcmFtcyBvcHRpb25zLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcblpsaWIuWmlwID0gZnVuY3Rpb24ob3B0X3BhcmFtcykge1xyXG4gIG9wdF9wYXJhbXMgPSBvcHRfcGFyYW1zIHx8IHt9O1xyXG4gIC8qKiBAdHlwZSB7QXJyYXkuPHtcclxuICAgKiAgIGJ1ZmZlcjogIShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KSxcclxuICAgKiAgIG9wdGlvbjogT2JqZWN0LFxyXG4gICAqICAgY29tcHJlc3NlZDogYm9vbGVhbixcclxuICAgKiAgIGVuY3J5cHRlZDogYm9vbGVhbixcclxuICAgKiAgIHNpemU6IG51bWJlcixcclxuICAgKiAgIGNyYzMyOiBudW1iZXJcclxuICAgKiB9Pn0gKi9cclxuICB0aGlzLmZpbGVzID0gW107XHJcbiAgLyoqIEB0eXBlIHsoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdGhpcy5jb21tZW50ID0gb3B0X3BhcmFtc1snY29tbWVudCddO1xyXG4gIC8qKiBAdHlwZSB7KEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHRoaXMucGFzc3dvcmQ7XHJcbn07XHJcblxyXG5cclxuLyoqXHJcbiAqIEBlbnVtIHtudW1iZXJ9XHJcbiAqL1xyXG5abGliLlppcC5Db21wcmVzc2lvbk1ldGhvZCA9IHtcclxuICBTVE9SRTogMCxcclxuICBERUZMQVRFOiA4XHJcbn07XHJcblxyXG4vKipcclxuICogQGVudW0ge251bWJlcn1cclxuICovXHJcblpsaWIuWmlwLk9wZXJhdGluZ1N5c3RlbSA9IHtcclxuICBNU0RPUzogMCxcclxuICBVTklYOiAzLFxyXG4gIE1BQ0lOVE9TSDogN1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBlbnVtIHtudW1iZXJ9XHJcbiAqL1xyXG5abGliLlppcC5GbGFncyA9IHtcclxuICBFTkNSWVBUOiAgICAweDAwMDEsXHJcbiAgREVTQ1JJUFRPUjogMHgwMDA4LFxyXG4gIFVURjg6ICAgICAgIDB4MDgwMFxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5abGliLlppcC5GaWxlSGVhZGVyU2lnbmF0dXJlID0gWzB4NTAsIDB4NGIsIDB4MDEsIDB4MDJdO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5abGliLlppcC5Mb2NhbEZpbGVIZWFkZXJTaWduYXR1cmUgPSBbMHg1MCwgMHg0YiwgMHgwMywgMHgwNF07XHJcblxyXG4vKipcclxuICogQHR5cGUge0FycmF5LjxudW1iZXI+fVxyXG4gKiBAY29uc3RcclxuICovXHJcblpsaWIuWmlwLkNlbnRyYWxEaXJlY3RvcnlTaWduYXR1cmUgPSBbMHg1MCwgMHg0YiwgMHgwNSwgMHgwNl07XHJcblxyXG4vKipcclxuICogQHBhcmFtIHtBcnJheS48bnVtYmVyPnxVaW50OEFycmF5fSBpbnB1dFxyXG4gKiBAcGFyYW0ge09iamVjdD19IG9wdF9wYXJhbXMgb3B0aW9ucy5cclxuICovXHJcblpsaWIuWmlwLnByb3RvdHlwZS5hZGRGaWxlID0gZnVuY3Rpb24oaW5wdXQsIG9wdF9wYXJhbXMpIHtcclxuICBvcHRfcGFyYW1zID0gb3B0X3BhcmFtcyB8fCB7fTtcclxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cclxuICB2YXIgZmlsZW5hbWUgPSAnJyB8fCBvcHRfcGFyYW1zWydmaWxlbmFtZSddO1xyXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cclxuICB2YXIgY29tcHJlc3NlZDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgc2l6ZSA9IGlucHV0Lmxlbmd0aDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgY3JjMzIgPSAwO1xyXG5cclxuICBpZiAoVVNFX1RZUEVEQVJSQVkgJiYgaW5wdXQgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgaW5wdXQgPSBuZXcgVWludDhBcnJheShpbnB1dCk7XHJcbiAgfVxyXG5cclxuICAvLyBkZWZhdWx0XHJcbiAgaWYgKHR5cGVvZiBvcHRfcGFyYW1zWydjb21wcmVzc2lvbk1ldGhvZCddICE9PSAnbnVtYmVyJykge1xyXG4gICAgb3B0X3BhcmFtc1snY29tcHJlc3Npb25NZXRob2QnXSA9IFpsaWIuWmlwLkNvbXByZXNzaW9uTWV0aG9kLkRFRkxBVEU7XHJcbiAgfVxyXG5cclxuICAvLyDjgZ3jga7loLTjgaflnKfnuK7jgZnjgovloLTlkIhcclxuICBpZiAob3B0X3BhcmFtc1snY29tcHJlc3MnXSkge1xyXG4gICAgc3dpdGNoIChvcHRfcGFyYW1zWydjb21wcmVzc2lvbk1ldGhvZCddKSB7XHJcbiAgICAgIGNhc2UgWmxpYi5aaXAuQ29tcHJlc3Npb25NZXRob2QuU1RPUkU6XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgWmxpYi5aaXAuQ29tcHJlc3Npb25NZXRob2QuREVGTEFURTpcclxuICAgICAgICBjcmMzMiA9IFpsaWIuQ1JDMzIuY2FsYyhpbnB1dCk7XHJcbiAgICAgICAgaW5wdXQgPSB0aGlzLmRlZmxhdGVXaXRoT3B0aW9uKGlucHV0LCBvcHRfcGFyYW1zKTtcclxuICAgICAgICBjb21wcmVzc2VkID0gdHJ1ZTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kOicgKyBvcHRfcGFyYW1zWydjb21wcmVzc2lvbk1ldGhvZCddKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRoaXMuZmlsZXMucHVzaCh7XHJcbiAgICBidWZmZXI6IGlucHV0LFxyXG4gICAgb3B0aW9uOiBvcHRfcGFyYW1zLFxyXG4gICAgY29tcHJlc3NlZDogY29tcHJlc3NlZCxcclxuICAgIGVuY3J5cHRlZDogZmFsc2UsXHJcbiAgICBzaXplOiBzaXplLFxyXG4gICAgY3JjMzI6IGNyYzMyXHJcbiAgfSk7XHJcbn07XHJcblxyXG4vKipcclxuICogQHBhcmFtIHsoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IHBhc3N3b3JkXHJcbiAqL1xyXG5abGliLlppcC5wcm90b3R5cGUuc2V0UGFzc3dvcmQgPSBmdW5jdGlvbihwYXNzd29yZCkge1xyXG4gIHRoaXMucGFzc3dvcmQgPSBwYXNzd29yZDtcclxufTtcclxuXHJcblpsaWIuWmlwLnByb3RvdHlwZS5jb21wcmVzcyA9IGZ1bmN0aW9uKCkge1xyXG4gIC8qKiBAdHlwZSB7QXJyYXkuPHtcclxuICAgKiAgIGJ1ZmZlcjogIShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KSxcclxuICAgKiAgIG9wdGlvbjogT2JqZWN0LFxyXG4gICAqICAgY29tcHJlc3NlZDogYm9vbGVhbixcclxuICAgKiAgIGVuY3J5cHRlZDogYm9vbGVhbixcclxuICAgKiAgIHNpemU6IG51bWJlcixcclxuICAgKiAgIGNyYzMyOiBudW1iZXJcclxuICAgKiB9Pn0gKi9cclxuICB2YXIgZmlsZXMgPSB0aGlzLmZpbGVzO1xyXG4gIC8qKiBAdHlwZSB7e1xyXG4gICAqICAgYnVmZmVyOiAhKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpLFxyXG4gICAqICAgb3B0aW9uOiBPYmplY3QsXHJcbiAgICogICBjb21wcmVzc2VkOiBib29sZWFuLFxyXG4gICAqICAgZW5jcnlwdGVkOiBib29sZWFuLFxyXG4gICAqICAgc2l6ZTogbnVtYmVyLFxyXG4gICAqICAgY3JjMzI6IG51bWJlclxyXG4gICAqIH19ICovXHJcbiAgdmFyIGZpbGU7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHZhciBvdXRwdXQ7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIG9wMTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgb3AyO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBvcDM7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGxvY2FsRmlsZVNpemUgPSAwO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBjZW50cmFsRGlyZWN0b3J5U2l6ZSA9IDA7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGVuZE9mQ2VudHJhbERpcmVjdG9yeVNpemU7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIG9mZnNldDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgbmVlZFZlcnNpb247XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGZsYWdzO1xyXG4gIC8qKiBAdHlwZSB7WmxpYi5aaXAuQ29tcHJlc3Npb25NZXRob2R9ICovXHJcbiAgdmFyIGNvbXByZXNzaW9uTWV0aG9kO1xyXG4gIC8qKiBAdHlwZSB7RGF0ZX0gKi9cclxuICB2YXIgZGF0ZTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgY3JjMzI7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIHNpemU7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIHBsYWluU2l6ZTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgZmlsZW5hbWVMZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGV4dHJhRmllbGRMZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGNvbW1lbnRMZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHsoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdmFyIGZpbGVuYW1lO1xyXG4gIC8qKiBAdHlwZSB7KEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHZhciBleHRyYUZpZWxkO1xyXG4gIC8qKiBAdHlwZSB7KEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHZhciBjb21tZW50O1xyXG4gIC8qKiBAdHlwZSB7KEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHZhciBidWZmZXI7XHJcbiAgLyoqIEB0eXBlIHsqfSAqL1xyXG4gIHZhciB0bXA7XHJcbiAgLyoqIEB0eXBlIHtBcnJheS48bnVtYmVyPnxVaW50MzJBcnJheXxPYmplY3R9ICovXHJcbiAgdmFyIGtleTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaWw7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGo7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGpsO1xyXG5cclxuICAvLyDjg5XjgqHjgqTjg6vjga7lnKfnuK5cclxuICBmb3IgKGkgPSAwLCBpbCA9IGZpbGVzLmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcclxuICAgIGZpbGUgPSBmaWxlc1tpXTtcclxuICAgIGZpbGVuYW1lTGVuZ3RoID1cclxuICAgICAgKGZpbGUub3B0aW9uWydmaWxlbmFtZSddKSA/IGZpbGUub3B0aW9uWydmaWxlbmFtZSddLmxlbmd0aCA6IDA7XHJcbiAgICBleHRyYUZpZWxkTGVuZ3RoID1cclxuICAgICAgKGZpbGUub3B0aW9uWydleHRyYUZpZWxkJ10pID8gZmlsZS5vcHRpb25bJ2V4dHJhRmllbGQnXS5sZW5ndGggOiAwO1xyXG4gICAgY29tbWVudExlbmd0aCA9XHJcbiAgICAgIChmaWxlLm9wdGlvblsnY29tbWVudCddKSA/IGZpbGUub3B0aW9uWydjb21tZW50J10ubGVuZ3RoIDogMDtcclxuXHJcbiAgICAvLyDlnKfnuK7jgZXjgozjgabjgYTjgarjgYvjgaPjgZ/jgonlnKfnuK5cclxuICAgIGlmICghZmlsZS5jb21wcmVzc2VkKSB7XHJcbiAgICAgIC8vIOWcp+e4ruWJjeOBqyBDUkMzMiDjga7oqIjnrpfjgpLjgZfjgabjgYrjgY9cclxuICAgICAgZmlsZS5jcmMzMiA9IFpsaWIuQ1JDMzIuY2FsYyhmaWxlLmJ1ZmZlcik7XHJcblxyXG4gICAgICBzd2l0Y2ggKGZpbGUub3B0aW9uWydjb21wcmVzc2lvbk1ldGhvZCddKSB7XHJcbiAgICAgICAgY2FzZSBabGliLlppcC5Db21wcmVzc2lvbk1ldGhvZC5TVE9SRTpcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGNhc2UgWmxpYi5aaXAuQ29tcHJlc3Npb25NZXRob2QuREVGTEFURTpcclxuICAgICAgICAgIGZpbGUuYnVmZmVyID0gdGhpcy5kZWZsYXRlV2l0aE9wdGlvbihmaWxlLmJ1ZmZlciwgZmlsZS5vcHRpb24pO1xyXG4gICAgICAgICAgZmlsZS5jb21wcmVzc2VkID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kOicgKyBmaWxlLm9wdGlvblsnY29tcHJlc3Npb25NZXRob2QnXSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBlbmNyeXB0aW9uXHJcbiAgICBpZiAoZmlsZS5vcHRpb25bJ3Bhc3N3b3JkJ10gIT09IHZvaWQgMHx8IHRoaXMucGFzc3dvcmQgIT09IHZvaWQgMCkge1xyXG4gICAgICAvLyBpbml0IGVuY3J5cHRpb25cclxuICAgICAga2V5ID0gdGhpcy5jcmVhdGVFbmNyeXB0aW9uS2V5KGZpbGUub3B0aW9uWydwYXNzd29yZCddIHx8IHRoaXMucGFzc3dvcmQpO1xyXG5cclxuICAgICAgLy8gYWRkIGhlYWRlclxyXG4gICAgICBidWZmZXIgPSBmaWxlLmJ1ZmZlcjtcclxuICAgICAgaWYgKFVTRV9UWVBFREFSUkFZKSB7XHJcbiAgICAgICAgdG1wID0gbmV3IFVpbnQ4QXJyYXkoYnVmZmVyLmxlbmd0aCArIDEyKTtcclxuICAgICAgICB0bXAuc2V0KGJ1ZmZlciwgMTIpO1xyXG4gICAgICAgIGJ1ZmZlciA9IHRtcDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBidWZmZXIudW5zaGlmdCgwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yIChqID0gMDsgaiA8IDEyOyArK2opIHtcclxuICAgICAgICBidWZmZXJbal0gPSB0aGlzLmVuY29kZShcclxuICAgICAgICAgIGtleSxcclxuICAgICAgICAgIGkgPT09IDExID8gKGZpbGUuY3JjMzIgJiAweGZmKSA6IChNYXRoLnJhbmRvbSgpICogMjU2IHwgMClcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBkYXRhIGVuY3J5cHRpb25cclxuICAgICAgZm9yIChqbCA9IGJ1ZmZlci5sZW5ndGg7IGogPCBqbDsgKytqKSB7XHJcbiAgICAgICAgYnVmZmVyW2pdID0gdGhpcy5lbmNvZGUoa2V5LCBidWZmZXJbal0pO1xyXG4gICAgICB9XHJcbiAgICAgIGZpbGUuYnVmZmVyID0gYnVmZmVyO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOW/heimgeODkOODg+ODleOCoeOCteOCpOOCuuOBruioiOeul1xyXG4gICAgbG9jYWxGaWxlU2l6ZSArPVxyXG4gICAgICAvLyBsb2NhbCBmaWxlIGhlYWRlclxyXG4gICAgICAzMCArIGZpbGVuYW1lTGVuZ3RoICtcclxuICAgICAgLy8gZmlsZSBkYXRhXHJcbiAgICAgIGZpbGUuYnVmZmVyLmxlbmd0aDtcclxuXHJcbiAgICBjZW50cmFsRGlyZWN0b3J5U2l6ZSArPVxyXG4gICAgICAvLyBmaWxlIGhlYWRlclxyXG4gICAgICA0NiArIGZpbGVuYW1lTGVuZ3RoICsgY29tbWVudExlbmd0aDtcclxuICB9XHJcblxyXG4gIC8vIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVxyXG4gIGVuZE9mQ2VudHJhbERpcmVjdG9yeVNpemUgPSAyMiArICh0aGlzLmNvbW1lbnQgPyB0aGlzLmNvbW1lbnQubGVuZ3RoIDogMCk7XHJcbiAgb3V0cHV0ID0gbmV3IChVU0VfVFlQRURBUlJBWSA/IFVpbnQ4QXJyYXkgOiBBcnJheSkoXHJcbiAgICBsb2NhbEZpbGVTaXplICsgY2VudHJhbERpcmVjdG9yeVNpemUgKyBlbmRPZkNlbnRyYWxEaXJlY3RvcnlTaXplXHJcbiAgKTtcclxuICBvcDEgPSAwO1xyXG4gIG9wMiA9IGxvY2FsRmlsZVNpemU7XHJcbiAgb3AzID0gb3AyICsgY2VudHJhbERpcmVjdG9yeVNpemU7XHJcblxyXG4gIC8vIOODleOCoeOCpOODq+OBruWcp+e4rlxyXG4gIGZvciAoaSA9IDAsIGlsID0gZmlsZXMubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xyXG4gICAgZmlsZSA9IGZpbGVzW2ldO1xyXG4gICAgZmlsZW5hbWVMZW5ndGggPVxyXG4gICAgICBmaWxlLm9wdGlvblsnZmlsZW5hbWUnXSA/IGZpbGUub3B0aW9uWydmaWxlbmFtZSddLmxlbmd0aCA6ICAwO1xyXG4gICAgZXh0cmFGaWVsZExlbmd0aCA9IDA7IC8vIFRPRE9cclxuICAgIGNvbW1lbnRMZW5ndGggPVxyXG4gICAgICBmaWxlLm9wdGlvblsnY29tbWVudCddID8gZmlsZS5vcHRpb25bJ2NvbW1lbnQnXS5sZW5ndGggOiAwO1xyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLy8gbG9jYWwgZmlsZSBoZWFkZXIgJiBmaWxlIGhlYWRlclxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgb2Zmc2V0ID0gb3AxO1xyXG5cclxuICAgIC8vIHNpZ25hdHVyZVxyXG4gICAgLy8gbG9jYWwgZmlsZSBoZWFkZXJcclxuICAgIG91dHB1dFtvcDErK10gPSBabGliLlppcC5Mb2NhbEZpbGVIZWFkZXJTaWduYXR1cmVbMF07XHJcbiAgICBvdXRwdXRbb3AxKytdID0gWmxpYi5aaXAuTG9jYWxGaWxlSGVhZGVyU2lnbmF0dXJlWzFdO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IFpsaWIuWmlwLkxvY2FsRmlsZUhlYWRlclNpZ25hdHVyZVsyXTtcclxuICAgIG91dHB1dFtvcDErK10gPSBabGliLlppcC5Mb2NhbEZpbGVIZWFkZXJTaWduYXR1cmVbM107XHJcbiAgICAvLyBmaWxlIGhlYWRlclxyXG4gICAgb3V0cHV0W29wMisrXSA9IFpsaWIuWmlwLkZpbGVIZWFkZXJTaWduYXR1cmVbMF07XHJcbiAgICBvdXRwdXRbb3AyKytdID0gWmxpYi5aaXAuRmlsZUhlYWRlclNpZ25hdHVyZVsxXTtcclxuICAgIG91dHB1dFtvcDIrK10gPSBabGliLlppcC5GaWxlSGVhZGVyU2lnbmF0dXJlWzJdO1xyXG4gICAgb3V0cHV0W29wMisrXSA9IFpsaWIuWmlwLkZpbGVIZWFkZXJTaWduYXR1cmVbM107XHJcblxyXG4gICAgLy8gY29tcHJlc3NvciBpbmZvXHJcbiAgICBuZWVkVmVyc2lvbiA9IDIwO1xyXG4gICAgb3V0cHV0W29wMisrXSA9IG5lZWRWZXJzaW9uICYgMHhmZjtcclxuICAgIG91dHB1dFtvcDIrK10gPVxyXG4gICAgICAvKiogQHR5cGUge1psaWIuWmlwLk9wZXJhdGluZ1N5c3RlbX0gKi9cclxuICAgICAgKGZpbGUub3B0aW9uWydvcyddKSB8fFxyXG4gICAgICBabGliLlppcC5PcGVyYXRpbmdTeXN0ZW0uTVNET1M7XHJcblxyXG4gICAgLy8gbmVlZCB2ZXJzaW9uXHJcbiAgICBvdXRwdXRbb3AxKytdID0gb3V0cHV0W29wMisrXSA9ICBuZWVkVmVyc2lvbiAgICAgICAmIDB4ZmY7XHJcbiAgICBvdXRwdXRbb3AxKytdID0gb3V0cHV0W29wMisrXSA9IChuZWVkVmVyc2lvbiA+PiA4KSAmIDB4ZmY7XHJcblxyXG4gICAgLy8gZ2VuZXJhbCBwdXJwb3NlIGJpdCBmbGFnXHJcbiAgICBmbGFncyA9IDA7XHJcbiAgICBpZiAoZmlsZS5vcHRpb25bJ3Bhc3N3b3JkJ10gfHwgdGhpcy5wYXNzd29yZCkge1xyXG4gICAgICBmbGFncyB8PSBabGliLlppcC5GbGFncy5FTkNSWVBUO1xyXG4gICAgfVxyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAgZmxhZ3MgICAgICAgJiAweGZmO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAoZmxhZ3MgPj4gOCkgJiAweGZmO1xyXG5cclxuICAgIC8vIGNvbXByZXNzaW9uIG1ldGhvZFxyXG4gICAgY29tcHJlc3Npb25NZXRob2QgPVxyXG4gICAgICAvKiogQHR5cGUge1psaWIuWmlwLkNvbXByZXNzaW9uTWV0aG9kfSAqL1xyXG4gICAgICAoZmlsZS5vcHRpb25bJ2NvbXByZXNzaW9uTWV0aG9kJ10pO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAgY29tcHJlc3Npb25NZXRob2QgICAgICAgJiAweGZmO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAoY29tcHJlc3Npb25NZXRob2QgPj4gOCkgJiAweGZmO1xyXG5cclxuICAgIC8vIGRhdGVcclxuICAgIGRhdGUgPSAvKiogQHR5cGUgeyhEYXRlfHVuZGVmaW5lZCl9ICovKGZpbGUub3B0aW9uWydkYXRlJ10pIHx8IG5ldyBEYXRlKCk7XHJcbiAgICBvdXRwdXRbb3AxKytdID0gb3V0cHV0W29wMisrXSA9XHJcbiAgICAgICgoZGF0ZS5nZXRNaW51dGVzKCkgJiAweDcpIDw8IDUpIHxcclxuICAgICAgKGRhdGUuZ2V0U2Vjb25kcygpIC8gMiB8IDApO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPVxyXG4gICAgICAoZGF0ZS5nZXRIb3VycygpICAgPDwgMykgfFxyXG4gICAgICAoZGF0ZS5nZXRNaW51dGVzKCkgPj4gMyk7XHJcbiAgICAvL1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPVxyXG4gICAgICAoKGRhdGUuZ2V0TW9udGgoKSArIDEgJiAweDcpIDw8IDUpIHxcclxuICAgICAgKGRhdGUuZ2V0RGF0ZSgpKTtcclxuICAgIG91dHB1dFtvcDErK10gPSBvdXRwdXRbb3AyKytdID1cclxuICAgICAgKChkYXRlLmdldEZ1bGxZZWFyKCkgLSAxOTgwICYgMHg3ZikgPDwgMSkgfFxyXG4gICAgICAoZGF0ZS5nZXRNb250aCgpICsgMSA+PiAzKTtcclxuXHJcbiAgICAvLyBDUkMtMzJcclxuICAgIGNyYzMyID0gZmlsZS5jcmMzMjtcclxuICAgIG91dHB1dFtvcDErK10gPSBvdXRwdXRbb3AyKytdID0gIGNyYzMyICAgICAgICAmIDB4ZmY7XHJcbiAgICBvdXRwdXRbb3AxKytdID0gb3V0cHV0W29wMisrXSA9IChjcmMzMiA+PiAgOCkgJiAweGZmO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAoY3JjMzIgPj4gMTYpICYgMHhmZjtcclxuICAgIG91dHB1dFtvcDErK10gPSBvdXRwdXRbb3AyKytdID0gKGNyYzMyID4+IDI0KSAmIDB4ZmY7XHJcblxyXG4gICAgLy8gY29tcHJlc3NlZCBzaXplXHJcbiAgICBzaXplID0gZmlsZS5idWZmZXIubGVuZ3RoO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAgc2l6ZSAgICAgICAgJiAweGZmO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAoc2l6ZSA+PiAgOCkgJiAweGZmO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAoc2l6ZSA+PiAxNikgJiAweGZmO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAoc2l6ZSA+PiAyNCkgJiAweGZmO1xyXG5cclxuICAgIC8vIHVuY29tcHJlc3NlZCBzaXplXHJcbiAgICBwbGFpblNpemUgPSBmaWxlLnNpemU7XHJcbiAgICBvdXRwdXRbb3AxKytdID0gb3V0cHV0W29wMisrXSA9ICBwbGFpblNpemUgICAgICAgICYgMHhmZjtcclxuICAgIG91dHB1dFtvcDErK10gPSBvdXRwdXRbb3AyKytdID0gKHBsYWluU2l6ZSA+PiAgOCkgJiAweGZmO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAocGxhaW5TaXplID4+IDE2KSAmIDB4ZmY7XHJcbiAgICBvdXRwdXRbb3AxKytdID0gb3V0cHV0W29wMisrXSA9IChwbGFpblNpemUgPj4gMjQpICYgMHhmZjtcclxuXHJcbiAgICAvLyBmaWxlbmFtZSBsZW5ndGhcclxuICAgIG91dHB1dFtvcDErK10gPSBvdXRwdXRbb3AyKytdID0gIGZpbGVuYW1lTGVuZ3RoICAgICAgICYgMHhmZjtcclxuICAgIG91dHB1dFtvcDErK10gPSBvdXRwdXRbb3AyKytdID0gKGZpbGVuYW1lTGVuZ3RoID4+IDgpICYgMHhmZjtcclxuXHJcbiAgICAvLyBleHRyYSBmaWVsZCBsZW5ndGhcclxuICAgIG91dHB1dFtvcDErK10gPSBvdXRwdXRbb3AyKytdID0gIGV4dHJhRmllbGRMZW5ndGggICAgICAgJiAweGZmO1xyXG4gICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSAoZXh0cmFGaWVsZExlbmd0aCA+PiA4KSAmIDB4ZmY7XHJcblxyXG4gICAgLy8gZmlsZSBjb21tZW50IGxlbmd0aFxyXG4gICAgb3V0cHV0W29wMisrXSA9ICBjb21tZW50TGVuZ3RoICAgICAgICYgMHhmZjtcclxuICAgIG91dHB1dFtvcDIrK10gPSAoY29tbWVudExlbmd0aCA+PiA4KSAmIDB4ZmY7XHJcblxyXG4gICAgLy8gZGlzayBudW1iZXIgc3RhcnRcclxuICAgIG91dHB1dFtvcDIrK10gPSAwO1xyXG4gICAgb3V0cHV0W29wMisrXSA9IDA7XHJcblxyXG4gICAgLy8gaW50ZXJuYWwgZmlsZSBhdHRyaWJ1dGVzXHJcbiAgICBvdXRwdXRbb3AyKytdID0gMDtcclxuICAgIG91dHB1dFtvcDIrK10gPSAwO1xyXG5cclxuICAgIC8vIGV4dGVybmFsIGZpbGUgYXR0cmlidXRlc1xyXG4gICAgb3V0cHV0W29wMisrXSA9IDA7XHJcbiAgICBvdXRwdXRbb3AyKytdID0gMDtcclxuICAgIG91dHB1dFtvcDIrK10gPSAwO1xyXG4gICAgb3V0cHV0W29wMisrXSA9IDA7XHJcblxyXG4gICAgLy8gcmVsYXRpdmUgb2Zmc2V0IG9mIGxvY2FsIGhlYWRlclxyXG4gICAgb3V0cHV0W29wMisrXSA9ICBvZmZzZXQgICAgICAgICYgMHhmZjtcclxuICAgIG91dHB1dFtvcDIrK10gPSAob2Zmc2V0ID4+ICA4KSAmIDB4ZmY7XHJcbiAgICBvdXRwdXRbb3AyKytdID0gKG9mZnNldCA+PiAxNikgJiAweGZmO1xyXG4gICAgb3V0cHV0W29wMisrXSA9IChvZmZzZXQgPj4gMjQpICYgMHhmZjtcclxuXHJcbiAgICAvLyBmaWxlbmFtZVxyXG4gICAgZmlsZW5hbWUgPSBmaWxlLm9wdGlvblsnZmlsZW5hbWUnXTtcclxuICAgIGlmIChmaWxlbmFtZSkge1xyXG4gICAgICBpZiAoVVNFX1RZUEVEQVJSQVkpIHtcclxuICAgICAgICBvdXRwdXQuc2V0KGZpbGVuYW1lLCBvcDEpO1xyXG4gICAgICAgIG91dHB1dC5zZXQoZmlsZW5hbWUsIG9wMik7XHJcbiAgICAgICAgb3AxICs9IGZpbGVuYW1lTGVuZ3RoO1xyXG4gICAgICAgIG9wMiArPSBmaWxlbmFtZUxlbmd0aDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgZmlsZW5hbWVMZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgb3V0cHV0W29wMSsrXSA9IG91dHB1dFtvcDIrK10gPSBmaWxlbmFtZVtqXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBleHRyYSBmaWVsZFxyXG4gICAgZXh0cmFGaWVsZCA9IGZpbGUub3B0aW9uWydleHRyYUZpZWxkJ107XHJcbiAgICBpZiAoZXh0cmFGaWVsZCkge1xyXG4gICAgICBpZiAoVVNFX1RZUEVEQVJSQVkpIHtcclxuICAgICAgICBvdXRwdXQuc2V0KGV4dHJhRmllbGQsIG9wMSk7XHJcbiAgICAgICAgb3V0cHV0LnNldChleHRyYUZpZWxkLCBvcDIpO1xyXG4gICAgICAgIG9wMSArPSBleHRyYUZpZWxkTGVuZ3RoO1xyXG4gICAgICAgIG9wMiArPSBleHRyYUZpZWxkTGVuZ3RoO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBjb21tZW50TGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgIG91dHB1dFtvcDErK10gPSBvdXRwdXRbb3AyKytdID0gZXh0cmFGaWVsZFtqXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBjb21tZW50XHJcbiAgICBjb21tZW50ID0gZmlsZS5vcHRpb25bJ2NvbW1lbnQnXTtcclxuICAgIGlmIChjb21tZW50KSB7XHJcbiAgICAgIGlmIChVU0VfVFlQRURBUlJBWSkge1xyXG4gICAgICAgIG91dHB1dC5zZXQoY29tbWVudCwgb3AyKTtcclxuICAgICAgICBvcDIgKz0gY29tbWVudExlbmd0aDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgY29tbWVudExlbmd0aDsgKytqKSB7XHJcbiAgICAgICAgICBvdXRwdXRbb3AyKytdID0gY29tbWVudFtqXTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgIC8vIGZpbGUgZGF0YVxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblxyXG4gICAgaWYgKFVTRV9UWVBFREFSUkFZKSB7XHJcbiAgICAgIG91dHB1dC5zZXQoZmlsZS5idWZmZXIsIG9wMSk7XHJcbiAgICAgIG9wMSArPSBmaWxlLmJ1ZmZlci5sZW5ndGg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmb3IgKGogPSAwLCBqbCA9IGZpbGUuYnVmZmVyLmxlbmd0aDsgaiA8IGpsOyArK2opIHtcclxuICAgICAgICBvdXRwdXRbb3AxKytdID0gZmlsZS5idWZmZXJbal07XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gIC8vIGVuZCBvZiBjZW50cmFsIGRpcmVjdG9yeVxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvLyBzaWduYXR1cmVcclxuICBvdXRwdXRbb3AzKytdID0gWmxpYi5aaXAuQ2VudHJhbERpcmVjdG9yeVNpZ25hdHVyZVswXTtcclxuICBvdXRwdXRbb3AzKytdID0gWmxpYi5aaXAuQ2VudHJhbERpcmVjdG9yeVNpZ25hdHVyZVsxXTtcclxuICBvdXRwdXRbb3AzKytdID0gWmxpYi5aaXAuQ2VudHJhbERpcmVjdG9yeVNpZ25hdHVyZVsyXTtcclxuICBvdXRwdXRbb3AzKytdID0gWmxpYi5aaXAuQ2VudHJhbERpcmVjdG9yeVNpZ25hdHVyZVszXTtcclxuXHJcbiAgLy8gbnVtYmVyIG9mIHRoaXMgZGlza1xyXG4gIG91dHB1dFtvcDMrK10gPSAwO1xyXG4gIG91dHB1dFtvcDMrK10gPSAwO1xyXG5cclxuICAvLyBudW1iZXIgb2YgdGhlIGRpc2sgd2l0aCB0aGUgc3RhcnQgb2YgdGhlIGNlbnRyYWwgZGlyZWN0b3J5XHJcbiAgb3V0cHV0W29wMysrXSA9IDA7XHJcbiAgb3V0cHV0W29wMysrXSA9IDA7XHJcblxyXG4gIC8vIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzIGluIHRoZSBjZW50cmFsIGRpcmVjdG9yeSBvbiB0aGlzIGRpc2tcclxuICBvdXRwdXRbb3AzKytdID0gIGlsICAgICAgICYgMHhmZjtcclxuICBvdXRwdXRbb3AzKytdID0gKGlsID4+IDgpICYgMHhmZjtcclxuXHJcbiAgLy8gdG90YWwgbnVtYmVyIG9mIGVudHJpZXMgaW4gdGhlIGNlbnRyYWwgZGlyZWN0b3J5XHJcbiAgb3V0cHV0W29wMysrXSA9ICBpbCAgICAgICAmIDB4ZmY7XHJcbiAgb3V0cHV0W29wMysrXSA9IChpbCA+PiA4KSAmIDB4ZmY7XHJcblxyXG4gIC8vIHNpemUgb2YgdGhlIGNlbnRyYWwgZGlyZWN0b3J5XHJcbiAgb3V0cHV0W29wMysrXSA9ICBjZW50cmFsRGlyZWN0b3J5U2l6ZSAgICAgICAgJiAweGZmO1xyXG4gIG91dHB1dFtvcDMrK10gPSAoY2VudHJhbERpcmVjdG9yeVNpemUgPj4gIDgpICYgMHhmZjtcclxuICBvdXRwdXRbb3AzKytdID0gKGNlbnRyYWxEaXJlY3RvcnlTaXplID4+IDE2KSAmIDB4ZmY7XHJcbiAgb3V0cHV0W29wMysrXSA9IChjZW50cmFsRGlyZWN0b3J5U2l6ZSA+PiAyNCkgJiAweGZmO1xyXG5cclxuICAvLyBvZmZzZXQgb2Ygc3RhcnQgb2YgY2VudHJhbCBkaXJlY3Rvcnkgd2l0aCByZXNwZWN0IHRvIHRoZSBzdGFydGluZyBkaXNrIG51bWJlclxyXG4gIG91dHB1dFtvcDMrK10gPSAgbG9jYWxGaWxlU2l6ZSAgICAgICAgJiAweGZmO1xyXG4gIG91dHB1dFtvcDMrK10gPSAobG9jYWxGaWxlU2l6ZSA+PiAgOCkgJiAweGZmO1xyXG4gIG91dHB1dFtvcDMrK10gPSAobG9jYWxGaWxlU2l6ZSA+PiAxNikgJiAweGZmO1xyXG4gIG91dHB1dFtvcDMrK10gPSAobG9jYWxGaWxlU2l6ZSA+PiAyNCkgJiAweGZmO1xyXG5cclxuICAvLyAuWklQIGZpbGUgY29tbWVudCBsZW5ndGhcclxuICBjb21tZW50TGVuZ3RoID0gdGhpcy5jb21tZW50ID8gdGhpcy5jb21tZW50Lmxlbmd0aCA6IDA7XHJcbiAgb3V0cHV0W29wMysrXSA9ICBjb21tZW50TGVuZ3RoICAgICAgICYgMHhmZjtcclxuICBvdXRwdXRbb3AzKytdID0gKGNvbW1lbnRMZW5ndGggPj4gOCkgJiAweGZmO1xyXG5cclxuICAvLyAuWklQIGZpbGUgY29tbWVudFxyXG4gIGlmICh0aGlzLmNvbW1lbnQpIHtcclxuICAgIGlmIChVU0VfVFlQRURBUlJBWSkge1xyXG4gICAgICBvdXRwdXQuc2V0KHRoaXMuY29tbWVudCwgb3AzKTtcclxuICAgICAgb3AzICs9IGNvbW1lbnRMZW5ndGg7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmb3IgKGogPSAwLCBqbCA9IGNvbW1lbnRMZW5ndGg7IGogPCBqbDsgKytqKSB7XHJcbiAgICAgICAgb3V0cHV0W29wMysrXSA9IHRoaXMuY29tbWVudFtqXTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG91dHB1dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGlucHV0XHJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3BhcmFtcyBvcHRpb25zLlxyXG4gKiBAcmV0dXJuIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfVxyXG4gKi9cclxuWmxpYi5aaXAucHJvdG90eXBlLmRlZmxhdGVXaXRoT3B0aW9uID0gZnVuY3Rpb24oaW5wdXQsIG9wdF9wYXJhbXMpIHtcclxuICAvKiogQHR5cGUge1psaWIuUmF3RGVmbGF0ZX0gKi9cclxuICB2YXIgZGVmbGF0b3IgPSBuZXcgWmxpYi5SYXdEZWZsYXRlKGlucHV0LCBvcHRfcGFyYW1zWydkZWZsYXRlT3B0aW9uJ10pO1xyXG5cclxuICByZXR1cm4gZGVmbGF0b3IuY29tcHJlc3MoKTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyhBcnJheS48bnVtYmVyPnxVaW50MzJBcnJheSl9IGtleVxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xyXG5abGliLlppcC5wcm90b3R5cGUuZ2V0Qnl0ZSA9IGZ1bmN0aW9uKGtleSkge1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciB0bXAgPSAoKGtleVsyXSAmIDB4ZmZmZikgfCAyKTtcclxuXHJcbiAgcmV0dXJuICgodG1wICogKHRtcCBeIDEpKSA+PiA4KSAmIDB4ZmY7XHJcbn07XHJcblxyXG4vKipcclxuICogQHBhcmFtIHsoQXJyYXkuPG51bWJlcj58VWludDMyQXJyYXl8T2JqZWN0KX0ga2V5XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBuXHJcbiAqIEByZXR1cm4ge251bWJlcn1cclxuICovXHJcblpsaWIuWmlwLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbihrZXksIG4pIHtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgdG1wID0gdGhpcy5nZXRCeXRlKC8qKiBAdHlwZSB7KEFycmF5LjxudW1iZXI+fFVpbnQzMkFycmF5KX0gKi8oa2V5KSk7XHJcblxyXG4gIHRoaXMudXBkYXRlS2V5cygvKiogQHR5cGUgeyhBcnJheS48bnVtYmVyPnxVaW50MzJBcnJheSl9ICovKGtleSksIG4pO1xyXG5cclxuICByZXR1cm4gdG1wIF4gbjtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyhBcnJheS48bnVtYmVyPnxVaW50MzJBcnJheSl9IGtleVxyXG4gKiBAcGFyYW0ge251bWJlcn0gblxyXG4gKi9cclxuWmxpYi5aaXAucHJvdG90eXBlLnVwZGF0ZUtleXMgPSBmdW5jdGlvbihrZXksIG4pIHtcclxuICBrZXlbMF0gPSBabGliLkNSQzMyLnNpbmdsZShrZXlbMF0sIG4pO1xyXG4gIGtleVsxXSA9XHJcbiAgICAoKCgoKGtleVsxXSArIChrZXlbMF0gJiAweGZmKSkgKiAyMDE3MyA+Pj4gMCkgKiA2NjgxKSA+Pj4gMCkgKyAxKSA+Pj4gMDtcclxuICBrZXlbMl0gPSBabGliLkNSQzMyLnNpbmdsZShrZXlbMl0sIGtleVsxXSA+Pj4gMjQpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7KEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBwYXNzd29yZFxyXG4gKiBAcmV0dXJuIHshKEFycmF5LjxudW1iZXI+fFVpbnQzMkFycmF5fE9iamVjdCl9XHJcbiAqL1xyXG5abGliLlppcC5wcm90b3R5cGUuY3JlYXRlRW5jcnlwdGlvbktleSA9IGZ1bmN0aW9uKHBhc3N3b3JkKSB7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQzMkFycmF5KX0gKi9cclxuICB2YXIga2V5ID0gWzMwNTQxOTg5NiwgNTkxNzUxMDQ5LCA4NzgwODIxOTJdO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBpO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBpbDtcclxuXHJcbiAgaWYgKFVTRV9UWVBFREFSUkFZKSB7XHJcbiAgICBrZXkgPSBuZXcgVWludDMyQXJyYXkoa2V5KTtcclxuICB9XHJcblxyXG4gIGZvciAoaSA9IDAsIGlsID0gcGFzc3dvcmQubGVuZ3RoOyBpIDwgaWw7ICsraSkge1xyXG4gICAgdGhpcy51cGRhdGVLZXlzKGtleSwgcGFzc3dvcmRbaV0gJiAweGZmKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBrZXk7XHJcbn07XHJcblxyXG59KTsiLCJnb29nLnByb3ZpZGUoJ1psaWIuVW56aXAnKTtcclxuXHJcbmdvb2cucmVxdWlyZSgnVVNFX1RZUEVEQVJSQVknKTtcclxuZ29vZy5yZXF1aXJlKCdGaXhQaGFudG9tSlNGdW5jdGlvbkFwcGx5QnVnX1N0cmluZ0Zyb21DaGFyQ29kZScpO1xyXG5nb29nLnJlcXVpcmUoJ1psaWIuUmF3SW5mbGF0ZScpO1xyXG5nb29nLnJlcXVpcmUoJ1psaWIuQ1JDMzInKTtcclxuZ29vZy5yZXF1aXJlKCdabGliLlppcCcpO1xyXG5cclxuZ29vZy5zY29wZShmdW5jdGlvbigpIHtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGlucHV0IGlucHV0IGJ1ZmZlci5cclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfcGFyYW1zIG9wdGlvbnMuXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuWmxpYi5VbnppcCA9IGZ1bmN0aW9uKGlucHV0LCBvcHRfcGFyYW1zKSB7XHJcbiAgb3B0X3BhcmFtcyA9IG9wdF9wYXJhbXMgfHwge307XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHRoaXMuaW5wdXQgPVxyXG4gICAgKFVTRV9UWVBFREFSUkFZICYmIChpbnB1dCBpbnN0YW5jZW9mIEFycmF5KSkgP1xyXG4gICAgbmV3IFVpbnQ4QXJyYXkoaW5wdXQpIDogaW5wdXQ7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5pcCA9IDA7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5lb2Nkck9mZnNldDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLm51bWJlck9mVGhpc0Rpc2s7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5zdGFydERpc2s7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy50b3RhbEVudHJpZXNUaGlzRGlzaztcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLnRvdGFsRW50cmllcztcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLmNlbnRyYWxEaXJlY3RvcnlTaXplO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMuY2VudHJhbERpcmVjdG9yeU9mZnNldDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLmNvbW1lbnRMZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHsoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdGhpcy5jb21tZW50O1xyXG4gIC8qKiBAdHlwZSB7QXJyYXkuPFpsaWIuVW56aXAuRmlsZUhlYWRlcj59ICovXHJcbiAgdGhpcy5maWxlSGVhZGVyTGlzdDtcclxuICAvKiogQHR5cGUge09iamVjdC48c3RyaW5nLCBudW1iZXI+fSAqL1xyXG4gIHRoaXMuZmlsZW5hbWVUb0luZGV4O1xyXG4gIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cclxuICB0aGlzLnZlcmlmeSA9IG9wdF9wYXJhbXNbJ3ZlcmlmeSddIHx8IGZhbHNlO1xyXG4gIC8qKiBAdHlwZSB7KEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHRoaXMucGFzc3dvcmQgPSBvcHRfcGFyYW1zWydwYXNzd29yZCddO1xyXG59O1xyXG5cclxuWmxpYi5VbnppcC5Db21wcmVzc2lvbk1ldGhvZCA9IFpsaWIuWmlwLkNvbXByZXNzaW9uTWV0aG9kO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5abGliLlVuemlwLkZpbGVIZWFkZXJTaWduYXR1cmUgPSBabGliLlppcC5GaWxlSGVhZGVyU2lnbmF0dXJlO1xyXG5cclxuLyoqXHJcbiAqIEB0eXBlIHtBcnJheS48bnVtYmVyPn1cclxuICogQGNvbnN0XHJcbiAqL1xyXG5abGliLlVuemlwLkxvY2FsRmlsZUhlYWRlclNpZ25hdHVyZSA9IFpsaWIuWmlwLkxvY2FsRmlsZUhlYWRlclNpZ25hdHVyZTtcclxuXHJcbi8qKlxyXG4gKiBAdHlwZSB7QXJyYXkuPG51bWJlcj59XHJcbiAqIEBjb25zdFxyXG4gKi9cclxuWmxpYi5VbnppcC5DZW50cmFsRGlyZWN0b3J5U2lnbmF0dXJlID0gWmxpYi5aaXAuQ2VudHJhbERpcmVjdG9yeVNpZ25hdHVyZTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGlucHV0IGlucHV0IGJ1ZmZlci5cclxuICogQHBhcmFtIHtudW1iZXJ9IGlwIGlucHV0IHBvc2l0aW9uLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcblpsaWIuVW56aXAuRmlsZUhlYWRlciA9IGZ1bmN0aW9uKGlucHV0LCBpcCkge1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0gKi9cclxuICB0aGlzLmlucHV0ID0gaW5wdXQ7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5vZmZzZXQgPSBpcDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLmxlbmd0aDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLnZlcnNpb247XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5vcztcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLm5lZWRWZXJzaW9uO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMuZmxhZ3M7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5jb21wcmVzc2lvbjtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLnRpbWU7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5kYXRlO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMuY3JjMzI7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5jb21wcmVzc2VkU2l6ZTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLnBsYWluU2l6ZTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLmZpbGVOYW1lTGVuZ3RoO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMuZXh0cmFGaWVsZExlbmd0aDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLmZpbGVDb21tZW50TGVuZ3RoO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMuZGlza051bWJlclN0YXJ0O1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMuaW50ZXJuYWxGaWxlQXR0cmlidXRlcztcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXM7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5yZWxhdGl2ZU9mZnNldDtcclxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cclxuICB0aGlzLmZpbGVuYW1lO1xyXG4gIC8qKiBAdHlwZSB7IShBcnJheS48bnVtYmVyPnxVaW50OEFycmF5KX0gKi9cclxuICB0aGlzLmV4dHJhRmllbGQ7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHRoaXMuY29tbWVudDtcclxufTtcclxuXHJcblpsaWIuVW56aXAuRmlsZUhlYWRlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbigpIHtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdmFyIGlucHV0ID0gdGhpcy5pbnB1dDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaXAgPSB0aGlzLm9mZnNldDtcclxuXHJcbiAgLy8gY2VudHJhbCBmaWxlIGhlYWRlciBzaWduYXR1cmVcclxuICBpZiAoaW5wdXRbaXArK10gIT09IFpsaWIuVW56aXAuRmlsZUhlYWRlclNpZ25hdHVyZVswXSB8fFxyXG4gICAgICBpbnB1dFtpcCsrXSAhPT0gWmxpYi5VbnppcC5GaWxlSGVhZGVyU2lnbmF0dXJlWzFdIHx8XHJcbiAgICAgIGlucHV0W2lwKytdICE9PSBabGliLlVuemlwLkZpbGVIZWFkZXJTaWduYXR1cmVbMl0gfHxcclxuICAgICAgaW5wdXRbaXArK10gIT09IFpsaWIuVW56aXAuRmlsZUhlYWRlclNpZ25hdHVyZVszXSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGZpbGUgaGVhZGVyIHNpZ25hdHVyZScpO1xyXG4gIH1cclxuXHJcbiAgLy8gdmVyc2lvbiBtYWRlIGJ5XHJcbiAgdGhpcy52ZXJzaW9uID0gaW5wdXRbaXArK107XHJcbiAgdGhpcy5vcyA9IGlucHV0W2lwKytdO1xyXG5cclxuICAvLyB2ZXJzaW9uIG5lZWRlZCB0byBleHRyYWN0XHJcbiAgdGhpcy5uZWVkVmVyc2lvbiA9IGlucHV0W2lwKytdIHwgKGlucHV0W2lwKytdIDw8IDgpO1xyXG5cclxuICAvLyBnZW5lcmFsIHB1cnBvc2UgYml0IGZsYWdcclxuICB0aGlzLmZsYWdzID0gaW5wdXRbaXArK10gfCAoaW5wdXRbaXArK10gPDwgOCk7XHJcblxyXG4gIC8vIGNvbXByZXNzaW9uIG1ldGhvZFxyXG4gIHRoaXMuY29tcHJlc3Npb24gPSBpbnB1dFtpcCsrXSB8IChpbnB1dFtpcCsrXSA8PCA4KTtcclxuXHJcbiAgLy8gbGFzdCBtb2QgZmlsZSB0aW1lXHJcbiAgdGhpcy50aW1lID0gaW5wdXRbaXArK10gfCAoaW5wdXRbaXArK10gPDwgOCk7XHJcblxyXG4gIC8vbGFzdCBtb2QgZmlsZSBkYXRlXHJcbiAgdGhpcy5kYXRlID0gaW5wdXRbaXArK10gfCAoaW5wdXRbaXArK10gPDwgOCk7XHJcblxyXG4gIC8vIGNyYy0zMlxyXG4gIHRoaXMuY3JjMzIgPSAoXHJcbiAgICAoaW5wdXRbaXArK10gICAgICApIHwgKGlucHV0W2lwKytdIDw8ICA4KSB8XHJcbiAgICAoaW5wdXRbaXArK10gPDwgMTYpIHwgKGlucHV0W2lwKytdIDw8IDI0KVxyXG4gICkgPj4+IDA7XHJcblxyXG4gIC8vIGNvbXByZXNzZWQgc2l6ZVxyXG4gIHRoaXMuY29tcHJlc3NlZFNpemUgPSAoXHJcbiAgICAoaW5wdXRbaXArK10gICAgICApIHwgKGlucHV0W2lwKytdIDw8ICA4KSB8XHJcbiAgICAoaW5wdXRbaXArK10gPDwgMTYpIHwgKGlucHV0W2lwKytdIDw8IDI0KVxyXG4gICkgPj4+IDA7XHJcblxyXG4gIC8vIHVuY29tcHJlc3NlZCBzaXplXHJcbiAgdGhpcy5wbGFpblNpemUgPSAoXHJcbiAgICAoaW5wdXRbaXArK10gICAgICApIHwgKGlucHV0W2lwKytdIDw8ICA4KSB8XHJcbiAgICAoaW5wdXRbaXArK10gPDwgMTYpIHwgKGlucHV0W2lwKytdIDw8IDI0KVxyXG4gICkgPj4+IDA7XHJcblxyXG4gIC8vIGZpbGUgbmFtZSBsZW5ndGhcclxuICB0aGlzLmZpbGVOYW1lTGVuZ3RoID0gaW5wdXRbaXArK10gfCAoaW5wdXRbaXArK10gPDwgOCk7XHJcblxyXG4gIC8vIGV4dHJhIGZpZWxkIGxlbmd0aFxyXG4gIHRoaXMuZXh0cmFGaWVsZExlbmd0aCA9IGlucHV0W2lwKytdIHwgKGlucHV0W2lwKytdIDw8IDgpO1xyXG5cclxuICAvLyBmaWxlIGNvbW1lbnQgbGVuZ3RoXHJcbiAgdGhpcy5maWxlQ29tbWVudExlbmd0aCA9IGlucHV0W2lwKytdIHwgKGlucHV0W2lwKytdIDw8IDgpO1xyXG5cclxuICAvLyBkaXNrIG51bWJlciBzdGFydFxyXG4gIHRoaXMuZGlza051bWJlclN0YXJ0ID0gaW5wdXRbaXArK10gfCAoaW5wdXRbaXArK10gPDwgOCk7XHJcblxyXG4gIC8vIGludGVybmFsIGZpbGUgYXR0cmlidXRlc1xyXG4gIHRoaXMuaW50ZXJuYWxGaWxlQXR0cmlidXRlcyA9IGlucHV0W2lwKytdIHwgKGlucHV0W2lwKytdIDw8IDgpO1xyXG5cclxuICAvLyBleHRlcm5hbCBmaWxlIGF0dHJpYnV0ZXNcclxuICB0aGlzLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXMgPVxyXG4gICAgKGlucHV0W2lwKytdICAgICAgKSB8IChpbnB1dFtpcCsrXSA8PCAgOCkgfFxyXG4gICAgKGlucHV0W2lwKytdIDw8IDE2KSB8IChpbnB1dFtpcCsrXSA8PCAyNCk7XHJcblxyXG4gIC8vIHJlbGF0aXZlIG9mZnNldCBvZiBsb2NhbCBoZWFkZXJcclxuICB0aGlzLnJlbGF0aXZlT2Zmc2V0ID0gKFxyXG4gICAgKGlucHV0W2lwKytdICAgICAgKSB8IChpbnB1dFtpcCsrXSA8PCAgOCkgfFxyXG4gICAgKGlucHV0W2lwKytdIDw8IDE2KSB8IChpbnB1dFtpcCsrXSA8PCAyNClcclxuICApID4+PiAwO1xyXG5cclxuICAvLyBmaWxlIG5hbWVcclxuICB0aGlzLmZpbGVuYW1lID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBVU0VfVFlQRURBUlJBWSA/XHJcbiAgICBpbnB1dC5zdWJhcnJheShpcCwgaXAgKz0gdGhpcy5maWxlTmFtZUxlbmd0aCkgOlxyXG4gICAgaW5wdXQuc2xpY2UoaXAsIGlwICs9IHRoaXMuZmlsZU5hbWVMZW5ndGgpXHJcbiAgKTtcclxuXHJcbiAgLy8gZXh0cmEgZmllbGRcclxuICB0aGlzLmV4dHJhRmllbGQgPSBVU0VfVFlQRURBUlJBWSA/XHJcbiAgICBpbnB1dC5zdWJhcnJheShpcCwgaXAgKz0gdGhpcy5leHRyYUZpZWxkTGVuZ3RoKSA6XHJcbiAgICBpbnB1dC5zbGljZShpcCwgaXAgKz0gdGhpcy5leHRyYUZpZWxkTGVuZ3RoKTtcclxuXHJcbiAgLy8gZmlsZSBjb21tZW50XHJcbiAgdGhpcy5jb21tZW50ID0gVVNFX1RZUEVEQVJSQVkgP1xyXG4gICAgaW5wdXQuc3ViYXJyYXkoaXAsIGlwICsgdGhpcy5maWxlQ29tbWVudExlbmd0aCkgOlxyXG4gICAgaW5wdXQuc2xpY2UoaXAsIGlwICsgdGhpcy5maWxlQ29tbWVudExlbmd0aCk7XHJcblxyXG4gIHRoaXMubGVuZ3RoID0gaXAgLSB0aGlzLm9mZnNldDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGlucHV0IGlucHV0IGJ1ZmZlci5cclxuICogQHBhcmFtIHtudW1iZXJ9IGlwIGlucHV0IHBvc2l0aW9uLlxyXG4gKiBAY29uc3RydWN0b3JcclxuICovXHJcblpsaWIuVW56aXAuTG9jYWxGaWxlSGVhZGVyID0gZnVuY3Rpb24oaW5wdXQsIGlwKSB7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHRoaXMuaW5wdXQgPSBpbnB1dDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLm9mZnNldCA9IGlwO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMubGVuZ3RoO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMubmVlZFZlcnNpb247XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5mbGFncztcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLmNvbXByZXNzaW9uO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMudGltZTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLmRhdGU7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5jcmMzMjtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB0aGlzLmNvbXByZXNzZWRTaXplO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMucGxhaW5TaXplO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHRoaXMuZmlsZU5hbWVMZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdGhpcy5leHRyYUZpZWxkTGVuZ3RoO1xyXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xyXG4gIHRoaXMuZmlsZW5hbWU7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHRoaXMuZXh0cmFGaWVsZDtcclxufTtcclxuXHJcblpsaWIuVW56aXAuTG9jYWxGaWxlSGVhZGVyLkZsYWdzID0gWmxpYi5aaXAuRmxhZ3M7XHJcblxyXG5abGliLlVuemlwLkxvY2FsRmlsZUhlYWRlci5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbigpIHtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdmFyIGlucHV0ID0gdGhpcy5pbnB1dDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaXAgPSB0aGlzLm9mZnNldDtcclxuXHJcbiAgLy8gbG9jYWwgZmlsZSBoZWFkZXIgc2lnbmF0dXJlXHJcbiAgaWYgKGlucHV0W2lwKytdICE9PSBabGliLlVuemlwLkxvY2FsRmlsZUhlYWRlclNpZ25hdHVyZVswXSB8fFxyXG4gICAgICBpbnB1dFtpcCsrXSAhPT0gWmxpYi5VbnppcC5Mb2NhbEZpbGVIZWFkZXJTaWduYXR1cmVbMV0gfHxcclxuICAgICAgaW5wdXRbaXArK10gIT09IFpsaWIuVW56aXAuTG9jYWxGaWxlSGVhZGVyU2lnbmF0dXJlWzJdIHx8XHJcbiAgICAgIGlucHV0W2lwKytdICE9PSBabGliLlVuemlwLkxvY2FsRmlsZUhlYWRlclNpZ25hdHVyZVszXSkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGxvY2FsIGZpbGUgaGVhZGVyIHNpZ25hdHVyZScpO1xyXG4gIH1cclxuXHJcbiAgLy8gdmVyc2lvbiBuZWVkZWQgdG8gZXh0cmFjdFxyXG4gIHRoaXMubmVlZFZlcnNpb24gPSBpbnB1dFtpcCsrXSB8IChpbnB1dFtpcCsrXSA8PCA4KTtcclxuXHJcbiAgLy8gZ2VuZXJhbCBwdXJwb3NlIGJpdCBmbGFnXHJcbiAgdGhpcy5mbGFncyA9IGlucHV0W2lwKytdIHwgKGlucHV0W2lwKytdIDw8IDgpO1xyXG5cclxuICAvLyBjb21wcmVzc2lvbiBtZXRob2RcclxuICB0aGlzLmNvbXByZXNzaW9uID0gaW5wdXRbaXArK10gfCAoaW5wdXRbaXArK10gPDwgOCk7XHJcblxyXG4gIC8vIGxhc3QgbW9kIGZpbGUgdGltZVxyXG4gIHRoaXMudGltZSA9IGlucHV0W2lwKytdIHwgKGlucHV0W2lwKytdIDw8IDgpO1xyXG5cclxuICAvL2xhc3QgbW9kIGZpbGUgZGF0ZVxyXG4gIHRoaXMuZGF0ZSA9IGlucHV0W2lwKytdIHwgKGlucHV0W2lwKytdIDw8IDgpO1xyXG5cclxuICAvLyBjcmMtMzJcclxuICB0aGlzLmNyYzMyID0gKFxyXG4gICAgKGlucHV0W2lwKytdICAgICAgKSB8IChpbnB1dFtpcCsrXSA8PCAgOCkgfFxyXG4gICAgKGlucHV0W2lwKytdIDw8IDE2KSB8IChpbnB1dFtpcCsrXSA8PCAyNClcclxuICApID4+PiAwO1xyXG5cclxuICAvLyBjb21wcmVzc2VkIHNpemVcclxuICB0aGlzLmNvbXByZXNzZWRTaXplID0gKFxyXG4gICAgKGlucHV0W2lwKytdICAgICAgKSB8IChpbnB1dFtpcCsrXSA8PCAgOCkgfFxyXG4gICAgKGlucHV0W2lwKytdIDw8IDE2KSB8IChpbnB1dFtpcCsrXSA8PCAyNClcclxuICApID4+PiAwO1xyXG5cclxuICAvLyB1bmNvbXByZXNzZWQgc2l6ZVxyXG4gIHRoaXMucGxhaW5TaXplID0gKFxyXG4gICAgKGlucHV0W2lwKytdICAgICAgKSB8IChpbnB1dFtpcCsrXSA8PCAgOCkgfFxyXG4gICAgKGlucHV0W2lwKytdIDw8IDE2KSB8IChpbnB1dFtpcCsrXSA8PCAyNClcclxuICApID4+PiAwO1xyXG5cclxuICAvLyBmaWxlIG5hbWUgbGVuZ3RoXHJcbiAgdGhpcy5maWxlTmFtZUxlbmd0aCA9IGlucHV0W2lwKytdIHwgKGlucHV0W2lwKytdIDw8IDgpO1xyXG5cclxuICAvLyBleHRyYSBmaWVsZCBsZW5ndGhcclxuICB0aGlzLmV4dHJhRmllbGRMZW5ndGggPSBpbnB1dFtpcCsrXSB8IChpbnB1dFtpcCsrXSA8PCA4KTtcclxuXHJcbiAgLy8gZmlsZSBuYW1lXHJcbiAgdGhpcy5maWxlbmFtZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgVVNFX1RZUEVEQVJSQVkgP1xyXG4gICAgaW5wdXQuc3ViYXJyYXkoaXAsIGlwICs9IHRoaXMuZmlsZU5hbWVMZW5ndGgpIDpcclxuICAgIGlucHV0LnNsaWNlKGlwLCBpcCArPSB0aGlzLmZpbGVOYW1lTGVuZ3RoKVxyXG4gICk7XHJcblxyXG4gIC8vIGV4dHJhIGZpZWxkXHJcbiAgdGhpcy5leHRyYUZpZWxkID0gVVNFX1RZUEVEQVJSQVkgP1xyXG4gICAgaW5wdXQuc3ViYXJyYXkoaXAsIGlwICs9IHRoaXMuZXh0cmFGaWVsZExlbmd0aCkgOlxyXG4gICAgaW5wdXQuc2xpY2UoaXAsIGlwICs9IHRoaXMuZXh0cmFGaWVsZExlbmd0aCk7XHJcblxyXG4gIHRoaXMubGVuZ3RoID0gaXAgLSB0aGlzLm9mZnNldDtcclxufTtcclxuXHJcblxyXG5abGliLlVuemlwLnByb3RvdHlwZS5zZWFyY2hFbmRPZkNlbnRyYWxEaXJlY3RvcnlSZWNvcmQgPSBmdW5jdGlvbigpIHtcclxuICAvKiogQHR5cGUgeyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9ICovXHJcbiAgdmFyIGlucHV0ID0gdGhpcy5pbnB1dDtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaXA7XHJcblxyXG4gIGZvciAoaXAgPSBpbnB1dC5sZW5ndGggLSAxMjsgaXAgPiAwOyAtLWlwKSB7XHJcbiAgICBpZiAoaW5wdXRbaXAgIF0gPT09IFpsaWIuVW56aXAuQ2VudHJhbERpcmVjdG9yeVNpZ25hdHVyZVswXSAmJlxyXG4gICAgICAgIGlucHV0W2lwKzFdID09PSBabGliLlVuemlwLkNlbnRyYWxEaXJlY3RvcnlTaWduYXR1cmVbMV0gJiZcclxuICAgICAgICBpbnB1dFtpcCsyXSA9PT0gWmxpYi5VbnppcC5DZW50cmFsRGlyZWN0b3J5U2lnbmF0dXJlWzJdICYmXHJcbiAgICAgICAgaW5wdXRbaXArM10gPT09IFpsaWIuVW56aXAuQ2VudHJhbERpcmVjdG9yeVNpZ25hdHVyZVszXSkge1xyXG4gICAgICB0aGlzLmVvY2RyT2Zmc2V0ID0gaXA7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRocm93IG5ldyBFcnJvcignRW5kIG9mIENlbnRyYWwgRGlyZWN0b3J5IFJlY29yZCBub3QgZm91bmQnKTtcclxufTtcclxuXHJcblpsaWIuVW56aXAucHJvdG90eXBlLnBhcnNlRW5kT2ZDZW50cmFsRGlyZWN0b3J5UmVjb3JkID0gZnVuY3Rpb24oKSB7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHZhciBpbnB1dCA9IHRoaXMuaW5wdXQ7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGlwO1xyXG5cclxuICBpZiAoIXRoaXMuZW9jZHJPZmZzZXQpIHtcclxuICAgIHRoaXMuc2VhcmNoRW5kT2ZDZW50cmFsRGlyZWN0b3J5UmVjb3JkKCk7XHJcbiAgfVxyXG4gIGlwID0gdGhpcy5lb2Nkck9mZnNldDtcclxuXHJcbiAgLy8gc2lnbmF0dXJlXHJcbiAgaWYgKGlucHV0W2lwKytdICE9PSBabGliLlVuemlwLkNlbnRyYWxEaXJlY3RvcnlTaWduYXR1cmVbMF0gfHxcclxuICAgICAgaW5wdXRbaXArK10gIT09IFpsaWIuVW56aXAuQ2VudHJhbERpcmVjdG9yeVNpZ25hdHVyZVsxXSB8fFxyXG4gICAgICBpbnB1dFtpcCsrXSAhPT0gWmxpYi5VbnppcC5DZW50cmFsRGlyZWN0b3J5U2lnbmF0dXJlWzJdIHx8XHJcbiAgICAgIGlucHV0W2lwKytdICE9PSBabGliLlVuemlwLkNlbnRyYWxEaXJlY3RvcnlTaWduYXR1cmVbM10pIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBzaWduYXR1cmUnKTtcclxuICB9XHJcblxyXG4gIC8vIG51bWJlciBvZiB0aGlzIGRpc2tcclxuICB0aGlzLm51bWJlck9mVGhpc0Rpc2sgPSBpbnB1dFtpcCsrXSB8IChpbnB1dFtpcCsrXSA8PCA4KTtcclxuXHJcbiAgLy8gbnVtYmVyIG9mIHRoZSBkaXNrIHdpdGggdGhlIHN0YXJ0IG9mIHRoZSBjZW50cmFsIGRpcmVjdG9yeVxyXG4gIHRoaXMuc3RhcnREaXNrID0gaW5wdXRbaXArK10gfCAoaW5wdXRbaXArK10gPDwgOCk7XHJcblxyXG4gIC8vIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzIGluIHRoZSBjZW50cmFsIGRpcmVjdG9yeSBvbiB0aGlzIGRpc2tcclxuICB0aGlzLnRvdGFsRW50cmllc1RoaXNEaXNrID0gaW5wdXRbaXArK10gfCAoaW5wdXRbaXArK10gPDwgOCk7XHJcblxyXG4gIC8vIHRvdGFsIG51bWJlciBvZiBlbnRyaWVzIGluIHRoZSBjZW50cmFsIGRpcmVjdG9yeVxyXG4gIHRoaXMudG90YWxFbnRyaWVzID0gaW5wdXRbaXArK10gfCAoaW5wdXRbaXArK10gPDwgOCk7XHJcblxyXG4gIC8vIHNpemUgb2YgdGhlIGNlbnRyYWwgZGlyZWN0b3J5XHJcbiAgdGhpcy5jZW50cmFsRGlyZWN0b3J5U2l6ZSA9IChcclxuICAgIChpbnB1dFtpcCsrXSAgICAgICkgfCAoaW5wdXRbaXArK10gPDwgIDgpIHxcclxuICAgIChpbnB1dFtpcCsrXSA8PCAxNikgfCAoaW5wdXRbaXArK10gPDwgMjQpXHJcbiAgKSA+Pj4gMDtcclxuXHJcbiAgLy8gb2Zmc2V0IG9mIHN0YXJ0IG9mIGNlbnRyYWwgZGlyZWN0b3J5IHdpdGggcmVzcGVjdCB0byB0aGUgc3RhcnRpbmcgZGlzayBudW1iZXJcclxuICB0aGlzLmNlbnRyYWxEaXJlY3RvcnlPZmZzZXQgPSAoXHJcbiAgICAoaW5wdXRbaXArK10gICAgICApIHwgKGlucHV0W2lwKytdIDw8ICA4KSB8XHJcbiAgICAoaW5wdXRbaXArK10gPDwgMTYpIHwgKGlucHV0W2lwKytdIDw8IDI0KVxyXG4gICkgPj4+IDA7XHJcblxyXG4gIC8vIC5aSVAgZmlsZSBjb21tZW50IGxlbmd0aFxyXG4gIHRoaXMuY29tbWVudExlbmd0aCA9IGlucHV0W2lwKytdIHwgKGlucHV0W2lwKytdIDw8IDgpO1xyXG5cclxuICAvLyAuWklQIGZpbGUgY29tbWVudFxyXG4gIHRoaXMuY29tbWVudCA9IFVTRV9UWVBFREFSUkFZID9cclxuICAgIGlucHV0LnN1YmFycmF5KGlwLCBpcCArIHRoaXMuY29tbWVudExlbmd0aCkgOlxyXG4gICAgaW5wdXQuc2xpY2UoaXAsIGlwICsgdGhpcy5jb21tZW50TGVuZ3RoKTtcclxufTtcclxuXHJcblpsaWIuVW56aXAucHJvdG90eXBlLnBhcnNlRmlsZUhlYWRlciA9IGZ1bmN0aW9uKCkge1xyXG4gIC8qKiBAdHlwZSB7QXJyYXkuPFpsaWIuVW56aXAuRmlsZUhlYWRlcj59ICovXHJcbiAgdmFyIGZpbGVsaXN0ID0gW107XHJcbiAgLyoqIEB0eXBlIHtPYmplY3QuPHN0cmluZywgbnVtYmVyPn0gKi9cclxuICB2YXIgZmlsZXRhYmxlID0ge307XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGlwO1xyXG4gIC8qKiBAdHlwZSB7WmxpYi5VbnppcC5GaWxlSGVhZGVyfSAqL1xyXG4gIHZhciBmaWxlSGVhZGVyO1xyXG4gIC8qOiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBpO1xyXG4gIC8qOiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBpbDtcclxuXHJcbiAgaWYgKHRoaXMuZmlsZUhlYWRlckxpc3QpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIGlmICh0aGlzLmNlbnRyYWxEaXJlY3RvcnlPZmZzZXQgPT09IHZvaWQgMCkge1xyXG4gICAgdGhpcy5wYXJzZUVuZE9mQ2VudHJhbERpcmVjdG9yeVJlY29yZCgpO1xyXG4gIH1cclxuICBpcCA9IHRoaXMuY2VudHJhbERpcmVjdG9yeU9mZnNldDtcclxuXHJcbiAgZm9yIChpID0gMCwgaWwgPSB0aGlzLnRvdGFsRW50cmllczsgaSA8IGlsOyArK2kpIHtcclxuICAgIGZpbGVIZWFkZXIgPSBuZXcgWmxpYi5VbnppcC5GaWxlSGVhZGVyKHRoaXMuaW5wdXQsIGlwKTtcclxuICAgIGZpbGVIZWFkZXIucGFyc2UoKTtcclxuICAgIGlwICs9IGZpbGVIZWFkZXIubGVuZ3RoO1xyXG4gICAgZmlsZWxpc3RbaV0gPSBmaWxlSGVhZGVyO1xyXG4gICAgZmlsZXRhYmxlW2ZpbGVIZWFkZXIuZmlsZW5hbWVdID0gaTtcclxuICB9XHJcblxyXG4gIGlmICh0aGlzLmNlbnRyYWxEaXJlY3RvcnlTaXplIDwgaXAgLSB0aGlzLmNlbnRyYWxEaXJlY3RvcnlPZmZzZXQpIHtcclxuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBmaWxlIGhlYWRlciBzaXplJyk7XHJcbiAgfVxyXG5cclxuICB0aGlzLmZpbGVIZWFkZXJMaXN0ID0gZmlsZWxpc3Q7XHJcbiAgdGhpcy5maWxlbmFtZVRvSW5kZXggPSBmaWxldGFibGU7XHJcbn07XHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgZmlsZSBuYW1lIHRvIGdldCBoZWFkZXJcclxuICogQHBhcmFtIHtzdHJpbmd9IGF0dHJpYnV0ZW5hbWUgemlwIGZpbGUgaGVhZGVyIGF0dHJpYnV0ZSBuYW1lXHJcbiAqIEByZXR1cm4geyEobnVtYmVyKX0gZmlsZSBoZWFkZXIgYXR0cmlidXRlIGRhdGEuXHJcbiAqL1xyXG5abGliLlVuemlwLnByb3RvdHlwZS5nZXRGaWxlSGVhZGVyQXR0cmlidXRlID0gZnVuY3Rpb24oZmlsZW5hbWUsIGF0dHJpYnV0ZW5hbWUpIHtcclxuICBcclxuICAvKiogQHR5cGUge0FycmF5LjxabGliLlVuemlwLkZpbGVIZWFkZXI+fSAqL1xyXG4gIHZhciBmaWxlSGVhZGVyTGlzdCA9IHRoaXMuZmlsZUhlYWRlckxpc3Q7XHJcbiAgLyoqIEB0eXBlIHtabGliLlVuemlwLkxvY2FsRmlsZUhlYWRlcn0gKi9cclxuICB2YXIgbG9jYWxGaWxlSGVhZGVyO1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBvZmZzZXQ7XHJcblxyXG4gIHZhciBpbmRleCA9IHRoaXMuZmlsZW5hbWVUb0luZGV4W2ZpbGVuYW1lXTtcclxuXHJcbiAgaWYgKCFmaWxlSGVhZGVyTGlzdCkge1xyXG4gICAgdGhpcy5wYXJzZUZpbGVIZWFkZXIoKTtcclxuICB9XHJcblxyXG4gIGlmIChmaWxlSGVhZGVyTGlzdFtpbmRleF0gPT09IHZvaWQgMCkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCd3cm9uZyBpbmRleCcpO1xyXG4gIH1cclxuXHJcbiAgb2Zmc2V0ID0gZmlsZUhlYWRlckxpc3RbaW5kZXhdLnJlbGF0aXZlT2Zmc2V0O1xyXG4gIGxvY2FsRmlsZUhlYWRlciA9IG5ldyBabGliLlVuemlwLkxvY2FsRmlsZUhlYWRlcih0aGlzLmlucHV0LCBvZmZzZXQpO1xyXG4gIGxvY2FsRmlsZUhlYWRlci5wYXJzZSgpO1xyXG5cclxuICBzd2l0Y2goYXR0cmlidXRlbmFtZSkge1xyXG4gICAgY2FzZSAnbmVlZFZlcnNpb24nOiBcclxuICAgIHJldHVybiBmaWxlSGVhZGVyTGlzdFtpbmRleF0ubmVlZFZlcnNpb247XHJcbiAgICBjYXNlICdmbGFncyc6XHJcbiAgICByZXR1cm4gZmlsZUhlYWRlckxpc3RbaW5kZXhdLmZsYWdzO1xyXG4gICAgY2FzZSAnY29tcHJlc3Npb24nOlxyXG4gICAgcmV0dXJuIGZpbGVIZWFkZXJMaXN0W2luZGV4XS5jb21wcmVzc2lvbjtcclxuICAgIGNhc2UgJ3RpbWUnOlxyXG4gICAgcmV0dXJuIGZpbGVIZWFkZXJMaXN0W2luZGV4XS50aW1lO1xyXG4gICAgY2FzZSAnZGF0ZSc6XHJcbiAgICByZXR1cm4gZmlsZUhlYWRlckxpc3RbaW5kZXhdLmRhdGU7XHJcbiAgICBjYXNlICdjcmMzMic6XHJcbiAgICByZXR1cm4gZmlsZUhlYWRlckxpc3RbaW5kZXhdLmNyYzMyO1xyXG4gICAgY2FzZSAnY29tcHJlc3NlZFNpemUnOlxyXG4gICAgcmV0dXJuIGZpbGVIZWFkZXJMaXN0W2luZGV4XS5jb21wcmVzc2VkU2l6ZTtcclxuICAgIGNhc2UgJ3BsYWluU2l6ZSc6XHJcbiAgICByZXR1cm4gZmlsZUhlYWRlckxpc3RbaW5kZXhdLnBsYWluU2l6ZTtcclxuICAgIGNhc2UgJ2ludGVybmFsRmlsZUF0dHJpYnV0ZXMnOlxyXG4gICAgcmV0dXJuIGZpbGVIZWFkZXJMaXN0W2luZGV4XS5pbnRlcm5hbEZpbGVBdHRyaWJ1dGVzO1xyXG4gICAgY2FzZSAnZXh0ZXJuYWxGaWxlQXR0cmlidXRlcyc6XHJcbiAgICByZXR1cm4gZmlsZUhlYWRlckxpc3RbaW5kZXhdLmV4dGVybmFsRmlsZUF0dHJpYnV0ZXM7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgcmV0dXJuIDA7XHJcbiAgfVxyXG59XHJcbi8qKlxyXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggZmlsZSBoZWFkZXIgaW5kZXguXHJcbiAqIEBwYXJhbSB7T2JqZWN0PX0gb3B0X3BhcmFtc1xyXG4gKiBAcmV0dXJuIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSBmaWxlIGRhdGEuXHJcbiAqL1xyXG5abGliLlVuemlwLnByb3RvdHlwZS5nZXRGaWxlRGF0YSA9IGZ1bmN0aW9uKGluZGV4LCBvcHRfcGFyYW1zKSB7XHJcbiAgb3B0X3BhcmFtcyA9IG9wdF9wYXJhbXMgfHwge307XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHZhciBpbnB1dCA9IHRoaXMuaW5wdXQ7XHJcbiAgLyoqIEB0eXBlIHtBcnJheS48WmxpYi5VbnppcC5GaWxlSGVhZGVyPn0gKi9cclxuICB2YXIgZmlsZUhlYWRlckxpc3QgPSB0aGlzLmZpbGVIZWFkZXJMaXN0O1xyXG4gIC8qKiBAdHlwZSB7WmxpYi5VbnppcC5Mb2NhbEZpbGVIZWFkZXJ9ICovXHJcbiAgdmFyIGxvY2FsRmlsZUhlYWRlcjtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgb2Zmc2V0O1xyXG4gIC8qKiBAdHlwZSB7bnVtYmVyfSAqL1xyXG4gIHZhciBsZW5ndGg7XHJcbiAgLyoqIEB0eXBlIHshKEFycmF5LjxudW1iZXI+fFVpbnQ4QXJyYXkpfSAqL1xyXG4gIHZhciBidWZmZXI7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGNyYzMyO1xyXG4gIC8qKiBAdHlwZSB7QXJyYXkuPG51bWJlcj58VWludDMyQXJyYXl8T2JqZWN0fSAqL1xyXG4gIHZhciBrZXk7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGk7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGlsO1xyXG5cclxuICBpZiAoIWZpbGVIZWFkZXJMaXN0KSB7XHJcbiAgICB0aGlzLnBhcnNlRmlsZUhlYWRlcigpO1xyXG4gIH1cclxuXHJcbiAgaWYgKGZpbGVIZWFkZXJMaXN0W2luZGV4XSA9PT0gdm9pZCAwKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3dyb25nIGluZGV4Jyk7XHJcbiAgfVxyXG5cclxuICBvZmZzZXQgPSBmaWxlSGVhZGVyTGlzdFtpbmRleF0ucmVsYXRpdmVPZmZzZXQ7XHJcbiAgbG9jYWxGaWxlSGVhZGVyID0gbmV3IFpsaWIuVW56aXAuTG9jYWxGaWxlSGVhZGVyKHRoaXMuaW5wdXQsIG9mZnNldCk7XHJcbiAgbG9jYWxGaWxlSGVhZGVyLnBhcnNlKCk7XHJcbiAgb2Zmc2V0ICs9IGxvY2FsRmlsZUhlYWRlci5sZW5ndGg7XHJcbiAgbGVuZ3RoID0gbG9jYWxGaWxlSGVhZGVyLmNvbXByZXNzZWRTaXplO1xyXG5cclxuICAvLyBkZWNyeXB0aW9uXHJcbiAgaWYgKChsb2NhbEZpbGVIZWFkZXIuZmxhZ3MgJiBabGliLlVuemlwLkxvY2FsRmlsZUhlYWRlci5GbGFncy5FTkNSWVBUKSAhPT0gMCkge1xyXG4gICAgaWYgKCEob3B0X3BhcmFtc1sncGFzc3dvcmQnXSB8fCB0aGlzLnBhc3N3b3JkKSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3BsZWFzZSBzZXQgcGFzc3dvcmQnKTtcclxuICAgIH1cclxuICAgIGtleSA9ICB0aGlzLmNyZWF0ZURlY3J5cHRpb25LZXkob3B0X3BhcmFtc1sncGFzc3dvcmQnXSB8fCB0aGlzLnBhc3N3b3JkKTtcclxuXHJcbiAgICAvLyBlbmNyeXB0aW9uIGhlYWRlclxyXG4gICAgZm9yKGkgPSBvZmZzZXQsIGlsID0gb2Zmc2V0ICsgMTI7IGkgPCBpbDsgKytpKSB7XHJcbiAgICAgIHRoaXMuZGVjb2RlKGtleSwgaW5wdXRbaV0pO1xyXG4gICAgfVxyXG4gICAgb2Zmc2V0ICs9IDEyO1xyXG4gICAgbGVuZ3RoIC09IDEyO1xyXG5cclxuICAgIC8vIGRlY3J5cHRpb25cclxuICAgIGZvciAoaSA9IG9mZnNldCwgaWwgPSBvZmZzZXQgKyBsZW5ndGg7IGkgPCBpbDsgKytpKSB7XHJcbiAgICAgIGlucHV0W2ldID0gdGhpcy5kZWNvZGUoa2V5LCBpbnB1dFtpXSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzd2l0Y2ggKGxvY2FsRmlsZUhlYWRlci5jb21wcmVzc2lvbikge1xyXG4gICAgY2FzZSBabGliLlVuemlwLkNvbXByZXNzaW9uTWV0aG9kLlNUT1JFOlxyXG4gICAgICBidWZmZXIgPSBVU0VfVFlQRURBUlJBWSA/XHJcbiAgICAgICAgdGhpcy5pbnB1dC5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIGxlbmd0aCkgOlxyXG4gICAgICAgIHRoaXMuaW5wdXQuc2xpY2Uob2Zmc2V0LCBvZmZzZXQgKyBsZW5ndGgpO1xyXG4gICAgICBicmVhaztcclxuICAgIGNhc2UgWmxpYi5VbnppcC5Db21wcmVzc2lvbk1ldGhvZC5ERUZMQVRFOlxyXG4gICAgICBidWZmZXIgPSBuZXcgWmxpYi5SYXdJbmZsYXRlKHRoaXMuaW5wdXQsIHtcclxuICAgICAgICAnaW5kZXgnOiBvZmZzZXQsXHJcbiAgICAgICAgJ2J1ZmZlclNpemUnOiBsb2NhbEZpbGVIZWFkZXIucGxhaW5TaXplXHJcbiAgICAgIH0pLmRlY29tcHJlc3MoKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gY29tcHJlc3Npb24gdHlwZScpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHRoaXMudmVyaWZ5KSB7XHJcbiAgICBjcmMzMiA9IFpsaWIuQ1JDMzIuY2FsYyhidWZmZXIpO1xyXG4gICAgaWYgKGxvY2FsRmlsZUhlYWRlci5jcmMzMiAhPT0gY3JjMzIpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICd3cm9uZyBjcmM6IGZpbGU9MHgnICsgbG9jYWxGaWxlSGVhZGVyLmNyYzMyLnRvU3RyaW5nKDE2KSArXHJcbiAgICAgICAgJywgZGF0YT0weCcgKyBjcmMzMi50b1N0cmluZygxNilcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiBidWZmZXI7XHJcbn07XHJcblxyXG4vKipcclxuICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59XHJcbiAqL1xyXG5abGliLlVuemlwLnByb3RvdHlwZS5nZXRGaWxlbmFtZXMgPSBmdW5jdGlvbigpIHtcclxuICAvKiogQHR5cGUge0FycmF5LjxzdHJpbmc+fSAqL1xyXG4gIHZhciBmaWxlbmFtZUxpc3QgPSBbXTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaTtcclxuICAvKiogQHR5cGUge251bWJlcn0gKi9cclxuICB2YXIgaWw7XHJcbiAgLyoqIEB0eXBlIHtBcnJheS48WmxpYi5VbnppcC5GaWxlSGVhZGVyPn0gKi9cclxuICB2YXIgZmlsZUhlYWRlckxpc3Q7XHJcblxyXG4gIGlmICghdGhpcy5maWxlSGVhZGVyTGlzdCkge1xyXG4gICAgdGhpcy5wYXJzZUZpbGVIZWFkZXIoKTtcclxuICB9XHJcbiAgZmlsZUhlYWRlckxpc3QgPSB0aGlzLmZpbGVIZWFkZXJMaXN0O1xyXG5cclxuICBmb3IgKGkgPSAwLCBpbCA9IGZpbGVIZWFkZXJMaXN0Lmxlbmd0aDsgaSA8IGlsOyArK2kpIHtcclxuICAgIGZpbGVuYW1lTGlzdFtpXSA9IGZpbGVIZWFkZXJMaXN0W2ldLmZpbGVuYW1lO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZpbGVuYW1lTGlzdDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlsZW5hbWUgZXh0cmFjdCBmaWxlbmFtZS5cclxuICogQHBhcmFtIHtPYmplY3Q9fSBvcHRfcGFyYW1zXHJcbiAqIEByZXR1cm4geyEoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IGRlY29tcHJlc3NlZCBkYXRhLlxyXG4gKi9cclxuWmxpYi5VbnppcC5wcm90b3R5cGUuZGVjb21wcmVzcyA9IGZ1bmN0aW9uKGZpbGVuYW1lLCBvcHRfcGFyYW1zKSB7XHJcbiAgLyoqIEB0eXBlIHtudW1iZXJ9ICovXHJcbiAgdmFyIGluZGV4O1xyXG5cclxuICBpZiAoIXRoaXMuZmlsZW5hbWVUb0luZGV4KSB7XHJcbiAgICB0aGlzLnBhcnNlRmlsZUhlYWRlcigpO1xyXG4gIH1cclxuICBpbmRleCA9IHRoaXMuZmlsZW5hbWVUb0luZGV4W2ZpbGVuYW1lXTtcclxuXHJcbiAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcclxuICAgIHRocm93IG5ldyBFcnJvcihmaWxlbmFtZSArICcgbm90IGZvdW5kJyk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gdGhpcy5nZXRGaWxlRGF0YShpbmRleCwgb3B0X3BhcmFtcyk7XHJcbn07XHJcblxyXG4vKipcclxuICogQHBhcmFtIHsoQXJyYXkuPG51bWJlcj58VWludDhBcnJheSl9IHBhc3N3b3JkXHJcbiAqL1xyXG5abGliLlVuemlwLnByb3RvdHlwZS5zZXRQYXNzd29yZCA9IGZ1bmN0aW9uKHBhc3N3b3JkKSB7XHJcbiAgdGhpcy5wYXNzd29yZCA9IHBhc3N3b3JkO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7KEFycmF5LjxudW1iZXI+fFVpbnQzMkFycmF5fE9iamVjdCl9IGtleVxyXG4gKiBAcGFyYW0ge251bWJlcn0gblxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9XHJcbiAqL1xyXG5abGliLlVuemlwLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbihrZXksIG4pIHtcclxuICBuIF49IHRoaXMuZ2V0Qnl0ZSgvKiogQHR5cGUgeyhBcnJheS48bnVtYmVyPnxVaW50MzJBcnJheSl9ICovKGtleSkpO1xyXG4gIHRoaXMudXBkYXRlS2V5cygvKiogQHR5cGUgeyhBcnJheS48bnVtYmVyPnxVaW50MzJBcnJheSl9ICovKGtleSksIG4pO1xyXG5cclxuICByZXR1cm4gbjtcclxufTtcclxuXHJcbi8vIGNvbW1vbiBtZXRob2RcclxuWmxpYi5VbnppcC5wcm90b3R5cGUudXBkYXRlS2V5cyA9IFpsaWIuWmlwLnByb3RvdHlwZS51cGRhdGVLZXlzO1xyXG5abGliLlVuemlwLnByb3RvdHlwZS5jcmVhdGVEZWNyeXB0aW9uS2V5ID0gWmxpYi5aaXAucHJvdG90eXBlLmNyZWF0ZUVuY3J5cHRpb25LZXk7XHJcblpsaWIuVW56aXAucHJvdG90eXBlLmdldEJ5dGUgPSBabGliLlppcC5wcm90b3R5cGUuZ2V0Qnl0ZTtcclxuXHJcbi8vIGVuZCBvZiBzY29wZVxyXG59KTtcclxuIiwiZ29vZy5yZXF1aXJlKCdabGliLlVuemlwJyk7XHJcblxyXG5nb29nLmV4cG9ydFN5bWJvbCgnWmxpYi5VbnppcCcsIFpsaWIuVW56aXApO1xyXG5nb29nLmV4cG9ydFN5bWJvbChcclxuICAnWmxpYi5VbnppcC5wcm90b3R5cGUuZGVjb21wcmVzcycsXHJcbiAgWmxpYi5VbnppcC5wcm90b3R5cGUuZGVjb21wcmVzc1xyXG4pO1xyXG5nb29nLmV4cG9ydFN5bWJvbChcclxuICAnWmxpYi5VbnppcC5wcm90b3R5cGUuZ2V0RmlsZW5hbWVzJyxcclxuICBabGliLlVuemlwLnByb3RvdHlwZS5nZXRGaWxlbmFtZXNcclxuKTtcclxuZ29vZy5leHBvcnRTeW1ib2woXHJcbiAgJ1psaWIuVW56aXAucHJvdG90eXBlLmdldEZpbGVIZWFkZXJBdHRyaWJ1dGUnLFxyXG4gIFpsaWIuVW56aXAucHJvdG90eXBlLmdldEZpbGVIZWFkZXJBdHRyaWJ1dGVcclxuKTtcclxuZ29vZy5leHBvcnRTeW1ib2woXHJcbiAgJ1psaWIuVW56aXAucHJvdG90eXBlLnNldFBhc3N3b3JkJyxcclxuICBabGliLlVuemlwLnByb3RvdHlwZS5zZXRQYXNzd29yZFxyXG4pOyJdfQ==